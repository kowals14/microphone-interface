
lcd_interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004548  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b0c  08004718  08004718  00014718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006224  08006224  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006224  08006224  00016224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800622c  0800622c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800622c  0800622c  0001622c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006230  08006230  00016230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000060  08006294  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08006294  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008332  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ada  00000000  00000000  00028405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c8  00000000  00000000  00029ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005bf  00000000  00000000  0002a6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000251cc  00000000  00000000  0002ac67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a313  00000000  00000000  0004fe33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e369a  00000000  00000000  0005a146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000230c  00000000  00000000  0013d7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0013faec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004700 	.word	0x08004700

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08004700 	.word	0x08004700

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ILI9341_DrawHollowCircle>:
	us *= (SystemCoreClock / 1000000);
	while (us--);
}

void ILI9341_DrawHollowCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b089      	sub	sp, #36	; 0x24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4604      	mov	r4, r0
 80005b4:	4608      	mov	r0, r1
 80005b6:	4611      	mov	r1, r2
 80005b8:	461a      	mov	r2, r3
 80005ba:	4623      	mov	r3, r4
 80005bc:	80fb      	strh	r3, [r7, #6]
 80005be:	4603      	mov	r3, r0
 80005c0:	80bb      	strh	r3, [r7, #4]
 80005c2:	460b      	mov	r3, r1
 80005c4:	807b      	strh	r3, [r7, #2]
 80005c6:	4613      	mov	r3, r2
 80005c8:	803b      	strh	r3, [r7, #0]
	int x = radius-1;
 80005ca:	887b      	ldrh	r3, [r7, #2]
 80005cc:	3b01      	subs	r3, #1
 80005ce:	61fb      	str	r3, [r7, #28]
	int y = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
	int dx = 1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	617b      	str	r3, [r7, #20]
	int dy = 1;
 80005d8:	2301      	movs	r3, #1
 80005da:	613b      	str	r3, [r7, #16]
	int err = dx - (radius << 1);
 80005dc:	887b      	ldrh	r3, [r7, #2]
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	60fb      	str	r3, [r7, #12]

	while (x >= y)
 80005e6:	e08d      	b.n	8000704 <ILI9341_DrawHollowCircle+0x158>
	{
		ILI9341_DrawPixel(X + x, Y + y, color);
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	4413      	add	r3, r2
 80005f0:	b298      	uxth	r0, r3
 80005f2:	69bb      	ldr	r3, [r7, #24]
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	88bb      	ldrh	r3, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	883a      	ldrh	r2, [r7, #0]
 80005fe:	4619      	mov	r1, r3
 8000600:	f000 fd8a 	bl	8001118 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y + x, color);
 8000604:	69bb      	ldr	r3, [r7, #24]
 8000606:	b29a      	uxth	r2, r3
 8000608:	88fb      	ldrh	r3, [r7, #6]
 800060a:	4413      	add	r3, r2
 800060c:	b298      	uxth	r0, r3
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	b29a      	uxth	r2, r3
 8000612:	88bb      	ldrh	r3, [r7, #4]
 8000614:	4413      	add	r3, r2
 8000616:	b29b      	uxth	r3, r3
 8000618:	883a      	ldrh	r2, [r7, #0]
 800061a:	4619      	mov	r1, r3
 800061c:	f000 fd7c 	bl	8001118 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y + x, color);
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	b29b      	uxth	r3, r3
 8000624:	88fa      	ldrh	r2, [r7, #6]
 8000626:	1ad3      	subs	r3, r2, r3
 8000628:	b298      	uxth	r0, r3
 800062a:	69fb      	ldr	r3, [r7, #28]
 800062c:	b29a      	uxth	r2, r3
 800062e:	88bb      	ldrh	r3, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	b29b      	uxth	r3, r3
 8000634:	883a      	ldrh	r2, [r7, #0]
 8000636:	4619      	mov	r1, r3
 8000638:	f000 fd6e 	bl	8001118 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y + y, color);
 800063c:	69fb      	ldr	r3, [r7, #28]
 800063e:	b29b      	uxth	r3, r3
 8000640:	88fa      	ldrh	r2, [r7, #6]
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	b298      	uxth	r0, r3
 8000646:	69bb      	ldr	r3, [r7, #24]
 8000648:	b29a      	uxth	r2, r3
 800064a:	88bb      	ldrh	r3, [r7, #4]
 800064c:	4413      	add	r3, r2
 800064e:	b29b      	uxth	r3, r3
 8000650:	883a      	ldrh	r2, [r7, #0]
 8000652:	4619      	mov	r1, r3
 8000654:	f000 fd60 	bl	8001118 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y - y, color);
 8000658:	69fb      	ldr	r3, [r7, #28]
 800065a:	b29b      	uxth	r3, r3
 800065c:	88fa      	ldrh	r2, [r7, #6]
 800065e:	1ad3      	subs	r3, r2, r3
 8000660:	b298      	uxth	r0, r3
 8000662:	69bb      	ldr	r3, [r7, #24]
 8000664:	b29b      	uxth	r3, r3
 8000666:	88ba      	ldrh	r2, [r7, #4]
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	b29b      	uxth	r3, r3
 800066c:	883a      	ldrh	r2, [r7, #0]
 800066e:	4619      	mov	r1, r3
 8000670:	f000 fd52 	bl	8001118 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y - x, color);
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	b29b      	uxth	r3, r3
 8000678:	88fa      	ldrh	r2, [r7, #6]
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	b298      	uxth	r0, r3
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	b29b      	uxth	r3, r3
 8000682:	88ba      	ldrh	r2, [r7, #4]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	b29b      	uxth	r3, r3
 8000688:	883a      	ldrh	r2, [r7, #0]
 800068a:	4619      	mov	r1, r3
 800068c:	f000 fd44 	bl	8001118 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y - x, color);
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	b29a      	uxth	r2, r3
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	4413      	add	r3, r2
 8000698:	b298      	uxth	r0, r3
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	b29b      	uxth	r3, r3
 800069e:	88ba      	ldrh	r2, [r7, #4]
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	883a      	ldrh	r2, [r7, #0]
 80006a6:	4619      	mov	r1, r3
 80006a8:	f000 fd36 	bl	8001118 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + x, Y - y, color);
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	4413      	add	r3, r2
 80006b4:	b298      	uxth	r0, r3
 80006b6:	69bb      	ldr	r3, [r7, #24]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	88ba      	ldrh	r2, [r7, #4]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	b29b      	uxth	r3, r3
 80006c0:	883a      	ldrh	r2, [r7, #0]
 80006c2:	4619      	mov	r1, r3
 80006c4:	f000 fd28 	bl	8001118 <ILI9341_DrawPixel>

		if (err <= 0)
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	dc09      	bgt.n	80006e2 <ILI9341_DrawHollowCircle+0x136>
		{
			y++;
 80006ce:	69bb      	ldr	r3, [r7, #24]
 80006d0:	3301      	adds	r3, #1
 80006d2:	61bb      	str	r3, [r7, #24]
			err += dy;
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	4413      	add	r3, r2
 80006da:	60fb      	str	r3, [r7, #12]
			dy += 2;
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	3302      	adds	r3, #2
 80006e0:	613b      	str	r3, [r7, #16]
		}

		if (err > 0)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	dd0d      	ble.n	8000704 <ILI9341_DrawHollowCircle+0x158>
		{
			x--;
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	3b01      	subs	r3, #1
 80006ec:	61fb      	str	r3, [r7, #28]
			dx += 2;
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	3302      	adds	r3, #2
 80006f2:	617b      	str	r3, [r7, #20]
			err += (-radius << 1) + dx;
 80006f4:	887b      	ldrh	r3, [r7, #2]
 80006f6:	425b      	negs	r3, r3
 80006f8:	005a      	lsls	r2, r3, #1
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	4413      	add	r3, r2
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	4413      	add	r3, r2
 8000702:	60fb      	str	r3, [r7, #12]
	while (x >= y)
 8000704:	69fa      	ldr	r2, [r7, #28]
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	429a      	cmp	r2, r3
 800070a:	f6bf af6d 	bge.w	80005e8 <ILI9341_DrawHollowCircle+0x3c>
		}
	}
}
 800070e:	bf00      	nop
 8000710:	bf00      	nop
 8000712:	3724      	adds	r7, #36	; 0x24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd90      	pop	{r4, r7, pc}

08000718 <ILI9341_DrawFilledCircle>:

void ILI9341_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b08b      	sub	sp, #44	; 0x2c
 800071c:	af00      	add	r7, sp, #0
 800071e:	4604      	mov	r4, r0
 8000720:	4608      	mov	r0, r1
 8000722:	4611      	mov	r1, r2
 8000724:	461a      	mov	r2, r3
 8000726:	4623      	mov	r3, r4
 8000728:	80fb      	strh	r3, [r7, #6]
 800072a:	4603      	mov	r3, r0
 800072c:	80bb      	strh	r3, [r7, #4]
 800072e:	460b      	mov	r3, r1
 8000730:	807b      	strh	r3, [r7, #2]
 8000732:	4613      	mov	r3, r2
 8000734:	803b      	strh	r3, [r7, #0]

	int x = radius;
 8000736:	887b      	ldrh	r3, [r7, #2]
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
	int y = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (radius << 1);
 800073e:	887b      	ldrh	r3, [r7, #2]
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	f1c3 0301 	rsb	r3, r3, #1
 8000746:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]

	while (x >= y)
 8000750:	e061      	b.n	8000816 <ILI9341_DrawFilledCircle+0xfe>
	{
		for (int i = X - x; i <= X + x; i++)
 8000752:	88fa      	ldrh	r2, [r7, #6]
 8000754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000756:	1ad3      	subs	r3, r2, r3
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	e018      	b.n	800078e <ILI9341_DrawFilledCircle+0x76>
		{
			ILI9341_DrawPixel(i, Y + y,color);
 800075c:	693b      	ldr	r3, [r7, #16]
 800075e:	b298      	uxth	r0, r3
 8000760:	6a3b      	ldr	r3, [r7, #32]
 8000762:	b29a      	uxth	r2, r3
 8000764:	88bb      	ldrh	r3, [r7, #4]
 8000766:	4413      	add	r3, r2
 8000768:	b29b      	uxth	r3, r3
 800076a:	883a      	ldrh	r2, [r7, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	f000 fcd3 	bl	8001118 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - y,color);
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	b298      	uxth	r0, r3
 8000776:	6a3b      	ldr	r3, [r7, #32]
 8000778:	b29b      	uxth	r3, r3
 800077a:	88ba      	ldrh	r2, [r7, #4]
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	b29b      	uxth	r3, r3
 8000780:	883a      	ldrh	r2, [r7, #0]
 8000782:	4619      	mov	r1, r3
 8000784:	f000 fcc8 	bl	8001118 <ILI9341_DrawPixel>
		for (int i = X - x; i <= X + x; i++)
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	3301      	adds	r3, #1
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	88fa      	ldrh	r2, [r7, #6]
 8000790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000792:	4413      	add	r3, r2
 8000794:	693a      	ldr	r2, [r7, #16]
 8000796:	429a      	cmp	r2, r3
 8000798:	dde0      	ble.n	800075c <ILI9341_DrawFilledCircle+0x44>
		}

		for (int i = X - y; i <= X + y; i++)
 800079a:	88fa      	ldrh	r2, [r7, #6]
 800079c:	6a3b      	ldr	r3, [r7, #32]
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	e018      	b.n	80007d6 <ILI9341_DrawFilledCircle+0xbe>
		{
			ILI9341_DrawPixel(i, Y + x,color);
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	b298      	uxth	r0, r3
 80007a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	88bb      	ldrh	r3, [r7, #4]
 80007ae:	4413      	add	r3, r2
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	883a      	ldrh	r2, [r7, #0]
 80007b4:	4619      	mov	r1, r3
 80007b6:	f000 fcaf 	bl	8001118 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - x,color);
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	b298      	uxth	r0, r3
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	88ba      	ldrh	r2, [r7, #4]
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	883a      	ldrh	r2, [r7, #0]
 80007ca:	4619      	mov	r1, r3
 80007cc:	f000 fca4 	bl	8001118 <ILI9341_DrawPixel>
		for (int i = X - y; i <= X + y; i++)
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3301      	adds	r3, #1
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	88fa      	ldrh	r2, [r7, #6]
 80007d8:	6a3b      	ldr	r3, [r7, #32]
 80007da:	4413      	add	r3, r2
 80007dc:	68fa      	ldr	r2, [r7, #12]
 80007de:	429a      	cmp	r2, r3
 80007e0:	dde0      	ble.n	80007a4 <ILI9341_DrawFilledCircle+0x8c>
		}

		y++;
 80007e2:	6a3b      	ldr	r3, [r7, #32]
 80007e4:	3301      	adds	r3, #1
 80007e6:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	4413      	add	r3, r2
 80007ee:	617b      	str	r3, [r7, #20]
		yChange += 2;
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	3302      	adds	r3, #2
 80007f4:	61bb      	str	r3, [r7, #24]

		if (((radiusError << 1) + xChange) > 0)
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	005a      	lsls	r2, r3, #1
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	4413      	add	r3, r2
 80007fe:	2b00      	cmp	r3, #0
 8000800:	dd09      	ble.n	8000816 <ILI9341_DrawFilledCircle+0xfe>
		{
			x--;
 8000802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000804:	3b01      	subs	r3, #1
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
			radiusError += xChange;
 8000808:	697a      	ldr	r2, [r7, #20]
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	4413      	add	r3, r2
 800080e:	617b      	str	r3, [r7, #20]
			xChange += 2;
 8000810:	69fb      	ldr	r3, [r7, #28]
 8000812:	3302      	adds	r3, #2
 8000814:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 8000816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000818:	6a3b      	ldr	r3, [r7, #32]
 800081a:	429a      	cmp	r2, r3
 800081c:	da99      	bge.n	8000752 <ILI9341_DrawFilledCircle+0x3a>
		}
	}
}
 800081e:	bf00      	nop
 8000820:	bf00      	nop
 8000822:	372c      	adds	r7, #44	; 0x2c
 8000824:	46bd      	mov	sp, r7
 8000826:	bd90      	pop	{r4, r7, pc}

08000828 <ILI9341_DrawHollowRectangleCoord>:

void ILI9341_DrawHollowRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b087      	sub	sp, #28
 800082c:	af00      	add	r7, sp, #0
 800082e:	4604      	mov	r4, r0
 8000830:	4608      	mov	r0, r1
 8000832:	4611      	mov	r1, r2
 8000834:	461a      	mov	r2, r3
 8000836:	4623      	mov	r3, r4
 8000838:	80fb      	strh	r3, [r7, #6]
 800083a:	4603      	mov	r3, r0
 800083c:	80bb      	strh	r3, [r7, #4]
 800083e:	460b      	mov	r3, r1
 8000840:	807b      	strh	r3, [r7, #2]
 8000842:	4613      	mov	r3, r2
 8000844:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	74bb      	strb	r3, [r7, #18]
	float negCalc = 0;
 8000856:	f04f 0300 	mov.w	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]

	negCalc = X1 - X0;
 800085c:	887a      	ldrh	r2, [r7, #2]
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	ee07 3a90 	vmov	s15, r3
 8000866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800086a:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negX = 1;
 800086e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000872:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800087a:	d501      	bpl.n	8000880 <ILI9341_DrawHollowRectangleCoord+0x58>
 800087c:	2301      	movs	r3, #1
 800087e:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8000880:	f04f 0300 	mov.w	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]

	negCalc = Y1 - Y0;
 8000886:	883a      	ldrh	r2, [r7, #0]
 8000888:	88bb      	ldrh	r3, [r7, #4]
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	ee07 3a90 	vmov	s15, r3
 8000890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000894:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negY = 1;
 8000898:	edd7 7a03 	vldr	s15, [r7, #12]
 800089c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008a4:	d501      	bpl.n	80008aa <ILI9341_DrawHollowRectangleCoord+0x82>
 80008a6:	2301      	movs	r3, #1
 80008a8:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if(!negX)
 80008aa:	7cfb      	ldrb	r3, [r7, #19]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d104      	bne.n	80008ba <ILI9341_DrawHollowRectangleCoord+0x92>
	{
		xLen = X1 - X0;
 80008b0:	887a      	ldrh	r2, [r7, #2]
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	82fb      	strh	r3, [r7, #22]
 80008b8:	e003      	b.n	80008c2 <ILI9341_DrawHollowRectangleCoord+0x9a>
	}
	else
	{
		xLen = X0 - X1;
 80008ba:	88fa      	ldrh	r2, [r7, #6]
 80008bc:	887b      	ldrh	r3, [r7, #2]
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_DrawHLine(X0, Y0, xLen, color);
 80008c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80008c4:	8afa      	ldrh	r2, [r7, #22]
 80008c6:	88b9      	ldrh	r1, [r7, #4]
 80008c8:	88f8      	ldrh	r0, [r7, #6]
 80008ca:	f000 fce7 	bl	800129c <ILI9341_DrawHLine>
	ILI9341_DrawHLine(X0, Y1, xLen, color);
 80008ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80008d0:	8afa      	ldrh	r2, [r7, #22]
 80008d2:	8839      	ldrh	r1, [r7, #0]
 80008d4:	88f8      	ldrh	r0, [r7, #6]
 80008d6:	f000 fce1 	bl	800129c <ILI9341_DrawHLine>

	//DRAW VERTICAL!
	if(!negY)
 80008da:	7cbb      	ldrb	r3, [r7, #18]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d104      	bne.n	80008ea <ILI9341_DrawHollowRectangleCoord+0xc2>
	{
		yLen = Y1 - Y0;
 80008e0:	883a      	ldrh	r2, [r7, #0]
 80008e2:	88bb      	ldrh	r3, [r7, #4]
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	82bb      	strh	r3, [r7, #20]
 80008e8:	e003      	b.n	80008f2 <ILI9341_DrawHollowRectangleCoord+0xca>
	}
	else
	{
		yLen = Y0 - Y1;
 80008ea:	88ba      	ldrh	r2, [r7, #4]
 80008ec:	883b      	ldrh	r3, [r7, #0]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	82bb      	strh	r3, [r7, #20]
	}

	ILI9341_DrawVLine(X0, Y0, yLen, color);
 80008f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80008f4:	8aba      	ldrh	r2, [r7, #20]
 80008f6:	88b9      	ldrh	r1, [r7, #4]
 80008f8:	88f8      	ldrh	r0, [r7, #6]
 80008fa:	f000 fd13 	bl	8001324 <ILI9341_DrawVLine>
	ILI9341_DrawVLine(X1, Y0, yLen, color);
 80008fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000900:	8aba      	ldrh	r2, [r7, #20]
 8000902:	88b9      	ldrh	r1, [r7, #4]
 8000904:	8878      	ldrh	r0, [r7, #2]
 8000906:	f000 fd0d 	bl	8001324 <ILI9341_DrawVLine>

	if((xLen > 0)||(yLen > 0))
 800090a:	8afb      	ldrh	r3, [r7, #22]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d102      	bne.n	8000916 <ILI9341_DrawHollowRectangleCoord+0xee>
 8000910:	8abb      	ldrh	r3, [r7, #20]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d005      	beq.n	8000922 <ILI9341_DrawHollowRectangleCoord+0xfa>
	{
		ILI9341_DrawPixel(X1, Y1, color);
 8000916:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000918:	8839      	ldrh	r1, [r7, #0]
 800091a:	887b      	ldrh	r3, [r7, #2]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 fbfb 	bl	8001118 <ILI9341_DrawPixel>
	}
}
 8000922:	bf00      	nop
 8000924:	371c      	adds	r7, #28
 8000926:	46bd      	mov	sp, r7
 8000928:	bd90      	pop	{r4, r7, pc}

0800092a <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 800092a:	b590      	push	{r4, r7, lr}
 800092c:	b08d      	sub	sp, #52	; 0x34
 800092e:	af02      	add	r7, sp, #8
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	4611      	mov	r1, r2
 8000934:	461a      	mov	r2, r3
 8000936:	4603      	mov	r3, r0
 8000938:	73fb      	strb	r3, [r7, #15]
 800093a:	460b      	mov	r3, r1
 800093c:	81bb      	strh	r3, [r7, #12]
 800093e:	4613      	mov	r3, r2
 8000940:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	2b1e      	cmp	r3, #30
 8000946:	d964      	bls.n	8000a12 <ILI9341_DrawChar+0xe8>
 8000948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800094c:	2b00      	cmp	r3, #0
 800094e:	db60      	blt.n	8000a12 <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	3301      	adds	r3, #1
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	3302      	adds	r3, #2
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	3303      	adds	r3, #3
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	3b20      	subs	r3, #32
 8000972:	7ffa      	ldrb	r2, [r7, #31]
 8000974:	fb02 f303 	mul.w	r3, r2, r3
 8000978:	3304      	adds	r3, #4
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	4413      	add	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000980:	7fbb      	ldrb	r3, [r7, #30]
 8000982:	b29a      	uxth	r2, r3
 8000984:	7f7b      	ldrb	r3, [r7, #29]
 8000986:	b29c      	uxth	r4, r3
 8000988:	88f9      	ldrh	r1, [r7, #6]
 800098a:	89b8      	ldrh	r0, [r7, #12]
 800098c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	4623      	mov	r3, r4
 8000992:	f000 fc27 	bl	80011e4 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
 800099a:	e035      	b.n	8000a08 <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
 80009a0:	e02b      	b.n	80009fa <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 80009a2:	7f3b      	ldrb	r3, [r7, #28]
 80009a4:	6a3a      	ldr	r2, [r7, #32]
 80009a6:	fb03 f202 	mul.w	r2, r3, r2
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	10db      	asrs	r3, r3, #3
 80009ae:	f003 031f 	and.w	r3, r3, #31
 80009b2:	4413      	add	r3, r2
 80009b4:	3301      	adds	r3, #1
 80009b6:	69ba      	ldr	r2, [r7, #24]
 80009b8:	4413      	add	r3, r2
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 80009be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c0:	f003 0307 	and.w	r3, r3, #7
 80009c4:	2201      	movs	r2, #1
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 80009cc:	7dfa      	ldrb	r2, [r7, #23]
 80009ce:	7dbb      	ldrb	r3, [r7, #22]
 80009d0:	4013      	ands	r3, r2
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d00d      	beq.n	80009f4 <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 80009d8:	6a3b      	ldr	r3, [r7, #32]
 80009da:	b29a      	uxth	r2, r3
 80009dc:	89bb      	ldrh	r3, [r7, #12]
 80009de:	4413      	add	r3, r2
 80009e0:	b298      	uxth	r0, r3
 80009e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	88fb      	ldrh	r3, [r7, #6]
 80009e8:	4413      	add	r3, r2
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80009ee:	4619      	mov	r1, r3
 80009f0:	f000 fb92 	bl	8001118 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 80009f4:	6a3b      	ldr	r3, [r7, #32]
 80009f6:	3301      	adds	r3, #1
 80009f8:	623b      	str	r3, [r7, #32]
 80009fa:	7fbb      	ldrb	r3, [r7, #30]
 80009fc:	6a3a      	ldr	r2, [r7, #32]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	dbcf      	blt.n	80009a2 <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	3301      	adds	r3, #1
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
 8000a08:	7f7b      	ldrb	r3, [r7, #29]
 8000a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	dbc5      	blt.n	800099c <ILI9341_DrawChar+0x72>
 8000a10:	e000      	b.n	8000a14 <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 8000a12:	bf00      	nop
			}
		}
	}
}
 8000a14:	372c      	adds	r7, #44	; 0x2c
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd90      	pop	{r4, r7, pc}

08000a1a <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b08a      	sub	sp, #40	; 0x28
 8000a1e:	af02      	add	r7, sp, #8
 8000a20:	60f8      	str	r0, [r7, #12]
 8000a22:	60b9      	str	r1, [r7, #8]
 8000a24:	4611      	mov	r1, r2
 8000a26:	461a      	mov	r2, r3
 8000a28:	460b      	mov	r3, r1
 8000a2a:	80fb      	strh	r3, [r7, #6]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8000a3e:	e02d      	b.n	8000a9c <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	7818      	ldrb	r0, [r3, #0]
 8000a44:	88b9      	ldrh	r1, [r7, #4]
 8000a46:	88fa      	ldrh	r2, [r7, #6]
 8000a48:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000a4a:	9301      	str	r3, [sp, #4]
 8000a4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	460b      	mov	r3, r1
 8000a52:	68b9      	ldr	r1, [r7, #8]
 8000a54:	f7ff ff69 	bl	800092a <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	3b20      	subs	r3, #32
 8000a5e:	7ffa      	ldrb	r2, [r7, #31]
 8000a60:	fb02 f303 	mul.w	r3, r2, r3
 8000a64:	3304      	adds	r3, #4
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	4413      	add	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8000a72:	7dfb      	ldrb	r3, [r7, #23]
 8000a74:	1c9a      	adds	r2, r3, #2
 8000a76:	7fbb      	ldrb	r3, [r7, #30]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	da07      	bge.n	8000a8c <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8000a7c:	7dfb      	ldrb	r3, [r7, #23]
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	4413      	add	r3, r2
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	3302      	adds	r3, #2
 8000a88:	80fb      	strh	r3, [r7, #6]
 8000a8a:	e004      	b.n	8000a96 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 8000a8c:	7fbb      	ldrb	r3, [r7, #30]
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	4413      	add	r3, r2
 8000a94:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d1cd      	bne.n	8000a40 <ILI9341_DrawText+0x26>
	}
}
 8000aa4:	bf00      	nop
 8000aa6:	bf00      	nop
 8000aa8:	3720      	adds	r7, #32
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a06      	ldr	r2, [pc, #24]	; (8000ad4 <HAL_SPI_TxCpltCallback+0x24>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d105      	bne.n	8000acc <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac6:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <HAL_SPI_TxCpltCallback+0x28>)
 8000ac8:	f001 ff9a 	bl	8002a00 <HAL_GPIO_WritePin>
  }
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2000007c 	.word	0x2000007c
 8000ad8:	40020800 	.word	0x40020800

08000adc <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000ae6:	bf00      	nop
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <ILI9341_SPI_Tx+0x30>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d1f8      	bne.n	8000ae8 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	2201      	movs	r2, #1
 8000afa:	4619      	mov	r1, r3
 8000afc:	4803      	ldr	r0, [pc, #12]	; (8000b0c <ILI9341_SPI_Tx+0x30>)
 8000afe:	f002 fe49 	bl	8003794 <HAL_SPI_Transmit_DMA>
//	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	2000007c 	.word	0x2000007c

08000b10 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000b1c:	bf00      	nop
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <ILI9341_SPI_TxBuffer+0x30>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d1f8      	bne.n	8000b1e <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8000b2c:	887b      	ldrh	r3, [r7, #2]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	6879      	ldr	r1, [r7, #4]
 8000b32:	4803      	ldr	r0, [pc, #12]	; (8000b40 <ILI9341_SPI_TxBuffer+0x30>)
 8000b34:	f002 fe2e 	bl	8003794 <HAL_SPI_Transmit_DMA>
//	HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	2000007c 	.word	0x2000007c

08000b44 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b54:	4808      	ldr	r0, [pc, #32]	; (8000b78 <ILI9341_WriteCommand+0x34>)
 8000b56:	f001 ff53 	bl	8002a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b60:	4805      	ldr	r0, [pc, #20]	; (8000b78 <ILI9341_WriteCommand+0x34>)
 8000b62:	f001 ff4d 	bl	8002a00 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ffb7 	bl	8000adc <ILI9341_SPI_Tx>
//	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40020800 	.word	0x40020800

08000b7c <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000b86:	2201      	movs	r2, #1
 8000b88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b8c:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <ILI9341_WriteData+0x34>)
 8000b8e:	f001 ff37 	bl	8002a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <ILI9341_WriteData+0x34>)
 8000b9a:	f001 ff31 	bl	8002a00 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff9b 	bl	8000adc <ILI9341_SPI_Tx>
//	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40020800 	.word	0x40020800

08000bb4 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc6:	4809      	ldr	r0, [pc, #36]	; (8000bec <ILI9341_WriteBuffer+0x38>)
 8000bc8:	f001 ff1a 	bl	8002a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <ILI9341_WriteBuffer+0x38>)
 8000bd4:	f001 ff14 	bl	8002a00 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000bd8:	887b      	ldrh	r3, [r7, #2]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ff97 	bl	8000b10 <ILI9341_SPI_TxBuffer>
//	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40020800 	.word	0x40020800

08000bf0 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	4608      	mov	r0, r1
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4623      	mov	r3, r4
 8000c00:	80fb      	strh	r3, [r7, #6]
 8000c02:	4603      	mov	r3, r0
 8000c04:	80bb      	strh	r3, [r7, #4]
 8000c06:	460b      	mov	r3, r1
 8000c08:	807b      	strh	r3, [r7, #2]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8000c1e:	887b      	ldrh	r3, [r7, #2]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8000c28:	887b      	ldrh	r3, [r7, #2]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8000c2e:	202a      	movs	r0, #42	; 0x2a
 8000c30:	f7ff ff88 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	2104      	movs	r1, #4
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ffba 	bl	8000bb4 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8000c40:	88bb      	ldrh	r3, [r7, #4]
 8000c42:	0a1b      	lsrs	r3, r3, #8
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8000c4a:	88bb      	ldrh	r3, [r7, #4]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8000c50:	883b      	ldrh	r3, [r7, #0]
 8000c52:	0a1b      	lsrs	r3, r3, #8
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8000c5a:	883b      	ldrh	r3, [r7, #0]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8000c60:	202b      	movs	r0, #43	; 0x2b
 8000c62:	f7ff ff6f 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000c66:	f107 030c 	add.w	r3, r7, #12
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ffa1 	bl	8000bb4 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000c72:	202c      	movs	r0, #44	; 0x2c
 8000c74:	f7ff ff66 	bl	8000b44 <ILI9341_WriteCommand>
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd90      	pop	{r4, r7, pc}

08000c80 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000c84:	2200      	movs	r2, #0
 8000c86:	2140      	movs	r1, #64	; 0x40
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <ILI9341_Reset+0x40>)
 8000c8a:	f001 feb9 	bl	8002a00 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c8e:	200a      	movs	r0, #10
 8000c90:	f001 f85c 	bl	8001d4c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c9a:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <ILI9341_Reset+0x40>)
 8000c9c:	f001 feb0 	bl	8002a00 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ca0:	200a      	movs	r0, #10
 8000ca2:	f001 f853 	bl	8001d4c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2140      	movs	r1, #64	; 0x40
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <ILI9341_Reset+0x40>)
 8000cac:	f001 fea8 	bl	8002a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cb6:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <ILI9341_Reset+0x40>)
 8000cb8:	f001 fea2 	bl	8002a00 <HAL_GPIO_WritePin>
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40020800 	.word	0x40020800

08000cc4 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2140      	movs	r1, #64	; 0x40
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <ILI9341_Enable+0x14>)
 8000cce:	f001 fe97 	bl	8002a00 <HAL_GPIO_WritePin>
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40020800 	.word	0x40020800

08000cdc <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000ce0:	f7ff fff0 	bl	8000cc4 <ILI9341_Enable>
	ILI9341_Reset();
 8000ce4:	f7ff ffcc 	bl	8000c80 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f7ff ff2b 	bl	8000b44 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000cee:	200a      	movs	r0, #10
 8000cf0:	f001 f82c 	bl	8001d4c <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000cf4:	20cb      	movs	r0, #203	; 0xcb
 8000cf6:	f7ff ff25 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000cfa:	2039      	movs	r0, #57	; 0x39
 8000cfc:	f7ff ff3e 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000d00:	202c      	movs	r0, #44	; 0x2c
 8000d02:	f7ff ff3b 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000d06:	2000      	movs	r0, #0
 8000d08:	f7ff ff38 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000d0c:	2034      	movs	r0, #52	; 0x34
 8000d0e:	f7ff ff35 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000d12:	2002      	movs	r0, #2
 8000d14:	f7ff ff32 	bl	8000b7c <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000d18:	20cf      	movs	r0, #207	; 0xcf
 8000d1a:	f7ff ff13 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f7ff ff2c 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000d24:	20c1      	movs	r0, #193	; 0xc1
 8000d26:	f7ff ff29 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000d2a:	2030      	movs	r0, #48	; 0x30
 8000d2c:	f7ff ff26 	bl	8000b7c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000d30:	20e8      	movs	r0, #232	; 0xe8
 8000d32:	f7ff ff07 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000d36:	2085      	movs	r0, #133	; 0x85
 8000d38:	f7ff ff20 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff ff1d 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000d42:	2078      	movs	r0, #120	; 0x78
 8000d44:	f7ff ff1a 	bl	8000b7c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000d48:	20ea      	movs	r0, #234	; 0xea
 8000d4a:	f7ff fefb 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f7ff ff14 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000d54:	2000      	movs	r0, #0
 8000d56:	f7ff ff11 	bl	8000b7c <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000d5a:	20ed      	movs	r0, #237	; 0xed
 8000d5c:	f7ff fef2 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000d60:	2064      	movs	r0, #100	; 0x64
 8000d62:	f7ff ff0b 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000d66:	2003      	movs	r0, #3
 8000d68:	f7ff ff08 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000d6c:	2012      	movs	r0, #18
 8000d6e:	f7ff ff05 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000d72:	2081      	movs	r0, #129	; 0x81
 8000d74:	f7ff ff02 	bl	8000b7c <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000d78:	20f7      	movs	r0, #247	; 0xf7
 8000d7a:	f7ff fee3 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000d7e:	2020      	movs	r0, #32
 8000d80:	f7ff fefc 	bl	8000b7c <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000d84:	20c0      	movs	r0, #192	; 0xc0
 8000d86:	f7ff fedd 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000d8a:	2023      	movs	r0, #35	; 0x23
 8000d8c:	f7ff fef6 	bl	8000b7c <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000d90:	20c1      	movs	r0, #193	; 0xc1
 8000d92:	f7ff fed7 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000d96:	2010      	movs	r0, #16
 8000d98:	f7ff fef0 	bl	8000b7c <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000d9c:	20c5      	movs	r0, #197	; 0xc5
 8000d9e:	f7ff fed1 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000da2:	203e      	movs	r0, #62	; 0x3e
 8000da4:	f7ff feea 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000da8:	2028      	movs	r0, #40	; 0x28
 8000daa:	f7ff fee7 	bl	8000b7c <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000dae:	20c7      	movs	r0, #199	; 0xc7
 8000db0:	f7ff fec8 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000db4:	2086      	movs	r0, #134	; 0x86
 8000db6:	f7ff fee1 	bl	8000b7c <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000dba:	2036      	movs	r0, #54	; 0x36
 8000dbc:	f7ff fec2 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000dc0:	2048      	movs	r0, #72	; 0x48
 8000dc2:	f7ff fedb 	bl	8000b7c <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000dc6:	203a      	movs	r0, #58	; 0x3a
 8000dc8:	f7ff febc 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000dcc:	2055      	movs	r0, #85	; 0x55
 8000dce:	f7ff fed5 	bl	8000b7c <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000dd2:	20b1      	movs	r0, #177	; 0xb1
 8000dd4:	f7ff feb6 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f7ff fecf 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000dde:	2018      	movs	r0, #24
 8000de0:	f7ff fecc 	bl	8000b7c <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000de4:	20b6      	movs	r0, #182	; 0xb6
 8000de6:	f7ff fead 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000dea:	2008      	movs	r0, #8
 8000dec:	f7ff fec6 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000df0:	2082      	movs	r0, #130	; 0x82
 8000df2:	f7ff fec3 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000df6:	2027      	movs	r0, #39	; 0x27
 8000df8:	f7ff fec0 	bl	8000b7c <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000dfc:	20f2      	movs	r0, #242	; 0xf2
 8000dfe:	f7ff fea1 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff feba 	bl	8000b7c <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000e08:	2026      	movs	r0, #38	; 0x26
 8000e0a:	f7ff fe9b 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f7ff feb4 	bl	8000b7c <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000e14:	20e0      	movs	r0, #224	; 0xe0
 8000e16:	f7ff fe95 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000e1a:	200f      	movs	r0, #15
 8000e1c:	f7ff feae 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000e20:	2031      	movs	r0, #49	; 0x31
 8000e22:	f7ff feab 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000e26:	202b      	movs	r0, #43	; 0x2b
 8000e28:	f7ff fea8 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000e2c:	200c      	movs	r0, #12
 8000e2e:	f7ff fea5 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000e32:	200e      	movs	r0, #14
 8000e34:	f7ff fea2 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000e38:	2008      	movs	r0, #8
 8000e3a:	f7ff fe9f 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000e3e:	204e      	movs	r0, #78	; 0x4e
 8000e40:	f7ff fe9c 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000e44:	20f1      	movs	r0, #241	; 0xf1
 8000e46:	f7ff fe99 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000e4a:	2037      	movs	r0, #55	; 0x37
 8000e4c:	f7ff fe96 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000e50:	2007      	movs	r0, #7
 8000e52:	f7ff fe93 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000e56:	2010      	movs	r0, #16
 8000e58:	f7ff fe90 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f7ff fe8d 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000e62:	200e      	movs	r0, #14
 8000e64:	f7ff fe8a 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000e68:	2009      	movs	r0, #9
 8000e6a:	f7ff fe87 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f7ff fe84 	bl	8000b7c <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000e74:	20e1      	movs	r0, #225	; 0xe1
 8000e76:	f7ff fe65 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f7ff fe7e 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000e80:	200e      	movs	r0, #14
 8000e82:	f7ff fe7b 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000e86:	2014      	movs	r0, #20
 8000e88:	f7ff fe78 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f7ff fe75 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000e92:	2011      	movs	r0, #17
 8000e94:	f7ff fe72 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000e98:	2007      	movs	r0, #7
 8000e9a:	f7ff fe6f 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000e9e:	2031      	movs	r0, #49	; 0x31
 8000ea0:	f7ff fe6c 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000ea4:	20c1      	movs	r0, #193	; 0xc1
 8000ea6:	f7ff fe69 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000eaa:	2048      	movs	r0, #72	; 0x48
 8000eac:	f7ff fe66 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000eb0:	2008      	movs	r0, #8
 8000eb2:	f7ff fe63 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000eb6:	200f      	movs	r0, #15
 8000eb8:	f7ff fe60 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000ebc:	200c      	movs	r0, #12
 8000ebe:	f7ff fe5d 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000ec2:	2031      	movs	r0, #49	; 0x31
 8000ec4:	f7ff fe5a 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000ec8:	2036      	movs	r0, #54	; 0x36
 8000eca:	f7ff fe57 	bl	8000b7c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000ece:	200f      	movs	r0, #15
 8000ed0:	f7ff fe54 	bl	8000b7c <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000ed4:	2011      	movs	r0, #17
 8000ed6:	f7ff fe35 	bl	8000b44 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000eda:	2064      	movs	r0, #100	; 0x64
 8000edc:	f000 ff36 	bl	8001d4c <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000ee0:	2029      	movs	r0, #41	; 0x29
 8000ee2:	f7ff fe2f 	bl	8000b44 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f000 f802 	bl	8000ef0 <ILI9341_SetRotation>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000efa:	2036      	movs	r0, #54	; 0x36
 8000efc:	f7ff fe22 	bl	8000b44 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f000 ff23 	bl	8001d4c <HAL_Delay>

	switch(rotation)
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d837      	bhi.n	8000f7c <ILI9341_SetRotation+0x8c>
 8000f0c:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <ILI9341_SetRotation+0x24>)
 8000f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f12:	bf00      	nop
 8000f14:	08000f25 	.word	0x08000f25
 8000f18:	08000f3b 	.word	0x08000f3b
 8000f1c:	08000f51 	.word	0x08000f51
 8000f20:	08000f67 	.word	0x08000f67
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000f24:	2048      	movs	r0, #72	; 0x48
 8000f26:	f7ff fe29 	bl	8000b7c <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <ILI9341_SetRotation+0x98>)
 8000f2c:	22f0      	movs	r2, #240	; 0xf0
 8000f2e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <ILI9341_SetRotation+0x9c>)
 8000f32:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f36:	801a      	strh	r2, [r3, #0]
		break;
 8000f38:	e021      	b.n	8000f7e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000f3a:	2028      	movs	r0, #40	; 0x28
 8000f3c:	f7ff fe1e 	bl	8000b7c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <ILI9341_SetRotation+0x98>)
 8000f42:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f46:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <ILI9341_SetRotation+0x9c>)
 8000f4a:	22f0      	movs	r2, #240	; 0xf0
 8000f4c:	801a      	strh	r2, [r3, #0]
		break;
 8000f4e:	e016      	b.n	8000f7e <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000f50:	2088      	movs	r0, #136	; 0x88
 8000f52:	f7ff fe13 	bl	8000b7c <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <ILI9341_SetRotation+0x98>)
 8000f58:	22f0      	movs	r2, #240	; 0xf0
 8000f5a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <ILI9341_SetRotation+0x9c>)
 8000f5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f62:	801a      	strh	r2, [r3, #0]
		break;
 8000f64:	e00b      	b.n	8000f7e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000f66:	20e8      	movs	r0, #232	; 0xe8
 8000f68:	f7ff fe08 	bl	8000b7c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <ILI9341_SetRotation+0x98>)
 8000f6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f72:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <ILI9341_SetRotation+0x9c>)
 8000f76:	22f0      	movs	r2, #240	; 0xf0
 8000f78:	801a      	strh	r2, [r3, #0]
		break;
 8000f7a:	e000      	b.n	8000f7e <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000f7c:	bf00      	nop
	}
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000002 	.word	0x20000002
 8000f8c:	20000000 	.word	0x20000000

08000f90 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f94:	b08d      	sub	sp, #52	; 0x34
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	6039      	str	r1, [r7, #0]
 8000f9c:	80fb      	strh	r3, [r7, #6]
 8000f9e:	466b      	mov	r3, sp
 8000fa0:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fae:	d202      	bcs.n	8000fb6 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fb4:	e002      	b.n	8000fbc <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000fb6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc2:	4840      	ldr	r0, [pc, #256]	; (80010c4 <ILI9341_DrawColorBurst+0x134>)
 8000fc4:	f001 fd1c 	bl	8002a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fce:	483d      	ldr	r0, [pc, #244]	; (80010c4 <ILI9341_DrawColorBurst+0x134>)
 8000fd0:	f001 fd16 	bl	8002a00 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	0a1b      	lsrs	r3, r3, #8
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 8000fde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	61fb      	str	r3, [r7, #28]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	4688      	mov	r8, r1
 8000fea:	4699      	mov	r9, r3
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	f04f 0300 	mov.w	r3, #0
 8000ff4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ff8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ffc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001000:	2300      	movs	r3, #0
 8001002:	460c      	mov	r4, r1
 8001004:	461d      	mov	r5, r3
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	00eb      	lsls	r3, r5, #3
 8001010:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001014:	00e2      	lsls	r2, r4, #3
 8001016:	1dcb      	adds	r3, r1, #7
 8001018:	08db      	lsrs	r3, r3, #3
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	ebad 0d03 	sub.w	sp, sp, r3
 8001020:	466b      	mov	r3, sp
 8001022:	3300      	adds	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
 800102a:	e00e      	b.n	800104a <ILI9341_DrawColorBurst+0xba>
	{
		BurstBuffer[j] = chifted;
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001030:	4413      	add	r3, r2
 8001032:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001036:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8001038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800103a:	3301      	adds	r3, #1
 800103c:	88fa      	ldrh	r2, [r7, #6]
 800103e:	b2d1      	uxtb	r1, r2
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001046:	3302      	adds	r3, #2
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
 800104a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800104c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800104e:	429a      	cmp	r2, r3
 8001050:	d3ec      	bcc.n	800102c <ILI9341_DrawColorBurst+0x9c>
	}

	uint32_t SendingSize = size * 2;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001060:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001066:	fbb3 f2f2 	udiv	r2, r3, r2
 800106a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800106c:	fb01 f202 	mul.w	r2, r1, r2
 8001070:	1a9b      	subs	r3, r3, r2
 8001072:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d010      	beq.n	800109c <ILI9341_DrawColorBurst+0x10c>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
 800107e:	e009      	b.n	8001094 <ILI9341_DrawColorBurst+0x104>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8001080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001082:	b29a      	uxth	r2, r3
 8001084:	230a      	movs	r3, #10
 8001086:	69b9      	ldr	r1, [r7, #24]
 8001088:	480f      	ldr	r0, [pc, #60]	; (80010c8 <ILI9341_DrawColorBurst+0x138>)
 800108a:	f002 fa14 	bl	80034b6 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	3301      	adds	r3, #1
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
 8001094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	429a      	cmp	r2, r3
 800109a:	d3f1      	bcc.n	8001080 <ILI9341_DrawColorBurst+0xf0>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	b29a      	uxth	r2, r3
 80010a0:	230a      	movs	r3, #10
 80010a2:	69b9      	ldr	r1, [r7, #24]
 80010a4:	4808      	ldr	r0, [pc, #32]	; (80010c8 <ILI9341_DrawColorBurst+0x138>)
 80010a6:	f002 fa06 	bl	80034b6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80010aa:	2201      	movs	r2, #1
 80010ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <ILI9341_DrawColorBurst+0x134>)
 80010b2:	f001 fca5 	bl	8002a00 <HAL_GPIO_WritePin>
 80010b6:	46b5      	mov	sp, r6
}
 80010b8:	bf00      	nop
 80010ba:	3734      	adds	r7, #52	; 0x34
 80010bc:	46bd      	mov	sp, r7
 80010be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010c2:	bf00      	nop
 80010c4:	40020800 	.word	0x40020800
 80010c8:	2000007c 	.word	0x2000007c

080010cc <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <ILI9341_FillScreen+0x44>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <ILI9341_FillScreen+0x48>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	2100      	movs	r1, #0
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff fd83 	bl	8000bf0 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <ILI9341_FillScreen+0x44>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <ILI9341_FillScreen+0x48>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	fb02 f303 	mul.w	r3, r2, r3
 80010fc:	461a      	mov	r2, r3
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	4611      	mov	r1, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff44 	bl	8000f90 <ILI9341_DrawColorBurst>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000002 	.word	0x20000002
 8001114:	20000000 	.word	0x20000000

08001118 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
 8001122:	460b      	mov	r3, r1
 8001124:	80bb      	strh	r3, [r7, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800112a:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <ILI9341_DrawPixel+0xc4>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	88fa      	ldrh	r2, [r7, #6]
 8001132:	429a      	cmp	r2, r3
 8001134:	d24d      	bcs.n	80011d2 <ILI9341_DrawPixel+0xba>
 8001136:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <ILI9341_DrawPixel+0xc8>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	b29b      	uxth	r3, r3
 800113c:	88ba      	ldrh	r2, [r7, #4]
 800113e:	429a      	cmp	r2, r3
 8001140:	d247      	bcs.n	80011d2 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	b29b      	uxth	r3, r3
 8001148:	b2db      	uxtb	r3, r3
 800114a:	753b      	strb	r3, [r7, #20]
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	757b      	strb	r3, [r7, #21]
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	3301      	adds	r3, #1
 8001156:	121b      	asrs	r3, r3, #8
 8001158:	b2db      	uxtb	r3, r3
 800115a:	75bb      	strb	r3, [r7, #22]
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	3301      	adds	r3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8001166:	88bb      	ldrh	r3, [r7, #4]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	b29b      	uxth	r3, r3
 800116c:	b2db      	uxtb	r3, r3
 800116e:	743b      	strb	r3, [r7, #16]
 8001170:	88bb      	ldrh	r3, [r7, #4]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	747b      	strb	r3, [r7, #17]
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	3301      	adds	r3, #1
 800117a:	121b      	asrs	r3, r3, #8
 800117c:	b2db      	uxtb	r3, r3
 800117e:	74bb      	strb	r3, [r7, #18]
 8001180:	88bb      	ldrh	r3, [r7, #4]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	3301      	adds	r3, #1
 8001186:	b2db      	uxtb	r3, r3
 8001188:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 800118a:	887b      	ldrh	r3, [r7, #2]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	b29b      	uxth	r3, r3
 8001190:	b2db      	uxtb	r3, r3
 8001192:	733b      	strb	r3, [r7, #12]
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 800119a:	202a      	movs	r0, #42	; 0x2a
 800119c:	f7ff fcd2 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2104      	movs	r1, #4
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fd04 	bl	8000bb4 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 80011ac:	202b      	movs	r0, #43	; 0x2b
 80011ae:	f7ff fcc9 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	2104      	movs	r1, #4
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fcfb 	bl	8000bb4 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 80011be:	202c      	movs	r0, #44	; 0x2c
 80011c0:	f7ff fcc0 	bl	8000b44 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	2102      	movs	r1, #2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fcf2 	bl	8000bb4 <ILI9341_WriteBuffer>
 80011d0:	e000      	b.n	80011d4 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80011d2:	bf00      	nop
}
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000002 	.word	0x20000002
 80011e0:	20000000 	.word	0x20000000

080011e4 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4604      	mov	r4, r0
 80011ec:	4608      	mov	r0, r1
 80011ee:	4611      	mov	r1, r2
 80011f0:	461a      	mov	r2, r3
 80011f2:	4623      	mov	r3, r4
 80011f4:	80fb      	strh	r3, [r7, #6]
 80011f6:	4603      	mov	r3, r0
 80011f8:	80bb      	strh	r3, [r7, #4]
 80011fa:	460b      	mov	r3, r1
 80011fc:	807b      	strh	r3, [r7, #2]
 80011fe:	4613      	mov	r3, r2
 8001200:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001202:	4b24      	ldr	r3, [pc, #144]	; (8001294 <ILI9341_DrawRectangle+0xb0>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	b29b      	uxth	r3, r3
 8001208:	88fa      	ldrh	r2, [r7, #6]
 800120a:	429a      	cmp	r2, r3
 800120c:	d23d      	bcs.n	800128a <ILI9341_DrawRectangle+0xa6>
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <ILI9341_DrawRectangle+0xb4>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	88ba      	ldrh	r2, [r7, #4]
 8001216:	429a      	cmp	r2, r3
 8001218:	d237      	bcs.n	800128a <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 800121a:	88fa      	ldrh	r2, [r7, #6]
 800121c:	887b      	ldrh	r3, [r7, #2]
 800121e:	4413      	add	r3, r2
 8001220:	4a1c      	ldr	r2, [pc, #112]	; (8001294 <ILI9341_DrawRectangle+0xb0>)
 8001222:	8812      	ldrh	r2, [r2, #0]
 8001224:	b292      	uxth	r2, r2
 8001226:	4293      	cmp	r3, r2
 8001228:	dd05      	ble.n	8001236 <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <ILI9341_DrawRectangle+0xb0>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	b29a      	uxth	r2, r3
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8001236:	88ba      	ldrh	r2, [r7, #4]
 8001238:	883b      	ldrh	r3, [r7, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a16      	ldr	r2, [pc, #88]	; (8001298 <ILI9341_DrawRectangle+0xb4>)
 800123e:	8812      	ldrh	r2, [r2, #0]
 8001240:	b292      	uxth	r2, r2
 8001242:	4293      	cmp	r3, r2
 8001244:	dd05      	ble.n	8001252 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <ILI9341_DrawRectangle+0xb4>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	b29a      	uxth	r2, r3
 800124c:	88bb      	ldrh	r3, [r7, #4]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8001252:	88fa      	ldrh	r2, [r7, #6]
 8001254:	887b      	ldrh	r3, [r7, #2]
 8001256:	4413      	add	r3, r2
 8001258:	b29b      	uxth	r3, r3
 800125a:	3b01      	subs	r3, #1
 800125c:	b29c      	uxth	r4, r3
 800125e:	88ba      	ldrh	r2, [r7, #4]
 8001260:	883b      	ldrh	r3, [r7, #0]
 8001262:	4413      	add	r3, r2
 8001264:	b29b      	uxth	r3, r3
 8001266:	3b01      	subs	r3, #1
 8001268:	b29b      	uxth	r3, r3
 800126a:	88b9      	ldrh	r1, [r7, #4]
 800126c:	88f8      	ldrh	r0, [r7, #6]
 800126e:	4622      	mov	r2, r4
 8001270:	f7ff fcbe 	bl	8000bf0 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001274:	883b      	ldrh	r3, [r7, #0]
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	fb02 f303 	mul.w	r3, r2, r3
 800127c:	461a      	mov	r2, r3
 800127e:	8b3b      	ldrh	r3, [r7, #24]
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fe84 	bl	8000f90 <ILI9341_DrawColorBurst>
 8001288:	e000      	b.n	800128c <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800128a:	bf00      	nop
}
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bd90      	pop	{r4, r7, pc}
 8001292:	bf00      	nop
 8001294:	20000002 	.word	0x20000002
 8001298:	20000000 	.word	0x20000000

0800129c <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4604      	mov	r4, r0
 80012a4:	4608      	mov	r0, r1
 80012a6:	4611      	mov	r1, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	4623      	mov	r3, r4
 80012ac:	80fb      	strh	r3, [r7, #6]
 80012ae:	4603      	mov	r3, r0
 80012b0:	80bb      	strh	r3, [r7, #4]
 80012b2:	460b      	mov	r3, r1
 80012b4:	807b      	strh	r3, [r7, #2]
 80012b6:	4613      	mov	r3, r2
 80012b8:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80012ba:	4b18      	ldr	r3, [pc, #96]	; (800131c <ILI9341_DrawHLine+0x80>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	88fa      	ldrh	r2, [r7, #6]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d225      	bcs.n	8001312 <ILI9341_DrawHLine+0x76>
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <ILI9341_DrawHLine+0x84>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	88ba      	ldrh	r2, [r7, #4]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d21f      	bcs.n	8001312 <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 80012d2:	88fa      	ldrh	r2, [r7, #6]
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a10      	ldr	r2, [pc, #64]	; (800131c <ILI9341_DrawHLine+0x80>)
 80012da:	8812      	ldrh	r2, [r2, #0]
 80012dc:	b292      	uxth	r2, r2
 80012de:	4293      	cmp	r3, r2
 80012e0:	dd05      	ble.n	80012ee <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <ILI9341_DrawHLine+0x80>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 80012ee:	88fa      	ldrh	r2, [r7, #6]
 80012f0:	887b      	ldrh	r3, [r7, #2]
 80012f2:	4413      	add	r3, r2
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	3b01      	subs	r3, #1
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	88bb      	ldrh	r3, [r7, #4]
 80012fc:	88b9      	ldrh	r1, [r7, #4]
 80012fe:	88f8      	ldrh	r0, [r7, #6]
 8001300:	f7ff fc76 	bl	8000bf0 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 8001304:	887a      	ldrh	r2, [r7, #2]
 8001306:	883b      	ldrh	r3, [r7, #0]
 8001308:	4611      	mov	r1, r2
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fe40 	bl	8000f90 <ILI9341_DrawColorBurst>
 8001310:	e000      	b.n	8001314 <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001312:	bf00      	nop
}
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	bd90      	pop	{r4, r7, pc}
 800131a:	bf00      	nop
 800131c:	20000002 	.word	0x20000002
 8001320:	20000000 	.word	0x20000000

08001324 <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4604      	mov	r4, r0
 800132c:	4608      	mov	r0, r1
 800132e:	4611      	mov	r1, r2
 8001330:	461a      	mov	r2, r3
 8001332:	4623      	mov	r3, r4
 8001334:	80fb      	strh	r3, [r7, #6]
 8001336:	4603      	mov	r3, r0
 8001338:	80bb      	strh	r3, [r7, #4]
 800133a:	460b      	mov	r3, r1
 800133c:	807b      	strh	r3, [r7, #2]
 800133e:	4613      	mov	r3, r2
 8001340:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <ILI9341_DrawVLine+0x80>)
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	b29b      	uxth	r3, r3
 8001348:	88fa      	ldrh	r2, [r7, #6]
 800134a:	429a      	cmp	r2, r3
 800134c:	d225      	bcs.n	800139a <ILI9341_DrawVLine+0x76>
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <ILI9341_DrawVLine+0x84>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	b29b      	uxth	r3, r3
 8001354:	88ba      	ldrh	r2, [r7, #4]
 8001356:	429a      	cmp	r2, r3
 8001358:	d21f      	bcs.n	800139a <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 800135a:	88ba      	ldrh	r2, [r7, #4]
 800135c:	887b      	ldrh	r3, [r7, #2]
 800135e:	4413      	add	r3, r2
 8001360:	4a11      	ldr	r2, [pc, #68]	; (80013a8 <ILI9341_DrawVLine+0x84>)
 8001362:	8812      	ldrh	r2, [r2, #0]
 8001364:	b292      	uxth	r2, r2
 8001366:	4293      	cmp	r3, r2
 8001368:	dd05      	ble.n	8001376 <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <ILI9341_DrawVLine+0x84>)
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	b29a      	uxth	r2, r3
 8001370:	88bb      	ldrh	r3, [r7, #4]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 8001376:	88ba      	ldrh	r2, [r7, #4]
 8001378:	887b      	ldrh	r3, [r7, #2]
 800137a:	4413      	add	r3, r2
 800137c:	b29b      	uxth	r3, r3
 800137e:	3b01      	subs	r3, #1
 8001380:	b29b      	uxth	r3, r3
 8001382:	88fa      	ldrh	r2, [r7, #6]
 8001384:	88b9      	ldrh	r1, [r7, #4]
 8001386:	88f8      	ldrh	r0, [r7, #6]
 8001388:	f7ff fc32 	bl	8000bf0 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 800138c:	887a      	ldrh	r2, [r7, #2]
 800138e:	883b      	ldrh	r3, [r7, #0]
 8001390:	4611      	mov	r1, r2
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fdfc 	bl	8000f90 <ILI9341_DrawColorBurst>
 8001398:	e000      	b.n	800139c <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800139a:	bf00      	nop
}
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd90      	pop	{r4, r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000002 	.word	0x20000002
 80013a8:	20000000 	.word	0x20000000

080013ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b2:	f000 fc6e 	bl	8001c92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b6:	f000 f91b 	bl	80015f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ba:	f000 f9db 	bl	8001774 <MX_GPIO_Init>
  MX_DMA_Init();
 80013be:	f000 f9bb 	bl	8001738 <MX_DMA_Init>
  MX_SPI1_Init();
 80013c2:	f000 f97b 	bl	80016bc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 80013c6:	f7ff fc89 	bl	8000cdc <ILI9341_Init>


  // Simple Text writing (Text, Font, X, Y, Color, BackColor)
  // Available Fonts are FONT1, FONT2, FONT3 and FONT4
  ILI9341_FillScreen(WHITE);
 80013ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80013ce:	f7ff fe7d 	bl	80010cc <ILI9341_FillScreen>
  ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 80013d2:	2003      	movs	r0, #3
 80013d4:	f7ff fd8c 	bl	8000ef0 <ILI9341_SetRotation>
  ILI9341_DrawText("HELLO WORLD", FONT4, 90, 110, BLACK, WHITE);
 80013d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	2300      	movs	r3, #0
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	236e      	movs	r3, #110	; 0x6e
 80013e4:	225a      	movs	r2, #90	; 0x5a
 80013e6:	497d      	ldr	r1, [pc, #500]	; (80015dc <main+0x230>)
 80013e8:	487d      	ldr	r0, [pc, #500]	; (80015e0 <main+0x234>)
 80013ea:	f7ff fb16 	bl	8000a1a <ILI9341_DrawText>
  HAL_Delay(1000);
 80013ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013f2:	f000 fcab 	bl	8001d4c <HAL_Delay>

  //Writing numbers
  ILI9341_FillScreen(WHITE);
 80013f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80013fa:	f7ff fe67 	bl	80010cc <ILI9341_FillScreen>
  static char BufferText[30];
  for(uint8_t i = 0; i <= 5; i++)
 80013fe:	2300      	movs	r3, #0
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	e07b      	b.n	80014fc <main+0x150>
  {
    sprintf(BufferText, "COUNT : %d", i);
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	461a      	mov	r2, r3
 8001408:	4976      	ldr	r1, [pc, #472]	; (80015e4 <main+0x238>)
 800140a:	4877      	ldr	r0, [pc, #476]	; (80015e8 <main+0x23c>)
 800140c:	f002 fcd4 	bl	8003db8 <siprintf>
    ILI9341_DrawText(BufferText, FONT3, 10, 10, BLACK, WHITE);
 8001410:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	2300      	movs	r3, #0
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	230a      	movs	r3, #10
 800141c:	220a      	movs	r2, #10
 800141e:	4973      	ldr	r1, [pc, #460]	; (80015ec <main+0x240>)
 8001420:	4871      	ldr	r0, [pc, #452]	; (80015e8 <main+0x23c>)
 8001422:	f7ff fafa 	bl	8000a1a <ILI9341_DrawText>
    ILI9341_DrawText(BufferText, FONT3, 10, 30, BLUE, WHITE);
 8001426:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800142a:	9301      	str	r3, [sp, #4]
 800142c:	231f      	movs	r3, #31
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	231e      	movs	r3, #30
 8001432:	220a      	movs	r2, #10
 8001434:	496d      	ldr	r1, [pc, #436]	; (80015ec <main+0x240>)
 8001436:	486c      	ldr	r0, [pc, #432]	; (80015e8 <main+0x23c>)
 8001438:	f7ff faef 	bl	8000a1a <ILI9341_DrawText>
    ILI9341_DrawText(BufferText, FONT3, 10, 50, RED, WHITE);
 800143c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	2332      	movs	r3, #50	; 0x32
 800144a:	220a      	movs	r2, #10
 800144c:	4967      	ldr	r1, [pc, #412]	; (80015ec <main+0x240>)
 800144e:	4866      	ldr	r0, [pc, #408]	; (80015e8 <main+0x23c>)
 8001450:	f7ff fae3 	bl	8000a1a <ILI9341_DrawText>
    ILI9341_DrawText(BufferText, FONT3, 10, 70, GREEN, WHITE);
 8001454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2346      	movs	r3, #70	; 0x46
 8001462:	220a      	movs	r2, #10
 8001464:	4961      	ldr	r1, [pc, #388]	; (80015ec <main+0x240>)
 8001466:	4860      	ldr	r0, [pc, #384]	; (80015e8 <main+0x23c>)
 8001468:	f7ff fad7 	bl	8000a1a <ILI9341_DrawText>
    ILI9341_DrawText(BufferText, FONT3, 10, 90, YELLOW, WHITE);
 800146c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	235a      	movs	r3, #90	; 0x5a
 800147a:	220a      	movs	r2, #10
 800147c:	495b      	ldr	r1, [pc, #364]	; (80015ec <main+0x240>)
 800147e:	485a      	ldr	r0, [pc, #360]	; (80015e8 <main+0x23c>)
 8001480:	f7ff facb 	bl	8000a1a <ILI9341_DrawText>
    ILI9341_DrawText(BufferText, FONT3, 10, 110, PURPLE, WHITE);
 8001484:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	f647 030f 	movw	r3, #30735	; 0x780f
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	236e      	movs	r3, #110	; 0x6e
 8001492:	220a      	movs	r2, #10
 8001494:	4955      	ldr	r1, [pc, #340]	; (80015ec <main+0x240>)
 8001496:	4854      	ldr	r0, [pc, #336]	; (80015e8 <main+0x23c>)
 8001498:	f7ff fabf 	bl	8000a1a <ILI9341_DrawText>
    ILI9341_DrawText(BufferText, FONT3, 10, 130, ORANGE, WHITE);
 800149c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2382      	movs	r3, #130	; 0x82
 80014aa:	220a      	movs	r2, #10
 80014ac:	494f      	ldr	r1, [pc, #316]	; (80015ec <main+0x240>)
 80014ae:	484e      	ldr	r0, [pc, #312]	; (80015e8 <main+0x23c>)
 80014b0:	f7ff fab3 	bl	8000a1a <ILI9341_DrawText>
    ILI9341_DrawText(BufferText, FONT3, 10, 150, MAROON, WHITE);
 80014b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b8:	9301      	str	r3, [sp, #4]
 80014ba:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2396      	movs	r3, #150	; 0x96
 80014c2:	220a      	movs	r2, #10
 80014c4:	4949      	ldr	r1, [pc, #292]	; (80015ec <main+0x240>)
 80014c6:	4848      	ldr	r0, [pc, #288]	; (80015e8 <main+0x23c>)
 80014c8:	f7ff faa7 	bl	8000a1a <ILI9341_DrawText>
    ILI9341_DrawText(BufferText, FONT3, 10, 170, WHITE, BLACK);
 80014cc:	2300      	movs	r3, #0
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	23aa      	movs	r3, #170	; 0xaa
 80014d8:	220a      	movs	r2, #10
 80014da:	4944      	ldr	r1, [pc, #272]	; (80015ec <main+0x240>)
 80014dc:	4842      	ldr	r0, [pc, #264]	; (80015e8 <main+0x23c>)
 80014de:	f7ff fa9c 	bl	8000a1a <ILI9341_DrawText>
    ILI9341_DrawText(BufferText, FONT3, 10, 190, BLUE, BLACK);
 80014e2:	2300      	movs	r3, #0
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	231f      	movs	r3, #31
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	23be      	movs	r3, #190	; 0xbe
 80014ec:	220a      	movs	r2, #10
 80014ee:	493f      	ldr	r1, [pc, #252]	; (80015ec <main+0x240>)
 80014f0:	483d      	ldr	r0, [pc, #244]	; (80015e8 <main+0x23c>)
 80014f2:	f7ff fa92 	bl	8000a1a <ILI9341_DrawText>
  for(uint8_t i = 0; i <= 5; i++)
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	3301      	adds	r3, #1
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	2b05      	cmp	r3, #5
 8001500:	d980      	bls.n	8001404 <main+0x58>
  }

  // Horizontal Line (X, Y, Length, Color)
  ILI9341_FillScreen(WHITE);
 8001502:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001506:	f7ff fde1 	bl	80010cc <ILI9341_FillScreen>
  ILI9341_DrawHLine(50, 120, 200, NAVY);
 800150a:	230f      	movs	r3, #15
 800150c:	22c8      	movs	r2, #200	; 0xc8
 800150e:	2178      	movs	r1, #120	; 0x78
 8001510:	2032      	movs	r0, #50	; 0x32
 8001512:	f7ff fec3 	bl	800129c <ILI9341_DrawHLine>
  HAL_Delay(1000);
 8001516:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800151a:	f000 fc17 	bl	8001d4c <HAL_Delay>

  // Vertical Line (X, Y, Length, Color)
  ILI9341_FillScreen(WHITE);
 800151e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001522:	f7ff fdd3 	bl	80010cc <ILI9341_FillScreen>
  ILI9341_DrawVLine(160, 40, 150, DARKGREEN);
 8001526:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800152a:	2296      	movs	r2, #150	; 0x96
 800152c:	2128      	movs	r1, #40	; 0x28
 800152e:	20a0      	movs	r0, #160	; 0xa0
 8001530:	f7ff fef8 	bl	8001324 <ILI9341_DrawVLine>
  HAL_Delay(1000);
 8001534:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001538:	f000 fc08 	bl	8001d4c <HAL_Delay>

  // Hollow Circle (Centre X, Centre Y, Radius, Color)
  ILI9341_FillScreen(WHITE);
 800153c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001540:	f7ff fdc4 	bl	80010cc <ILI9341_FillScreen>
  ILI9341_DrawHollowCircle(160, 120, 80, PINK);
 8001544:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001548:	2250      	movs	r2, #80	; 0x50
 800154a:	2178      	movs	r1, #120	; 0x78
 800154c:	20a0      	movs	r0, #160	; 0xa0
 800154e:	f7ff f82d 	bl	80005ac <ILI9341_DrawHollowCircle>
  HAL_Delay(1000);
 8001552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001556:	f000 fbf9 	bl	8001d4c <HAL_Delay>

  // Filled Circle (Centre X, Centre Y, Radius, Color)
  ILI9341_FillScreen(WHITE);
 800155a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800155e:	f7ff fdb5 	bl	80010cc <ILI9341_FillScreen>
  ILI9341_DrawFilledCircle(160, 120, 50, CYAN);
 8001562:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001566:	2232      	movs	r2, #50	; 0x32
 8001568:	2178      	movs	r1, #120	; 0x78
 800156a:	20a0      	movs	r0, #160	; 0xa0
 800156c:	f7ff f8d4 	bl	8000718 <ILI9341_DrawFilledCircle>
  HAL_Delay(1000);
 8001570:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001574:	f000 fbea 	bl	8001d4c <HAL_Delay>

  // Filled Rectangle (Start X, Start Y, Length X, Length Y)
  ILI9341_FillScreen(WHITE);
 8001578:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800157c:	f7ff fda6 	bl	80010cc <ILI9341_FillScreen>
  ILI9341_DrawRectangle(50, 50, 220, 140, GREENYELLOW);
 8001580:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	238c      	movs	r3, #140	; 0x8c
 8001588:	22dc      	movs	r2, #220	; 0xdc
 800158a:	2132      	movs	r1, #50	; 0x32
 800158c:	2032      	movs	r0, #50	; 0x32
 800158e:	f7ff fe29 	bl	80011e4 <ILI9341_DrawRectangle>
  HAL_Delay(1000);
 8001592:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001596:	f000 fbd9 	bl	8001d4c <HAL_Delay>

  // Hollow Rectangle (Start X, Start Y, End X, End Y)
  ILI9341_FillScreen(WHITE);
 800159a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800159e:	f7ff fd95 	bl	80010cc <ILI9341_FillScreen>
  ILI9341_DrawHollowRectangleCoord(50, 50, 270, 190, DARKCYAN);
 80015a2:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	23be      	movs	r3, #190	; 0xbe
 80015aa:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80015ae:	2132      	movs	r1, #50	; 0x32
 80015b0:	2032      	movs	r0, #50	; 0x32
 80015b2:	f7ff f939 	bl	8000828 <ILI9341_DrawHollowRectangleCoord>
  HAL_Delay(1000);
 80015b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ba:	f000 fbc7 	bl	8001d4c <HAL_Delay>

  // Simple Pixel Only (X, Y, Color)
  ILI9341_FillScreen(WHITE);
 80015be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80015c2:	f7ff fd83 	bl	80010cc <ILI9341_FillScreen>
  ILI9341_DrawPixel(100, 100, BLACK);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2164      	movs	r1, #100	; 0x64
 80015ca:	2064      	movs	r0, #100	; 0x64
 80015cc:	f7ff fda4 	bl	8001118 <ILI9341_DrawPixel>
  HAL_Delay(1000);
 80015d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015d4:	f000 fbba 	bl	8001d4c <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <main+0x22c>
 80015da:	bf00      	nop
 80015dc:	08005094 	.word	0x08005094
 80015e0:	08004718 	.word	0x08004718
 80015e4:	08004724 	.word	0x08004724
 80015e8:	20000140 	.word	0x20000140
 80015ec:	08004730 	.word	0x08004730

080015f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b094      	sub	sp, #80	; 0x50
 80015f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f6:	f107 0320 	add.w	r3, r7, #32
 80015fa:	2230      	movs	r2, #48	; 0x30
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f002 fbfa 	bl	8003df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001614:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <SystemClock_Config+0xc4>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	4a26      	ldr	r2, [pc, #152]	; (80016b4 <SystemClock_Config+0xc4>)
 800161a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161e:	6413      	str	r3, [r2, #64]	; 0x40
 8001620:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <SystemClock_Config+0xc4>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800162c:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <SystemClock_Config+0xc8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001634:	4a20      	ldr	r2, [pc, #128]	; (80016b8 <SystemClock_Config+0xc8>)
 8001636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <SystemClock_Config+0xc8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001648:	2302      	movs	r3, #2
 800164a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800164c:	2301      	movs	r3, #1
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001650:	2310      	movs	r3, #16
 8001652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001654:	2302      	movs	r3, #2
 8001656:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001658:	2300      	movs	r3, #0
 800165a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800165c:	2308      	movs	r3, #8
 800165e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001660:	2348      	movs	r3, #72	; 0x48
 8001662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001664:	2302      	movs	r3, #2
 8001666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001668:	2302      	movs	r3, #2
 800166a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166c:	f107 0320 	add.w	r3, r7, #32
 8001670:	4618      	mov	r0, r3
 8001672:	f001 f9df 	bl	8002a34 <HAL_RCC_OscConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800167c:	f000 f9a6 	bl	80019cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001680:	230f      	movs	r3, #15
 8001682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001684:	2302      	movs	r3, #2
 8001686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800168c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	2102      	movs	r1, #2
 800169c:	4618      	mov	r0, r3
 800169e:	f001 fc6d 	bl	8002f7c <HAL_RCC_ClockConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80016a8:	f000 f990 	bl	80019cc <Error_Handler>
  }
}
 80016ac:	bf00      	nop
 80016ae:	3750      	adds	r7, #80	; 0x50
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40007000 	.word	0x40007000

080016bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <MX_SPI1_Init+0x74>)
 80016c2:	4a1c      	ldr	r2, [pc, #112]	; (8001734 <MX_SPI1_Init+0x78>)
 80016c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_SPI1_Init+0x74>)
 80016c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <MX_SPI1_Init+0x74>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_SPI1_Init+0x74>)
 80016d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_SPI1_Init+0x74>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <MX_SPI1_Init+0x74>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_SPI1_Init+0x74>)
 80016ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_SPI1_Init+0x74>)
 80016f2:	2208      	movs	r2, #8
 80016f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_SPI1_Init+0x74>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_SPI1_Init+0x74>)
 80016fe:	2200      	movs	r2, #0
 8001700:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <MX_SPI1_Init+0x74>)
 8001704:	2200      	movs	r2, #0
 8001706:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_SPI1_Init+0x74>)
 800170a:	2207      	movs	r2, #7
 800170c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <MX_SPI1_Init+0x74>)
 8001710:	2200      	movs	r2, #0
 8001712:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_SPI1_Init+0x74>)
 8001716:	2208      	movs	r2, #8
 8001718:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_SPI1_Init+0x74>)
 800171c:	f001 fe20 	bl	8003360 <HAL_SPI_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001726:	f000 f951 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	2000007c 	.word	0x2000007c
 8001734:	40013000 	.word	0x40013000

08001738 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_DMA_Init+0x38>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <MX_DMA_Init+0x38>)
 8001744:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_DMA_Init+0x38>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	203b      	movs	r0, #59	; 0x3b
 800175c:	f000 fbf5 	bl	8001f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001760:	203b      	movs	r0, #59	; 0x3b
 8001762:	f000 fc0e 	bl	8001f82 <HAL_NVIC_EnableIRQ>

}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08c      	sub	sp, #48	; 0x30
 8001778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178a:	4b8a      	ldr	r3, [pc, #552]	; (80019b4 <MX_GPIO_Init+0x240>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a89      	ldr	r2, [pc, #548]	; (80019b4 <MX_GPIO_Init+0x240>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b87      	ldr	r3, [pc, #540]	; (80019b4 <MX_GPIO_Init+0x240>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017a2:	4b84      	ldr	r3, [pc, #528]	; (80019b4 <MX_GPIO_Init+0x240>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a83      	ldr	r2, [pc, #524]	; (80019b4 <MX_GPIO_Init+0x240>)
 80017a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b81      	ldr	r3, [pc, #516]	; (80019b4 <MX_GPIO_Init+0x240>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	4b7e      	ldr	r3, [pc, #504]	; (80019b4 <MX_GPIO_Init+0x240>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a7d      	ldr	r2, [pc, #500]	; (80019b4 <MX_GPIO_Init+0x240>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b7b      	ldr	r3, [pc, #492]	; (80019b4 <MX_GPIO_Init+0x240>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	4b78      	ldr	r3, [pc, #480]	; (80019b4 <MX_GPIO_Init+0x240>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a77      	ldr	r2, [pc, #476]	; (80019b4 <MX_GPIO_Init+0x240>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b75      	ldr	r3, [pc, #468]	; (80019b4 <MX_GPIO_Init+0x240>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ea:	4b72      	ldr	r3, [pc, #456]	; (80019b4 <MX_GPIO_Init+0x240>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a71      	ldr	r2, [pc, #452]	; (80019b4 <MX_GPIO_Init+0x240>)
 80017f0:	f043 0308 	orr.w	r3, r3, #8
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b6f      	ldr	r3, [pc, #444]	; (80019b4 <MX_GPIO_Init+0x240>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001802:	4b6c      	ldr	r3, [pc, #432]	; (80019b4 <MX_GPIO_Init+0x240>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a6b      	ldr	r2, [pc, #428]	; (80019b4 <MX_GPIO_Init+0x240>)
 8001808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b69      	ldr	r3, [pc, #420]	; (80019b4 <MX_GPIO_Init+0x240>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001820:	4865      	ldr	r0, [pc, #404]	; (80019b8 <MX_GPIO_Init+0x244>)
 8001822:	f001 f8ed 	bl	8002a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001826:	2200      	movs	r2, #0
 8001828:	2140      	movs	r1, #64	; 0x40
 800182a:	4864      	ldr	r0, [pc, #400]	; (80019bc <MX_GPIO_Init+0x248>)
 800182c:	f001 f8e8 	bl	8002a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RST_Pin|D_C_Pin|CS_Pin, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	f44f 7150 	mov.w	r1, #832	; 0x340
 8001836:	4862      	ldr	r0, [pc, #392]	; (80019c0 <MX_GPIO_Init+0x24c>)
 8001838:	f001 f8e2 	bl	8002a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800183c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001842:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800184c:	f107 031c 	add.w	r3, r7, #28
 8001850:	4619      	mov	r1, r3
 8001852:	485b      	ldr	r0, [pc, #364]	; (80019c0 <MX_GPIO_Init+0x24c>)
 8001854:	f000 ff28 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001858:	2332      	movs	r3, #50	; 0x32
 800185a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001868:	230b      	movs	r3, #11
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186c:	f107 031c 	add.w	r3, r7, #28
 8001870:	4619      	mov	r1, r3
 8001872:	4853      	ldr	r0, [pc, #332]	; (80019c0 <MX_GPIO_Init+0x24c>)
 8001874:	f000 ff18 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001878:	2386      	movs	r3, #134	; 0x86
 800187a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001888:	230b      	movs	r3, #11
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	4619      	mov	r1, r3
 8001892:	484c      	ldr	r0, [pc, #304]	; (80019c4 <MX_GPIO_Init+0x250>)
 8001894:	f000 ff08 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001898:	f244 0381 	movw	r3, #16513	; 0x4081
 800189c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189e:	2301      	movs	r3, #1
 80018a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018aa:	f107 031c 	add.w	r3, r7, #28
 80018ae:	4619      	mov	r1, r3
 80018b0:	4841      	ldr	r0, [pc, #260]	; (80019b8 <MX_GPIO_Init+0x244>)
 80018b2:	f000 fef9 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80018b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c4:	2303      	movs	r3, #3
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018c8:	230b      	movs	r3, #11
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4619      	mov	r1, r3
 80018d2:	4839      	ldr	r0, [pc, #228]	; (80019b8 <MX_GPIO_Init+0x244>)
 80018d4:	f000 fee8 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e6:	2303      	movs	r3, #3
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018ea:	2307      	movs	r3, #7
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4619      	mov	r1, r3
 80018f4:	4834      	ldr	r0, [pc, #208]	; (80019c8 <MX_GPIO_Init+0x254>)
 80018f6:	f000 fed7 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80018fa:	2340      	movs	r3, #64	; 0x40
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	482a      	ldr	r0, [pc, #168]	; (80019bc <MX_GPIO_Init+0x248>)
 8001912:	f000 fec9 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001922:	f107 031c 	add.w	r3, r7, #28
 8001926:	4619      	mov	r1, r3
 8001928:	4824      	ldr	r0, [pc, #144]	; (80019bc <MX_GPIO_Init+0x248>)
 800192a:	f000 febd 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin D_C_Pin CS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|D_C_Pin|CS_Pin;
 800192e:	f44f 7350 	mov.w	r3, #832	; 0x340
 8001932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001934:	2301      	movs	r3, #1
 8001936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	4619      	mov	r1, r3
 8001946:	481e      	ldr	r0, [pc, #120]	; (80019c0 <MX_GPIO_Init+0x24c>)
 8001948:	f000 feae 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800194c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800195e:	230a      	movs	r3, #10
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 031c 	add.w	r3, r7, #28
 8001966:	4619      	mov	r1, r3
 8001968:	4816      	ldr	r0, [pc, #88]	; (80019c4 <MX_GPIO_Init+0x250>)
 800196a:	f000 fe9d 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800196e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800197c:	f107 031c 	add.w	r3, r7, #28
 8001980:	4619      	mov	r1, r3
 8001982:	4810      	ldr	r0, [pc, #64]	; (80019c4 <MX_GPIO_Init+0x250>)
 8001984:	f000 fe90 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001988:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800198c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001996:	2303      	movs	r3, #3
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800199a:	230b      	movs	r3, #11
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4619      	mov	r1, r3
 80019a4:	4805      	ldr	r0, [pc, #20]	; (80019bc <MX_GPIO_Init+0x248>)
 80019a6:	f000 fe7f 	bl	80026a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019aa:	bf00      	nop
 80019ac:	3730      	adds	r7, #48	; 0x30
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020400 	.word	0x40020400
 80019bc:	40021800 	.word	0x40021800
 80019c0:	40020800 	.word	0x40020800
 80019c4:	40020000 	.word	0x40020000
 80019c8:	40020c00 	.word	0x40020c00

080019cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d0:	b672      	cpsid	i
}
 80019d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <Error_Handler+0x8>
	...

080019d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <HAL_MspInit+0x44>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <HAL_MspInit+0x44>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_MspInit+0x44>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_MspInit+0x44>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <HAL_MspInit+0x44>)
 80019fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a00:	6453      	str	r3, [r2, #68]	; 0x44
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_MspInit+0x44>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800

08001a20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a3c      	ldr	r2, [pc, #240]	; (8001b30 <HAL_SPI_MspInit+0x110>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d171      	bne.n	8001b26 <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a42:	4b3c      	ldr	r3, [pc, #240]	; (8001b34 <HAL_SPI_MspInit+0x114>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	4a3b      	ldr	r2, [pc, #236]	; (8001b34 <HAL_SPI_MspInit+0x114>)
 8001a48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4e:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <HAL_SPI_MspInit+0x114>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	4b36      	ldr	r3, [pc, #216]	; (8001b34 <HAL_SPI_MspInit+0x114>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a35      	ldr	r2, [pc, #212]	; (8001b34 <HAL_SPI_MspInit+0x114>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b33      	ldr	r3, [pc, #204]	; (8001b34 <HAL_SPI_MspInit+0x114>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a72:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <HAL_SPI_MspInit+0x114>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a2f      	ldr	r2, [pc, #188]	; (8001b34 <HAL_SPI_MspInit+0x114>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <HAL_SPI_MspInit+0x114>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a8a:	2320      	movs	r3, #32
 8001a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a96:	2303      	movs	r3, #3
 8001a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a9a:	2305      	movs	r3, #5
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4824      	ldr	r0, [pc, #144]	; (8001b38 <HAL_SPI_MspInit+0x118>)
 8001aa6:	f000 fdff 	bl	80026a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001aaa:	2320      	movs	r3, #32
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aba:	2305      	movs	r3, #5
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	481d      	ldr	r0, [pc, #116]	; (8001b3c <HAL_SPI_MspInit+0x11c>)
 8001ac6:	f000 fdef 	bl	80026a8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <HAL_SPI_MspInit+0x120>)
 8001acc:	4a1d      	ldr	r2, [pc, #116]	; (8001b44 <HAL_SPI_MspInit+0x124>)
 8001ace:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <HAL_SPI_MspInit+0x120>)
 8001ad2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001ad6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <HAL_SPI_MspInit+0x120>)
 8001ada:	2240      	movs	r2, #64	; 0x40
 8001adc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <HAL_SPI_MspInit+0x120>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <HAL_SPI_MspInit+0x120>)
 8001ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aea:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <HAL_SPI_MspInit+0x120>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_SPI_MspInit+0x120>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <HAL_SPI_MspInit+0x120>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_SPI_MspInit+0x120>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_SPI_MspInit+0x120>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001b0a:	480d      	ldr	r0, [pc, #52]	; (8001b40 <HAL_SPI_MspInit+0x120>)
 8001b0c:	f000 fa54 	bl	8001fb8 <HAL_DMA_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 8001b16:	f7ff ff59 	bl	80019cc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a08      	ldr	r2, [pc, #32]	; (8001b40 <HAL_SPI_MspInit+0x120>)
 8001b1e:	655a      	str	r2, [r3, #84]	; 0x54
 8001b20:	4a07      	ldr	r2, [pc, #28]	; (8001b40 <HAL_SPI_MspInit+0x120>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b26:	bf00      	nop
 8001b28:	3728      	adds	r7, #40	; 0x28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40013000 	.word	0x40013000
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020000 	.word	0x40020000
 8001b3c:	40020400 	.word	0x40020400
 8001b40:	200000e0 	.word	0x200000e0
 8001b44:	40026458 	.word	0x40026458

08001b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b4c:	e7fe      	b.n	8001b4c <NMI_Handler+0x4>

08001b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <HardFault_Handler+0x4>

08001b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <MemManage_Handler+0x4>

08001b5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b5e:	e7fe      	b.n	8001b5e <BusFault_Handler+0x4>

08001b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <UsageFault_Handler+0x4>

08001b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b94:	f000 f8ba 	bl	8001d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <DMA2_Stream3_IRQHandler+0x10>)
 8001ba2:	f000 fb17 	bl	80021d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200000e0 	.word	0x200000e0

08001bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb8:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <_sbrk+0x5c>)
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <_sbrk+0x60>)
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc4:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <_sbrk+0x64>)
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <_sbrk+0x68>)
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <_sbrk+0x64>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d207      	bcs.n	8001bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be0:	f002 f912 	bl	8003e08 <__errno>
 8001be4:	4603      	mov	r3, r0
 8001be6:	220c      	movs	r2, #12
 8001be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
 8001bee:	e009      	b.n	8001c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <_sbrk+0x64>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <_sbrk+0x64>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <_sbrk+0x64>)
 8001c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c02:	68fb      	ldr	r3, [r7, #12]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20050000 	.word	0x20050000
 8001c10:	00000400 	.word	0x00000400
 8001c14:	20000160 	.word	0x20000160
 8001c18:	200002b0 	.word	0x200002b0

08001c1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <SystemInit+0x20>)
 8001c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c26:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <SystemInit+0x20>)
 8001c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c44:	480d      	ldr	r0, [pc, #52]	; (8001c7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c46:	490e      	ldr	r1, [pc, #56]	; (8001c80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c48:	4a0e      	ldr	r2, [pc, #56]	; (8001c84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c4c:	e002      	b.n	8001c54 <LoopCopyDataInit>

08001c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c52:	3304      	adds	r3, #4

08001c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c58:	d3f9      	bcc.n	8001c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5a:	4a0b      	ldr	r2, [pc, #44]	; (8001c88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c5c:	4c0b      	ldr	r4, [pc, #44]	; (8001c8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c60:	e001      	b.n	8001c66 <LoopFillZerobss>

08001c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c64:	3204      	adds	r2, #4

08001c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c68:	d3fb      	bcc.n	8001c62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c6a:	f7ff ffd7 	bl	8001c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c6e:	f002 f8d1 	bl	8003e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c72:	f7ff fb9b 	bl	80013ac <main>
  bx  lr    
 8001c76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c78:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c80:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001c84:	08006234 	.word	0x08006234
  ldr r2, =_sbss
 8001c88:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001c8c:	200002b0 	.word	0x200002b0

08001c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c90:	e7fe      	b.n	8001c90 <ADC_IRQHandler>

08001c92 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c96:	2003      	movs	r0, #3
 8001c98:	f000 f94c 	bl	8001f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f000 f805 	bl	8001cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca2:	f7ff fe99 	bl	80019d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_InitTick+0x54>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_InitTick+0x58>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 f967 	bl	8001f9e <HAL_SYSTICK_Config>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e00e      	b.n	8001cf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b0f      	cmp	r3, #15
 8001cde:	d80a      	bhi.n	8001cf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce8:	f000 f92f 	bl	8001f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cec:	4a06      	ldr	r2, [pc, #24]	; (8001d08 <HAL_InitTick+0x5c>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e000      	b.n	8001cf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000004 	.word	0x20000004
 8001d04:	2000000c 	.word	0x2000000c
 8001d08:	20000008 	.word	0x20000008

08001d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_IncTick+0x20>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_IncTick+0x24>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <HAL_IncTick+0x24>)
 8001d1e:	6013      	str	r3, [r2, #0]
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	2000000c 	.word	0x2000000c
 8001d30:	20000164 	.word	0x20000164

08001d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return uwTick;
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <HAL_GetTick+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000164 	.word	0x20000164

08001d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d54:	f7ff ffee 	bl	8001d34 <HAL_GetTick>
 8001d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d64:	d005      	beq.n	8001d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_Delay+0x44>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4413      	add	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d72:	bf00      	nop
 8001d74:	f7ff ffde 	bl	8001d34 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d8f7      	bhi.n	8001d74 <HAL_Delay+0x28>
  {
  }
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	2000000c 	.word	0x2000000c

08001d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <__NVIC_SetPriorityGrouping+0x40>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db0:	4013      	ands	r3, r2
 8001db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc2:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <__NVIC_SetPriorityGrouping+0x40>)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	60d3      	str	r3, [r2, #12]
}
 8001dc8:	bf00      	nop
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000ed00 	.word	0xe000ed00
 8001dd8:	05fa0000 	.word	0x05fa0000

08001ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <__NVIC_GetPriorityGrouping+0x18>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	f003 0307 	and.w	r3, r3, #7
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	db0b      	blt.n	8001e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	f003 021f 	and.w	r2, r3, #31
 8001e10:	4907      	ldr	r1, [pc, #28]	; (8001e30 <__NVIC_EnableIRQ+0x38>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	2001      	movs	r0, #1
 8001e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000e100 	.word	0xe000e100

08001e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	6039      	str	r1, [r7, #0]
 8001e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	db0a      	blt.n	8001e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	490c      	ldr	r1, [pc, #48]	; (8001e80 <__NVIC_SetPriority+0x4c>)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	0112      	lsls	r2, r2, #4
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	440b      	add	r3, r1
 8001e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e5c:	e00a      	b.n	8001e74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4908      	ldr	r1, [pc, #32]	; (8001e84 <__NVIC_SetPriority+0x50>)
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	3b04      	subs	r3, #4
 8001e6c:	0112      	lsls	r2, r2, #4
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	440b      	add	r3, r1
 8001e72:	761a      	strb	r2, [r3, #24]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000e100 	.word	0xe000e100
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	; 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	bf28      	it	cs
 8001ea6:	2304      	movcs	r3, #4
 8001ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3304      	adds	r3, #4
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d902      	bls.n	8001eb8 <NVIC_EncodePriority+0x30>
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3b03      	subs	r3, #3
 8001eb6:	e000      	b.n	8001eba <NVIC_EncodePriority+0x32>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	401a      	ands	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	43d9      	mvns	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	4313      	orrs	r3, r2
         );
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3724      	adds	r7, #36	; 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f00:	d301      	bcc.n	8001f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00f      	b.n	8001f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f06:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <SysTick_Config+0x40>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0e:	210f      	movs	r1, #15
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	f7ff ff8e 	bl	8001e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <SysTick_Config+0x40>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1e:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <SysTick_Config+0x40>)
 8001f20:	2207      	movs	r2, #7
 8001f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	e000e010 	.word	0xe000e010

08001f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ff29 	bl	8001d94 <__NVIC_SetPriorityGrouping>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f5c:	f7ff ff3e 	bl	8001ddc <__NVIC_GetPriorityGrouping>
 8001f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	6978      	ldr	r0, [r7, #20]
 8001f68:	f7ff ff8e 	bl	8001e88 <NVIC_EncodePriority>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff5d 	bl	8001e34 <__NVIC_SetPriority>
}
 8001f7a:	bf00      	nop
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff31 	bl	8001df8 <__NVIC_EnableIRQ>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff ffa2 	bl	8001ef0 <SysTick_Config>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fc4:	f7ff feb6 	bl	8001d34 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e099      	b.n	8002108 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ff4:	e00f      	b.n	8002016 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ff6:	f7ff fe9d 	bl	8001d34 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b05      	cmp	r3, #5
 8002002:	d908      	bls.n	8002016 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2220      	movs	r2, #32
 8002008:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2203      	movs	r2, #3
 800200e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e078      	b.n	8002108 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1e8      	bne.n	8001ff6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	4b38      	ldr	r3, [pc, #224]	; (8002110 <HAL_DMA_Init+0x158>)
 8002030:	4013      	ands	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002042:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800204e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800205a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4313      	orrs	r3, r2
 8002066:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	2b04      	cmp	r3, #4
 800206e:	d107      	bne.n	8002080 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	4313      	orrs	r3, r2
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4313      	orrs	r3, r2
 800207e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f023 0307 	bic.w	r3, r3, #7
 8002096:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	4313      	orrs	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d117      	bne.n	80020da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00e      	beq.n	80020da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 fa77 	bl	80025b0 <DMA_CheckFifoParam>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2240      	movs	r2, #64	; 0x40
 80020cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020d6:	2301      	movs	r3, #1
 80020d8:	e016      	b.n	8002108 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fa2e 	bl	8002544 <DMA_CalcBaseAndBitshift>
 80020e8:	4603      	mov	r3, r0
 80020ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f0:	223f      	movs	r2, #63	; 0x3f
 80020f2:	409a      	lsls	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	f010803f 	.word	0xf010803f

08002114 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_DMA_Start_IT+0x26>
 8002136:	2302      	movs	r3, #2
 8002138:	e048      	b.n	80021cc <HAL_DMA_Start_IT+0xb8>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b01      	cmp	r3, #1
 800214c:	d137      	bne.n	80021be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2202      	movs	r2, #2
 8002152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 f9c0 	bl	80024e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216c:	223f      	movs	r2, #63	; 0x3f
 800216e:	409a      	lsls	r2, r3
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0216 	orr.w	r2, r2, #22
 8002182:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002192:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	2b00      	cmp	r3, #0
 800219a:	d007      	beq.n	80021ac <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0208 	orr.w	r2, r2, #8
 80021aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0201 	orr.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	e005      	b.n	80021ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021c6:	2302      	movs	r3, #2
 80021c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80021e0:	4b8e      	ldr	r3, [pc, #568]	; (800241c <HAL_DMA_IRQHandler+0x248>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a8e      	ldr	r2, [pc, #568]	; (8002420 <HAL_DMA_IRQHandler+0x24c>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	0a9b      	lsrs	r3, r3, #10
 80021ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fe:	2208      	movs	r2, #8
 8002200:	409a      	lsls	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4013      	ands	r3, r2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d01a      	beq.n	8002240 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d013      	beq.n	8002240 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0204 	bic.w	r2, r2, #4
 8002226:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222c:	2208      	movs	r2, #8
 800222e:	409a      	lsls	r2, r3
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002238:	f043 0201 	orr.w	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002244:	2201      	movs	r2, #1
 8002246:	409a      	lsls	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4013      	ands	r3, r2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d012      	beq.n	8002276 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00b      	beq.n	8002276 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002262:	2201      	movs	r2, #1
 8002264:	409a      	lsls	r2, r3
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226e:	f043 0202 	orr.w	r2, r3, #2
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227a:	2204      	movs	r2, #4
 800227c:	409a      	lsls	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4013      	ands	r3, r2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d012      	beq.n	80022ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00b      	beq.n	80022ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002298:	2204      	movs	r2, #4
 800229a:	409a      	lsls	r2, r3
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a4:	f043 0204 	orr.w	r2, r3, #4
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b0:	2210      	movs	r2, #16
 80022b2:	409a      	lsls	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d043      	beq.n	8002344 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d03c      	beq.n	8002344 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ce:	2210      	movs	r2, #16
 80022d0:	409a      	lsls	r2, r3
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d018      	beq.n	8002316 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d108      	bne.n	8002304 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d024      	beq.n	8002344 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	4798      	blx	r3
 8002302:	e01f      	b.n	8002344 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01b      	beq.n	8002344 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4798      	blx	r3
 8002314:	e016      	b.n	8002344 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d107      	bne.n	8002334 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0208 	bic.w	r2, r2, #8
 8002332:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002348:	2220      	movs	r2, #32
 800234a:	409a      	lsls	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4013      	ands	r3, r2
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 808f 	beq.w	8002474 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 8087 	beq.w	8002474 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236a:	2220      	movs	r2, #32
 800236c:	409a      	lsls	r2, r3
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b05      	cmp	r3, #5
 800237c:	d136      	bne.n	80023ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0216 	bic.w	r2, r2, #22
 800238c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695a      	ldr	r2, [r3, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800239c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d103      	bne.n	80023ae <HAL_DMA_IRQHandler+0x1da>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d007      	beq.n	80023be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0208 	bic.w	r2, r2, #8
 80023bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c2:	223f      	movs	r2, #63	; 0x3f
 80023c4:	409a      	lsls	r2, r3
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d07e      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	4798      	blx	r3
        }
        return;
 80023ea:	e079      	b.n	80024e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d01d      	beq.n	8002436 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10d      	bne.n	8002424 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240c:	2b00      	cmp	r3, #0
 800240e:	d031      	beq.n	8002474 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
 8002418:	e02c      	b.n	8002474 <HAL_DMA_IRQHandler+0x2a0>
 800241a:	bf00      	nop
 800241c:	20000004 	.word	0x20000004
 8002420:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002428:	2b00      	cmp	r3, #0
 800242a:	d023      	beq.n	8002474 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4798      	blx	r3
 8002434:	e01e      	b.n	8002474 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10f      	bne.n	8002464 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0210 	bic.w	r2, r2, #16
 8002452:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002478:	2b00      	cmp	r3, #0
 800247a:	d032      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d022      	beq.n	80024ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2205      	movs	r2, #5
 800248c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0201 	bic.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	3301      	adds	r3, #1
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d307      	bcc.n	80024bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f2      	bne.n	80024a0 <HAL_DMA_IRQHandler+0x2cc>
 80024ba:	e000      	b.n	80024be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d005      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	4798      	blx	r3
 80024de:	e000      	b.n	80024e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80024e0:	bf00      	nop
    }
  }
}
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002504:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b40      	cmp	r3, #64	; 0x40
 8002514:	d108      	bne.n	8002528 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002526:	e007      	b.n	8002538 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	60da      	str	r2, [r3, #12]
}
 8002538:	bf00      	nop
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	3b10      	subs	r3, #16
 8002554:	4a13      	ldr	r2, [pc, #76]	; (80025a4 <DMA_CalcBaseAndBitshift+0x60>)
 8002556:	fba2 2303 	umull	r2, r3, r2, r3
 800255a:	091b      	lsrs	r3, r3, #4
 800255c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800255e:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4413      	add	r3, r2
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d908      	bls.n	8002584 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <DMA_CalcBaseAndBitshift+0x68>)
 800257a:	4013      	ands	r3, r2
 800257c:	1d1a      	adds	r2, r3, #4
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	659a      	str	r2, [r3, #88]	; 0x58
 8002582:	e006      	b.n	8002592 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <DMA_CalcBaseAndBitshift+0x68>)
 800258c:	4013      	ands	r3, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	aaaaaaab 	.word	0xaaaaaaab
 80025a8:	080061e8 	.word	0x080061e8
 80025ac:	fffffc00 	.word	0xfffffc00

080025b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d11f      	bne.n	800260a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d856      	bhi.n	800267e <DMA_CheckFifoParam+0xce>
 80025d0:	a201      	add	r2, pc, #4	; (adr r2, 80025d8 <DMA_CheckFifoParam+0x28>)
 80025d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d6:	bf00      	nop
 80025d8:	080025e9 	.word	0x080025e9
 80025dc:	080025fb 	.word	0x080025fb
 80025e0:	080025e9 	.word	0x080025e9
 80025e4:	0800267f 	.word	0x0800267f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d046      	beq.n	8002682 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f8:	e043      	b.n	8002682 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002602:	d140      	bne.n	8002686 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002608:	e03d      	b.n	8002686 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002612:	d121      	bne.n	8002658 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b03      	cmp	r3, #3
 8002618:	d837      	bhi.n	800268a <DMA_CheckFifoParam+0xda>
 800261a:	a201      	add	r2, pc, #4	; (adr r2, 8002620 <DMA_CheckFifoParam+0x70>)
 800261c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002620:	08002631 	.word	0x08002631
 8002624:	08002637 	.word	0x08002637
 8002628:	08002631 	.word	0x08002631
 800262c:	08002649 	.word	0x08002649
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
      break;
 8002634:	e030      	b.n	8002698 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d025      	beq.n	800268e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002646:	e022      	b.n	800268e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002650:	d11f      	bne.n	8002692 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002656:	e01c      	b.n	8002692 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d903      	bls.n	8002666 <DMA_CheckFifoParam+0xb6>
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d003      	beq.n	800266c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002664:	e018      	b.n	8002698 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
      break;
 800266a:	e015      	b.n	8002698 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00e      	beq.n	8002696 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
      break;
 800267c:	e00b      	b.n	8002696 <DMA_CheckFifoParam+0xe6>
      break;
 800267e:	bf00      	nop
 8002680:	e00a      	b.n	8002698 <DMA_CheckFifoParam+0xe8>
      break;
 8002682:	bf00      	nop
 8002684:	e008      	b.n	8002698 <DMA_CheckFifoParam+0xe8>
      break;
 8002686:	bf00      	nop
 8002688:	e006      	b.n	8002698 <DMA_CheckFifoParam+0xe8>
      break;
 800268a:	bf00      	nop
 800268c:	e004      	b.n	8002698 <DMA_CheckFifoParam+0xe8>
      break;
 800268e:	bf00      	nop
 8002690:	e002      	b.n	8002698 <DMA_CheckFifoParam+0xe8>
      break;   
 8002692:	bf00      	nop
 8002694:	e000      	b.n	8002698 <DMA_CheckFifoParam+0xe8>
      break;
 8002696:	bf00      	nop
    }
  } 
  
  return status; 
 8002698:	7bfb      	ldrb	r3, [r7, #15]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop

080026a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	e175      	b.n	80029b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80026c8:	2201      	movs	r2, #1
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	f040 8164 	bne.w	80029ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d005      	beq.n	80026fe <HAL_GPIO_Init+0x56>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d130      	bne.n	8002760 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	2203      	movs	r2, #3
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002734:	2201      	movs	r2, #1
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 0201 	and.w	r2, r3, #1
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	2b03      	cmp	r3, #3
 800276a:	d017      	beq.n	800279c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	2203      	movs	r2, #3
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d123      	bne.n	80027f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	08da      	lsrs	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3208      	adds	r2, #8
 80027b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	220f      	movs	r2, #15
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	08da      	lsrs	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3208      	adds	r2, #8
 80027ea:	69b9      	ldr	r1, [r7, #24]
 80027ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0203 	and.w	r2, r3, #3
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80be 	beq.w	80029ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	4b66      	ldr	r3, [pc, #408]	; (80029cc <HAL_GPIO_Init+0x324>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	4a65      	ldr	r2, [pc, #404]	; (80029cc <HAL_GPIO_Init+0x324>)
 8002838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800283c:	6453      	str	r3, [r2, #68]	; 0x44
 800283e:	4b63      	ldr	r3, [pc, #396]	; (80029cc <HAL_GPIO_Init+0x324>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800284a:	4a61      	ldr	r2, [pc, #388]	; (80029d0 <HAL_GPIO_Init+0x328>)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	3302      	adds	r3, #2
 8002852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	220f      	movs	r2, #15
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a58      	ldr	r2, [pc, #352]	; (80029d4 <HAL_GPIO_Init+0x32c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d037      	beq.n	80028e6 <HAL_GPIO_Init+0x23e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a57      	ldr	r2, [pc, #348]	; (80029d8 <HAL_GPIO_Init+0x330>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d031      	beq.n	80028e2 <HAL_GPIO_Init+0x23a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a56      	ldr	r2, [pc, #344]	; (80029dc <HAL_GPIO_Init+0x334>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d02b      	beq.n	80028de <HAL_GPIO_Init+0x236>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a55      	ldr	r2, [pc, #340]	; (80029e0 <HAL_GPIO_Init+0x338>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d025      	beq.n	80028da <HAL_GPIO_Init+0x232>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a54      	ldr	r2, [pc, #336]	; (80029e4 <HAL_GPIO_Init+0x33c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d01f      	beq.n	80028d6 <HAL_GPIO_Init+0x22e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a53      	ldr	r2, [pc, #332]	; (80029e8 <HAL_GPIO_Init+0x340>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d019      	beq.n	80028d2 <HAL_GPIO_Init+0x22a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a52      	ldr	r2, [pc, #328]	; (80029ec <HAL_GPIO_Init+0x344>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d013      	beq.n	80028ce <HAL_GPIO_Init+0x226>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a51      	ldr	r2, [pc, #324]	; (80029f0 <HAL_GPIO_Init+0x348>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00d      	beq.n	80028ca <HAL_GPIO_Init+0x222>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a50      	ldr	r2, [pc, #320]	; (80029f4 <HAL_GPIO_Init+0x34c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d007      	beq.n	80028c6 <HAL_GPIO_Init+0x21e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a4f      	ldr	r2, [pc, #316]	; (80029f8 <HAL_GPIO_Init+0x350>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d101      	bne.n	80028c2 <HAL_GPIO_Init+0x21a>
 80028be:	2309      	movs	r3, #9
 80028c0:	e012      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028c2:	230a      	movs	r3, #10
 80028c4:	e010      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028c6:	2308      	movs	r3, #8
 80028c8:	e00e      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028ca:	2307      	movs	r3, #7
 80028cc:	e00c      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028ce:	2306      	movs	r3, #6
 80028d0:	e00a      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028d2:	2305      	movs	r3, #5
 80028d4:	e008      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028d6:	2304      	movs	r3, #4
 80028d8:	e006      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028da:	2303      	movs	r3, #3
 80028dc:	e004      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028de:	2302      	movs	r3, #2
 80028e0:	e002      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028e6:	2300      	movs	r3, #0
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	f002 0203 	and.w	r2, r2, #3
 80028ee:	0092      	lsls	r2, r2, #2
 80028f0:	4093      	lsls	r3, r2
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028f8:	4935      	ldr	r1, [pc, #212]	; (80029d0 <HAL_GPIO_Init+0x328>)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	089b      	lsrs	r3, r3, #2
 80028fe:	3302      	adds	r3, #2
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002906:	4b3d      	ldr	r3, [pc, #244]	; (80029fc <HAL_GPIO_Init+0x354>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800292a:	4a34      	ldr	r2, [pc, #208]	; (80029fc <HAL_GPIO_Init+0x354>)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002930:	4b32      	ldr	r3, [pc, #200]	; (80029fc <HAL_GPIO_Init+0x354>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002954:	4a29      	ldr	r2, [pc, #164]	; (80029fc <HAL_GPIO_Init+0x354>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800295a:	4b28      	ldr	r3, [pc, #160]	; (80029fc <HAL_GPIO_Init+0x354>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800297e:	4a1f      	ldr	r2, [pc, #124]	; (80029fc <HAL_GPIO_Init+0x354>)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002984:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <HAL_GPIO_Init+0x354>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029a8:	4a14      	ldr	r2, [pc, #80]	; (80029fc <HAL_GPIO_Init+0x354>)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3301      	adds	r3, #1
 80029b2:	61fb      	str	r3, [r7, #28]
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	2b0f      	cmp	r3, #15
 80029b8:	f67f ae86 	bls.w	80026c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3724      	adds	r7, #36	; 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40013800 	.word	0x40013800
 80029d4:	40020000 	.word	0x40020000
 80029d8:	40020400 	.word	0x40020400
 80029dc:	40020800 	.word	0x40020800
 80029e0:	40020c00 	.word	0x40020c00
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40021400 	.word	0x40021400
 80029ec:	40021800 	.word	0x40021800
 80029f0:	40021c00 	.word	0x40021c00
 80029f4:	40022000 	.word	0x40022000
 80029f8:	40022400 	.word	0x40022400
 80029fc:	40013c00 	.word	0x40013c00

08002a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a10:	787b      	ldrb	r3, [r7, #1]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a16:	887a      	ldrh	r2, [r7, #2]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a1c:	e003      	b.n	8002a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a1e:	887b      	ldrh	r3, [r7, #2]
 8002a20:	041a      	lsls	r2, r3, #16
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	619a      	str	r2, [r3, #24]
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e291      	b.n	8002f6e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8087 	beq.w	8002b66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a58:	4b96      	ldr	r3, [pc, #600]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d00c      	beq.n	8002a7e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a64:	4b93      	ldr	r3, [pc, #588]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d112      	bne.n	8002a96 <HAL_RCC_OscConfig+0x62>
 8002a70:	4b90      	ldr	r3, [pc, #576]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a7c:	d10b      	bne.n	8002a96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7e:	4b8d      	ldr	r3, [pc, #564]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d06c      	beq.n	8002b64 <HAL_RCC_OscConfig+0x130>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d168      	bne.n	8002b64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e26b      	b.n	8002f6e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9e:	d106      	bne.n	8002aae <HAL_RCC_OscConfig+0x7a>
 8002aa0:	4b84      	ldr	r3, [pc, #528]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a83      	ldr	r2, [pc, #524]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	e02e      	b.n	8002b0c <HAL_RCC_OscConfig+0xd8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x9c>
 8002ab6:	4b7f      	ldr	r3, [pc, #508]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a7e      	ldr	r2, [pc, #504]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b7c      	ldr	r3, [pc, #496]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a7b      	ldr	r2, [pc, #492]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002ac8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e01d      	b.n	8002b0c <HAL_RCC_OscConfig+0xd8>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0xc0>
 8002ada:	4b76      	ldr	r3, [pc, #472]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a75      	ldr	r2, [pc, #468]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	4b73      	ldr	r3, [pc, #460]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a72      	ldr	r2, [pc, #456]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e00b      	b.n	8002b0c <HAL_RCC_OscConfig+0xd8>
 8002af4:	4b6f      	ldr	r3, [pc, #444]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a6e      	ldr	r2, [pc, #440]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	4b6c      	ldr	r3, [pc, #432]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a6b      	ldr	r2, [pc, #428]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d013      	beq.n	8002b3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7ff f90e 	bl	8001d34 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7ff f90a 	bl	8001d34 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	; 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e21f      	b.n	8002f6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2e:	4b61      	ldr	r3, [pc, #388]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0xe8>
 8002b3a:	e014      	b.n	8002b66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3c:	f7ff f8fa 	bl	8001d34 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b44:	f7ff f8f6 	bl	8001d34 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b64      	cmp	r3, #100	; 0x64
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e20b      	b.n	8002f6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b56:	4b57      	ldr	r3, [pc, #348]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x110>
 8002b62:	e000      	b.n	8002b66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d069      	beq.n	8002c46 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b72:	4b50      	ldr	r3, [pc, #320]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00b      	beq.n	8002b96 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7e:	4b4d      	ldr	r3, [pc, #308]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d11c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x190>
 8002b8a:	4b4a      	ldr	r3, [pc, #296]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d116      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b96:	4b47      	ldr	r3, [pc, #284]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <HAL_RCC_OscConfig+0x17a>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d001      	beq.n	8002bae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e1df      	b.n	8002f6e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bae:	4b41      	ldr	r3, [pc, #260]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	493d      	ldr	r1, [pc, #244]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc2:	e040      	b.n	8002c46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d023      	beq.n	8002c14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bcc:	4b39      	ldr	r3, [pc, #228]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a38      	ldr	r2, [pc, #224]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd8:	f7ff f8ac 	bl	8001d34 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be0:	f7ff f8a8 	bl	8001d34 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e1bd      	b.n	8002f6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf2:	4b30      	ldr	r3, [pc, #192]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfe:	4b2d      	ldr	r3, [pc, #180]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4929      	ldr	r1, [pc, #164]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	600b      	str	r3, [r1, #0]
 8002c12:	e018      	b.n	8002c46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c14:	4b27      	ldr	r3, [pc, #156]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a26      	ldr	r2, [pc, #152]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7ff f888 	bl	8001d34 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c28:	f7ff f884 	bl	8001d34 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e199      	b.n	8002f6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3a:	4b1e      	ldr	r3, [pc, #120]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d038      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d019      	beq.n	8002c8e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5a:	4b16      	ldr	r3, [pc, #88]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5e:	4a15      	ldr	r2, [pc, #84]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c66:	f7ff f865 	bl	8001d34 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c6e:	f7ff f861 	bl	8001d34 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e176      	b.n	8002f6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCC_OscConfig+0x23a>
 8002c8c:	e01a      	b.n	8002cc4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c92:	4a08      	ldr	r2, [pc, #32]	; (8002cb4 <HAL_RCC_OscConfig+0x280>)
 8002c94:	f023 0301 	bic.w	r3, r3, #1
 8002c98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9a:	f7ff f84b 	bl	8001d34 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca0:	e00a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca2:	f7ff f847 	bl	8001d34 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d903      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e15c      	b.n	8002f6e <HAL_RCC_OscConfig+0x53a>
 8002cb4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb8:	4b91      	ldr	r3, [pc, #580]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1ee      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80a4 	beq.w	8002e1a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd2:	4b8b      	ldr	r3, [pc, #556]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10d      	bne.n	8002cfa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cde:	4b88      	ldr	r3, [pc, #544]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	4a87      	ldr	r2, [pc, #540]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cea:	4b85      	ldr	r3, [pc, #532]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cfa:	4b82      	ldr	r3, [pc, #520]	; (8002f04 <HAL_RCC_OscConfig+0x4d0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d118      	bne.n	8002d38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d06:	4b7f      	ldr	r3, [pc, #508]	; (8002f04 <HAL_RCC_OscConfig+0x4d0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a7e      	ldr	r2, [pc, #504]	; (8002f04 <HAL_RCC_OscConfig+0x4d0>)
 8002d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d12:	f7ff f80f 	bl	8001d34 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1a:	f7ff f80b 	bl	8001d34 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b64      	cmp	r3, #100	; 0x64
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e120      	b.n	8002f6e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d2c:	4b75      	ldr	r3, [pc, #468]	; (8002f04 <HAL_RCC_OscConfig+0x4d0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d106      	bne.n	8002d4e <HAL_RCC_OscConfig+0x31a>
 8002d40:	4b6f      	ldr	r3, [pc, #444]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d44:	4a6e      	ldr	r2, [pc, #440]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4c:	e02d      	b.n	8002daa <HAL_RCC_OscConfig+0x376>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10c      	bne.n	8002d70 <HAL_RCC_OscConfig+0x33c>
 8002d56:	4b6a      	ldr	r3, [pc, #424]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5a:	4a69      	ldr	r2, [pc, #420]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002d5c:	f023 0301 	bic.w	r3, r3, #1
 8002d60:	6713      	str	r3, [r2, #112]	; 0x70
 8002d62:	4b67      	ldr	r3, [pc, #412]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d66:	4a66      	ldr	r2, [pc, #408]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002d68:	f023 0304 	bic.w	r3, r3, #4
 8002d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6e:	e01c      	b.n	8002daa <HAL_RCC_OscConfig+0x376>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b05      	cmp	r3, #5
 8002d76:	d10c      	bne.n	8002d92 <HAL_RCC_OscConfig+0x35e>
 8002d78:	4b61      	ldr	r3, [pc, #388]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7c:	4a60      	ldr	r2, [pc, #384]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002d7e:	f043 0304 	orr.w	r3, r3, #4
 8002d82:	6713      	str	r3, [r2, #112]	; 0x70
 8002d84:	4b5e      	ldr	r3, [pc, #376]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d88:	4a5d      	ldr	r2, [pc, #372]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d90:	e00b      	b.n	8002daa <HAL_RCC_OscConfig+0x376>
 8002d92:	4b5b      	ldr	r3, [pc, #364]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d96:	4a5a      	ldr	r2, [pc, #360]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002d98:	f023 0301 	bic.w	r3, r3, #1
 8002d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9e:	4b58      	ldr	r3, [pc, #352]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da2:	4a57      	ldr	r2, [pc, #348]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002da4:	f023 0304 	bic.w	r3, r3, #4
 8002da8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d015      	beq.n	8002dde <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db2:	f7fe ffbf 	bl	8001d34 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dba:	f7fe ffbb 	bl	8001d34 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e0ce      	b.n	8002f6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd0:	4b4b      	ldr	r3, [pc, #300]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0ee      	beq.n	8002dba <HAL_RCC_OscConfig+0x386>
 8002ddc:	e014      	b.n	8002e08 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dde:	f7fe ffa9 	bl	8001d34 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de4:	e00a      	b.n	8002dfc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de6:	f7fe ffa5 	bl	8001d34 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e0b8      	b.n	8002f6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dfc:	4b40      	ldr	r3, [pc, #256]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1ee      	bne.n	8002de6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d105      	bne.n	8002e1a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0e:	4b3c      	ldr	r3, [pc, #240]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	4a3b      	ldr	r2, [pc, #236]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80a4 	beq.w	8002f6c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e24:	4b36      	ldr	r3, [pc, #216]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 030c 	and.w	r3, r3, #12
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d06b      	beq.n	8002f08 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d149      	bne.n	8002ecc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e38:	4b31      	ldr	r3, [pc, #196]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a30      	ldr	r2, [pc, #192]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe ff76 	bl	8001d34 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fe ff72 	bl	8001d34 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e087      	b.n	8002f6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5e:	4b28      	ldr	r3, [pc, #160]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69da      	ldr	r2, [r3, #28]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	019b      	lsls	r3, r3, #6
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e80:	085b      	lsrs	r3, r3, #1
 8002e82:	3b01      	subs	r3, #1
 8002e84:	041b      	lsls	r3, r3, #16
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	061b      	lsls	r3, r3, #24
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	4a1b      	ldr	r2, [pc, #108]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002e92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e96:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e98:	4b19      	ldr	r3, [pc, #100]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a18      	ldr	r2, [pc, #96]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea4:	f7fe ff46 	bl	8001d34 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eac:	f7fe ff42 	bl	8001d34 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e057      	b.n	8002f6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ebe:	4b10      	ldr	r3, [pc, #64]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x478>
 8002eca:	e04f      	b.n	8002f6c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0b      	ldr	r2, [pc, #44]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed8:	f7fe ff2c 	bl	8001d34 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee0:	f7fe ff28 	bl	8001d34 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e03d      	b.n	8002f6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef2:	4b03      	ldr	r3, [pc, #12]	; (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4ac>
 8002efe:	e035      	b.n	8002f6c <HAL_RCC_OscConfig+0x538>
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f08:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <HAL_RCC_OscConfig+0x544>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d028      	beq.n	8002f68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d121      	bne.n	8002f68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d11a      	bne.n	8002f68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f38:	4013      	ands	r3, r2
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f3e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d111      	bne.n	8002f68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4e:	085b      	lsrs	r3, r3, #1
 8002f50:	3b01      	subs	r3, #1
 8002f52:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d107      	bne.n	8002f68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40023800 	.word	0x40023800

08002f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0d0      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f94:	4b6a      	ldr	r3, [pc, #424]	; (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d910      	bls.n	8002fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa2:	4b67      	ldr	r3, [pc, #412]	; (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 020f 	bic.w	r2, r3, #15
 8002faa:	4965      	ldr	r1, [pc, #404]	; (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb2:	4b63      	ldr	r3, [pc, #396]	; (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0b8      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d020      	beq.n	8003012 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fdc:	4b59      	ldr	r3, [pc, #356]	; (8003144 <HAL_RCC_ClockConfig+0x1c8>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	4a58      	ldr	r2, [pc, #352]	; (8003144 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fe6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ff4:	4b53      	ldr	r3, [pc, #332]	; (8003144 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4a52      	ldr	r2, [pc, #328]	; (8003144 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ffe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003000:	4b50      	ldr	r3, [pc, #320]	; (8003144 <HAL_RCC_ClockConfig+0x1c8>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	494d      	ldr	r1, [pc, #308]	; (8003144 <HAL_RCC_ClockConfig+0x1c8>)
 800300e:	4313      	orrs	r3, r2
 8003010:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d040      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d107      	bne.n	8003036 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003026:	4b47      	ldr	r3, [pc, #284]	; (8003144 <HAL_RCC_ClockConfig+0x1c8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d115      	bne.n	800305e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e07f      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d107      	bne.n	800304e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303e:	4b41      	ldr	r3, [pc, #260]	; (8003144 <HAL_RCC_ClockConfig+0x1c8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d109      	bne.n	800305e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e073      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304e:	4b3d      	ldr	r3, [pc, #244]	; (8003144 <HAL_RCC_ClockConfig+0x1c8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e06b      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800305e:	4b39      	ldr	r3, [pc, #228]	; (8003144 <HAL_RCC_ClockConfig+0x1c8>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f023 0203 	bic.w	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	4936      	ldr	r1, [pc, #216]	; (8003144 <HAL_RCC_ClockConfig+0x1c8>)
 800306c:	4313      	orrs	r3, r2
 800306e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003070:	f7fe fe60 	bl	8001d34 <HAL_GetTick>
 8003074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003076:	e00a      	b.n	800308e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003078:	f7fe fe5c 	bl	8001d34 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	f241 3288 	movw	r2, #5000	; 0x1388
 8003086:	4293      	cmp	r3, r2
 8003088:	d901      	bls.n	800308e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e053      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308e:	4b2d      	ldr	r3, [pc, #180]	; (8003144 <HAL_RCC_ClockConfig+0x1c8>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 020c 	and.w	r2, r3, #12
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	429a      	cmp	r2, r3
 800309e:	d1eb      	bne.n	8003078 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030a0:	4b27      	ldr	r3, [pc, #156]	; (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d210      	bcs.n	80030d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b24      	ldr	r3, [pc, #144]	; (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 020f 	bic.w	r2, r3, #15
 80030b6:	4922      	ldr	r1, [pc, #136]	; (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	4b20      	ldr	r3, [pc, #128]	; (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e032      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030dc:	4b19      	ldr	r3, [pc, #100]	; (8003144 <HAL_RCC_ClockConfig+0x1c8>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4916      	ldr	r1, [pc, #88]	; (8003144 <HAL_RCC_ClockConfig+0x1c8>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d009      	beq.n	800310e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030fa:	4b12      	ldr	r3, [pc, #72]	; (8003144 <HAL_RCC_ClockConfig+0x1c8>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	490e      	ldr	r1, [pc, #56]	; (8003144 <HAL_RCC_ClockConfig+0x1c8>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800310e:	f000 f821 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 8003112:	4602      	mov	r2, r0
 8003114:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_RCC_ClockConfig+0x1c8>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	091b      	lsrs	r3, r3, #4
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	490a      	ldr	r1, [pc, #40]	; (8003148 <HAL_RCC_ClockConfig+0x1cc>)
 8003120:	5ccb      	ldrb	r3, [r1, r3]
 8003122:	fa22 f303 	lsr.w	r3, r2, r3
 8003126:	4a09      	ldr	r2, [pc, #36]	; (800314c <HAL_RCC_ClockConfig+0x1d0>)
 8003128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800312a:	4b09      	ldr	r3, [pc, #36]	; (8003150 <HAL_RCC_ClockConfig+0x1d4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe fdbc 	bl	8001cac <HAL_InitTick>

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40023c00 	.word	0x40023c00
 8003144:	40023800 	.word	0x40023800
 8003148:	080061d8 	.word	0x080061d8
 800314c:	20000004 	.word	0x20000004
 8003150:	20000008 	.word	0x20000008

08003154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003158:	b094      	sub	sp, #80	; 0x50
 800315a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	647b      	str	r3, [r7, #68]	; 0x44
 8003160:	2300      	movs	r3, #0
 8003162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003164:	2300      	movs	r3, #0
 8003166:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800316c:	4b79      	ldr	r3, [pc, #484]	; (8003354 <HAL_RCC_GetSysClockFreq+0x200>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 030c 	and.w	r3, r3, #12
 8003174:	2b08      	cmp	r3, #8
 8003176:	d00d      	beq.n	8003194 <HAL_RCC_GetSysClockFreq+0x40>
 8003178:	2b08      	cmp	r3, #8
 800317a:	f200 80e1 	bhi.w	8003340 <HAL_RCC_GetSysClockFreq+0x1ec>
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <HAL_RCC_GetSysClockFreq+0x34>
 8003182:	2b04      	cmp	r3, #4
 8003184:	d003      	beq.n	800318e <HAL_RCC_GetSysClockFreq+0x3a>
 8003186:	e0db      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003188:	4b73      	ldr	r3, [pc, #460]	; (8003358 <HAL_RCC_GetSysClockFreq+0x204>)
 800318a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800318c:	e0db      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800318e:	4b73      	ldr	r3, [pc, #460]	; (800335c <HAL_RCC_GetSysClockFreq+0x208>)
 8003190:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003192:	e0d8      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003194:	4b6f      	ldr	r3, [pc, #444]	; (8003354 <HAL_RCC_GetSysClockFreq+0x200>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800319c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800319e:	4b6d      	ldr	r3, [pc, #436]	; (8003354 <HAL_RCC_GetSysClockFreq+0x200>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d063      	beq.n	8003272 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031aa:	4b6a      	ldr	r3, [pc, #424]	; (8003354 <HAL_RCC_GetSysClockFreq+0x200>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	099b      	lsrs	r3, r3, #6
 80031b0:	2200      	movs	r2, #0
 80031b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80031b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031bc:	633b      	str	r3, [r7, #48]	; 0x30
 80031be:	2300      	movs	r3, #0
 80031c0:	637b      	str	r3, [r7, #52]	; 0x34
 80031c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031c6:	4622      	mov	r2, r4
 80031c8:	462b      	mov	r3, r5
 80031ca:	f04f 0000 	mov.w	r0, #0
 80031ce:	f04f 0100 	mov.w	r1, #0
 80031d2:	0159      	lsls	r1, r3, #5
 80031d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d8:	0150      	lsls	r0, r2, #5
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4621      	mov	r1, r4
 80031e0:	1a51      	subs	r1, r2, r1
 80031e2:	6139      	str	r1, [r7, #16]
 80031e4:	4629      	mov	r1, r5
 80031e6:	eb63 0301 	sbc.w	r3, r3, r1
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031f8:	4659      	mov	r1, fp
 80031fa:	018b      	lsls	r3, r1, #6
 80031fc:	4651      	mov	r1, sl
 80031fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003202:	4651      	mov	r1, sl
 8003204:	018a      	lsls	r2, r1, #6
 8003206:	4651      	mov	r1, sl
 8003208:	ebb2 0801 	subs.w	r8, r2, r1
 800320c:	4659      	mov	r1, fp
 800320e:	eb63 0901 	sbc.w	r9, r3, r1
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800321e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003222:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003226:	4690      	mov	r8, r2
 8003228:	4699      	mov	r9, r3
 800322a:	4623      	mov	r3, r4
 800322c:	eb18 0303 	adds.w	r3, r8, r3
 8003230:	60bb      	str	r3, [r7, #8]
 8003232:	462b      	mov	r3, r5
 8003234:	eb49 0303 	adc.w	r3, r9, r3
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003246:	4629      	mov	r1, r5
 8003248:	024b      	lsls	r3, r1, #9
 800324a:	4621      	mov	r1, r4
 800324c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003250:	4621      	mov	r1, r4
 8003252:	024a      	lsls	r2, r1, #9
 8003254:	4610      	mov	r0, r2
 8003256:	4619      	mov	r1, r3
 8003258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800325a:	2200      	movs	r2, #0
 800325c:	62bb      	str	r3, [r7, #40]	; 0x28
 800325e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003260:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003264:	f7fd f824 	bl	80002b0 <__aeabi_uldivmod>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4613      	mov	r3, r2
 800326e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003270:	e058      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003272:	4b38      	ldr	r3, [pc, #224]	; (8003354 <HAL_RCC_GetSysClockFreq+0x200>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	099b      	lsrs	r3, r3, #6
 8003278:	2200      	movs	r2, #0
 800327a:	4618      	mov	r0, r3
 800327c:	4611      	mov	r1, r2
 800327e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003282:	623b      	str	r3, [r7, #32]
 8003284:	2300      	movs	r3, #0
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
 8003288:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800328c:	4642      	mov	r2, r8
 800328e:	464b      	mov	r3, r9
 8003290:	f04f 0000 	mov.w	r0, #0
 8003294:	f04f 0100 	mov.w	r1, #0
 8003298:	0159      	lsls	r1, r3, #5
 800329a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800329e:	0150      	lsls	r0, r2, #5
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4641      	mov	r1, r8
 80032a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80032aa:	4649      	mov	r1, r9
 80032ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032c4:	ebb2 040a 	subs.w	r4, r2, sl
 80032c8:	eb63 050b 	sbc.w	r5, r3, fp
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	00eb      	lsls	r3, r5, #3
 80032d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032da:	00e2      	lsls	r2, r4, #3
 80032dc:	4614      	mov	r4, r2
 80032de:	461d      	mov	r5, r3
 80032e0:	4643      	mov	r3, r8
 80032e2:	18e3      	adds	r3, r4, r3
 80032e4:	603b      	str	r3, [r7, #0]
 80032e6:	464b      	mov	r3, r9
 80032e8:	eb45 0303 	adc.w	r3, r5, r3
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032fa:	4629      	mov	r1, r5
 80032fc:	028b      	lsls	r3, r1, #10
 80032fe:	4621      	mov	r1, r4
 8003300:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003304:	4621      	mov	r1, r4
 8003306:	028a      	lsls	r2, r1, #10
 8003308:	4610      	mov	r0, r2
 800330a:	4619      	mov	r1, r3
 800330c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800330e:	2200      	movs	r2, #0
 8003310:	61bb      	str	r3, [r7, #24]
 8003312:	61fa      	str	r2, [r7, #28]
 8003314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003318:	f7fc ffca 	bl	80002b0 <__aeabi_uldivmod>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4613      	mov	r3, r2
 8003322:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCC_GetSysClockFreq+0x200>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	0c1b      	lsrs	r3, r3, #16
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	3301      	adds	r3, #1
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003334:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003338:	fbb2 f3f3 	udiv	r3, r2, r3
 800333c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800333e:	e002      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <HAL_RCC_GetSysClockFreq+0x204>)
 8003342:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003348:	4618      	mov	r0, r3
 800334a:	3750      	adds	r7, #80	; 0x50
 800334c:	46bd      	mov	sp, r7
 800334e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800
 8003358:	00f42400 	.word	0x00f42400
 800335c:	007a1200 	.word	0x007a1200

08003360 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e09d      	b.n	80034ae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	2b00      	cmp	r3, #0
 8003378:	d108      	bne.n	800338c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003382:	d009      	beq.n	8003398 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	61da      	str	r2, [r3, #28]
 800338a:	e005      	b.n	8003398 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7fe fb34 	bl	8001a20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033d8:	d902      	bls.n	80033e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	e002      	b.n	80033e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80033e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80033ee:	d007      	beq.n	8003400 <HAL_SPI_Init+0xa0>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033f8:	d002      	beq.n	8003400 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003410:	431a      	orrs	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003442:	ea42 0103 	orr.w	r1, r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	0c1b      	lsrs	r3, r3, #16
 800345c:	f003 0204 	and.w	r2, r3, #4
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	431a      	orrs	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800347c:	ea42 0103 	orr.w	r1, r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69da      	ldr	r2, [r3, #28]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800349c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b088      	sub	sp, #32
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	603b      	str	r3, [r7, #0]
 80034c2:	4613      	mov	r3, r2
 80034c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_SPI_Transmit+0x22>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e158      	b.n	800378a <HAL_SPI_Transmit+0x2d4>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034e0:	f7fe fc28 	bl	8001d34 <HAL_GetTick>
 80034e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d002      	beq.n	80034fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034f6:	2302      	movs	r3, #2
 80034f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034fa:	e13d      	b.n	8003778 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <HAL_SPI_Transmit+0x52>
 8003502:	88fb      	ldrh	r3, [r7, #6]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d102      	bne.n	800350e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800350c:	e134      	b.n	8003778 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2203      	movs	r2, #3
 8003512:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	88fa      	ldrh	r2, [r7, #6]
 8003526:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	88fa      	ldrh	r2, [r7, #6]
 800352c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003558:	d10f      	bne.n	800357a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003568:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003578:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003584:	2b40      	cmp	r3, #64	; 0x40
 8003586:	d007      	beq.n	8003598 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003596:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035a0:	d94b      	bls.n	800363a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <HAL_SPI_Transmit+0xfa>
 80035aa:	8afb      	ldrh	r3, [r7, #22]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d13e      	bne.n	800362e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	881a      	ldrh	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c0:	1c9a      	adds	r2, r3, #2
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035d4:	e02b      	b.n	800362e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d112      	bne.n	800360a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e8:	881a      	ldrh	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	1c9a      	adds	r2, r3, #2
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003608:	e011      	b.n	800362e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800360a:	f7fe fb93 	bl	8001d34 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d803      	bhi.n	8003622 <HAL_SPI_Transmit+0x16c>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003620:	d102      	bne.n	8003628 <HAL_SPI_Transmit+0x172>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d102      	bne.n	800362e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800362c:	e0a4      	b.n	8003778 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1ce      	bne.n	80035d6 <HAL_SPI_Transmit+0x120>
 8003638:	e07c      	b.n	8003734 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <HAL_SPI_Transmit+0x192>
 8003642:	8afb      	ldrh	r3, [r7, #22]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d170      	bne.n	800372a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b01      	cmp	r3, #1
 8003650:	d912      	bls.n	8003678 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003656:	881a      	ldrh	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003662:	1c9a      	adds	r2, r3, #2
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800366c:	b29b      	uxth	r3, r3
 800366e:	3b02      	subs	r3, #2
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003676:	e058      	b.n	800372a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	330c      	adds	r3, #12
 8003682:	7812      	ldrb	r2, [r2, #0]
 8003684:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003694:	b29b      	uxth	r3, r3
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800369e:	e044      	b.n	800372a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d12b      	bne.n	8003706 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d912      	bls.n	80036de <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	881a      	ldrh	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c8:	1c9a      	adds	r2, r3, #2
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b02      	subs	r3, #2
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036dc:	e025      	b.n	800372a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	330c      	adds	r3, #12
 80036e8:	7812      	ldrb	r2, [r2, #0]
 80036ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003704:	e011      	b.n	800372a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003706:	f7fe fb15 	bl	8001d34 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d803      	bhi.n	800371e <HAL_SPI_Transmit+0x268>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371c:	d102      	bne.n	8003724 <HAL_SPI_Transmit+0x26e>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d102      	bne.n	800372a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003728:	e026      	b.n	8003778 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1b5      	bne.n	80036a0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	6839      	ldr	r1, [r7, #0]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 fad3 	bl	8003ce4 <SPI_EndRxTxTransaction>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2220      	movs	r2, #32
 8003748:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10a      	bne.n	8003768 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	77fb      	strb	r3, [r7, #31]
 8003774:	e000      	b.n	8003778 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003776:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003788:	7ffb      	ldrb	r3, [r7, #31]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3720      	adds	r7, #32
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	4613      	mov	r3, r2
 80037a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_SPI_Transmit_DMA+0x20>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e0d8      	b.n	8003966 <HAL_SPI_Transmit_DMA+0x1d2>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d002      	beq.n	80037ce <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80037c8:	2302      	movs	r3, #2
 80037ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037cc:	e0c6      	b.n	800395c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <HAL_SPI_Transmit_DMA+0x46>
 80037d4:	88fb      	ldrh	r3, [r7, #6]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d102      	bne.n	80037e0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037de:	e0bd      	b.n	800395c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2203      	movs	r2, #3
 80037e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	88fa      	ldrh	r2, [r7, #6]
 80037f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	88fa      	ldrh	r2, [r7, #6]
 80037fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800382a:	d10f      	bne.n	800384c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800383a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800384a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003850:	4a47      	ldr	r2, [pc, #284]	; (8003970 <HAL_SPI_Transmit_DMA+0x1dc>)
 8003852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003858:	4a46      	ldr	r2, [pc, #280]	; (8003974 <HAL_SPI_Transmit_DMA+0x1e0>)
 800385a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003860:	4a45      	ldr	r2, [pc, #276]	; (8003978 <HAL_SPI_Transmit_DMA+0x1e4>)
 8003862:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003868:	2200      	movs	r2, #0
 800386a:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800387a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003884:	d82d      	bhi.n	80038e2 <HAL_SPI_Transmit_DMA+0x14e>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003890:	d127      	bne.n	80038e2 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003896:	b29b      	uxth	r3, r3
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10f      	bne.n	80038c0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038ae:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	085b      	lsrs	r3, r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038be:	e010      	b.n	80038e2 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ce:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	085b      	lsrs	r3, r3, #1
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3301      	adds	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	4619      	mov	r1, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	330c      	adds	r3, #12
 80038f2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80038fa:	f7fe fc0b 	bl	8002114 <HAL_DMA_Start_IT>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00c      	beq.n	800391e <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003908:	f043 0210 	orr.w	r2, r3, #16
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800391c:	e01e      	b.n	800395c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003928:	2b40      	cmp	r3, #64	; 0x40
 800392a:	d007      	beq.n	800393c <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800393a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0220 	orr.w	r2, r2, #32
 800394a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0202 	orr.w	r2, r2, #2
 800395a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003964:	7dfb      	ldrb	r3, [r7, #23]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	08003a4d 	.word	0x08003a4d
 8003974:	080039a5 	.word	0x080039a5
 8003978:	08003a69 	.word	0x08003a69

0800397c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039b2:	f7fe f9bf 	bl	8001d34 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c6:	d03b      	beq.n	8003a40 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0220 	bic.w	r2, r2, #32
 80039d6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0202 	bic.w	r2, r2, #2
 80039e6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	2164      	movs	r1, #100	; 0x64
 80039ec:	6978      	ldr	r0, [r7, #20]
 80039ee:	f000 f979 	bl	8003ce4 <SPI_EndRxTxTransaction>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039fc:	f043 0220 	orr.w	r2, r3, #32
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2200      	movs	r2, #0
 8003a26:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003a38:	6978      	ldr	r0, [r7, #20]
 8003a3a:	f7ff ffa9 	bl	8003990 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003a3e:	e002      	b.n	8003a46 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003a40:	6978      	ldr	r0, [r7, #20]
 8003a42:	f7fd f835 	bl	8000ab0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f7ff ff8e 	bl	800397c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a60:	bf00      	nop
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0203 	bic.w	r2, r2, #3
 8003a84:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a8a:	f043 0210 	orr.w	r2, r3, #16
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f7ff ff78 	bl	8003990 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ab8:	f7fe f93c 	bl	8001d34 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ac8:	f7fe f934 	bl	8001d34 <HAL_GetTick>
 8003acc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ace:	4b39      	ldr	r3, [pc, #228]	; (8003bb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	015b      	lsls	r3, r3, #5
 8003ad4:	0d1b      	lsrs	r3, r3, #20
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	fb02 f303 	mul.w	r3, r2, r3
 8003adc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ade:	e054      	b.n	8003b8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae6:	d050      	beq.n	8003b8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ae8:	f7fe f924 	bl	8001d34 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	69fa      	ldr	r2, [r7, #28]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d902      	bls.n	8003afe <SPI_WaitFlagStateUntilTimeout+0x56>
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d13d      	bne.n	8003b7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b16:	d111      	bne.n	8003b3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b20:	d004      	beq.n	8003b2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2a:	d107      	bne.n	8003b3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b44:	d10f      	bne.n	8003b66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e017      	b.n	8003baa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4013      	ands	r3, r2
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	bf0c      	ite	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	2300      	movne	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d19b      	bne.n	8003ae0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3720      	adds	r7, #32
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000004 	.word	0x20000004

08003bb8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08a      	sub	sp, #40	; 0x28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003bca:	f7fe f8b3 	bl	8001d34 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003bda:	f7fe f8ab 	bl	8001d34 <HAL_GetTick>
 8003bde:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	330c      	adds	r3, #12
 8003be6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003be8:	4b3d      	ldr	r3, [pc, #244]	; (8003ce0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	00da      	lsls	r2, r3, #3
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	0d1b      	lsrs	r3, r3, #20
 8003bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfa:	fb02 f303 	mul.w	r3, r2, r3
 8003bfe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c00:	e060      	b.n	8003cc4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c08:	d107      	bne.n	8003c1a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d104      	bne.n	8003c1a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c18:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d050      	beq.n	8003cc4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c22:	f7fe f887 	bl	8001d34 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d902      	bls.n	8003c38 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d13d      	bne.n	8003cb4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c50:	d111      	bne.n	8003c76 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c5a:	d004      	beq.n	8003c66 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c64:	d107      	bne.n	8003c76 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c7e:	d10f      	bne.n	8003ca0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e010      	b.n	8003cd6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d196      	bne.n	8003c02 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3728      	adds	r7, #40	; 0x28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20000004 	.word	0x20000004

08003ce4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f7ff ff5b 	bl	8003bb8 <SPI_WaitFifoStateUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d007      	beq.n	8003d18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0c:	f043 0220 	orr.w	r2, r3, #32
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e046      	b.n	8003da6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d18:	4b25      	ldr	r3, [pc, #148]	; (8003db0 <SPI_EndRxTxTransaction+0xcc>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a25      	ldr	r2, [pc, #148]	; (8003db4 <SPI_EndRxTxTransaction+0xd0>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	0d5b      	lsrs	r3, r3, #21
 8003d24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d36:	d112      	bne.n	8003d5e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2180      	movs	r1, #128	; 0x80
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f7ff feb0 	bl	8003aa8 <SPI_WaitFlagStateUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d016      	beq.n	8003d7c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d52:	f043 0220 	orr.w	r2, r3, #32
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e023      	b.n	8003da6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d74:	2b80      	cmp	r3, #128	; 0x80
 8003d76:	d0f2      	beq.n	8003d5e <SPI_EndRxTxTransaction+0x7a>
 8003d78:	e000      	b.n	8003d7c <SPI_EndRxTxTransaction+0x98>
        break;
 8003d7a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f7ff ff15 	bl	8003bb8 <SPI_WaitFifoStateUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d007      	beq.n	8003da4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d98:	f043 0220 	orr.w	r2, r3, #32
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e000      	b.n	8003da6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000004 	.word	0x20000004
 8003db4:	165e9f81 	.word	0x165e9f81

08003db8 <siprintf>:
 8003db8:	b40e      	push	{r1, r2, r3}
 8003dba:	b500      	push	{lr}
 8003dbc:	b09c      	sub	sp, #112	; 0x70
 8003dbe:	ab1d      	add	r3, sp, #116	; 0x74
 8003dc0:	9002      	str	r0, [sp, #8]
 8003dc2:	9006      	str	r0, [sp, #24]
 8003dc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003dc8:	4809      	ldr	r0, [pc, #36]	; (8003df0 <siprintf+0x38>)
 8003dca:	9107      	str	r1, [sp, #28]
 8003dcc:	9104      	str	r1, [sp, #16]
 8003dce:	4909      	ldr	r1, [pc, #36]	; (8003df4 <siprintf+0x3c>)
 8003dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dd4:	9105      	str	r1, [sp, #20]
 8003dd6:	6800      	ldr	r0, [r0, #0]
 8003dd8:	9301      	str	r3, [sp, #4]
 8003dda:	a902      	add	r1, sp, #8
 8003ddc:	f000 f992 	bl	8004104 <_svfiprintf_r>
 8003de0:	9b02      	ldr	r3, [sp, #8]
 8003de2:	2200      	movs	r2, #0
 8003de4:	701a      	strb	r2, [r3, #0]
 8003de6:	b01c      	add	sp, #112	; 0x70
 8003de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dec:	b003      	add	sp, #12
 8003dee:	4770      	bx	lr
 8003df0:	2000005c 	.word	0x2000005c
 8003df4:	ffff0208 	.word	0xffff0208

08003df8 <memset>:
 8003df8:	4402      	add	r2, r0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d100      	bne.n	8003e02 <memset+0xa>
 8003e00:	4770      	bx	lr
 8003e02:	f803 1b01 	strb.w	r1, [r3], #1
 8003e06:	e7f9      	b.n	8003dfc <memset+0x4>

08003e08 <__errno>:
 8003e08:	4b01      	ldr	r3, [pc, #4]	; (8003e10 <__errno+0x8>)
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	2000005c 	.word	0x2000005c

08003e14 <__libc_init_array>:
 8003e14:	b570      	push	{r4, r5, r6, lr}
 8003e16:	4d0d      	ldr	r5, [pc, #52]	; (8003e4c <__libc_init_array+0x38>)
 8003e18:	4c0d      	ldr	r4, [pc, #52]	; (8003e50 <__libc_init_array+0x3c>)
 8003e1a:	1b64      	subs	r4, r4, r5
 8003e1c:	10a4      	asrs	r4, r4, #2
 8003e1e:	2600      	movs	r6, #0
 8003e20:	42a6      	cmp	r6, r4
 8003e22:	d109      	bne.n	8003e38 <__libc_init_array+0x24>
 8003e24:	4d0b      	ldr	r5, [pc, #44]	; (8003e54 <__libc_init_array+0x40>)
 8003e26:	4c0c      	ldr	r4, [pc, #48]	; (8003e58 <__libc_init_array+0x44>)
 8003e28:	f000 fc6a 	bl	8004700 <_init>
 8003e2c:	1b64      	subs	r4, r4, r5
 8003e2e:	10a4      	asrs	r4, r4, #2
 8003e30:	2600      	movs	r6, #0
 8003e32:	42a6      	cmp	r6, r4
 8003e34:	d105      	bne.n	8003e42 <__libc_init_array+0x2e>
 8003e36:	bd70      	pop	{r4, r5, r6, pc}
 8003e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e3c:	4798      	blx	r3
 8003e3e:	3601      	adds	r6, #1
 8003e40:	e7ee      	b.n	8003e20 <__libc_init_array+0xc>
 8003e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e46:	4798      	blx	r3
 8003e48:	3601      	adds	r6, #1
 8003e4a:	e7f2      	b.n	8003e32 <__libc_init_array+0x1e>
 8003e4c:	0800622c 	.word	0x0800622c
 8003e50:	0800622c 	.word	0x0800622c
 8003e54:	0800622c 	.word	0x0800622c
 8003e58:	08006230 	.word	0x08006230

08003e5c <__retarget_lock_acquire_recursive>:
 8003e5c:	4770      	bx	lr

08003e5e <__retarget_lock_release_recursive>:
 8003e5e:	4770      	bx	lr

08003e60 <_free_r>:
 8003e60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e62:	2900      	cmp	r1, #0
 8003e64:	d044      	beq.n	8003ef0 <_free_r+0x90>
 8003e66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e6a:	9001      	str	r0, [sp, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f1a1 0404 	sub.w	r4, r1, #4
 8003e72:	bfb8      	it	lt
 8003e74:	18e4      	addlt	r4, r4, r3
 8003e76:	f000 f8df 	bl	8004038 <__malloc_lock>
 8003e7a:	4a1e      	ldr	r2, [pc, #120]	; (8003ef4 <_free_r+0x94>)
 8003e7c:	9801      	ldr	r0, [sp, #4]
 8003e7e:	6813      	ldr	r3, [r2, #0]
 8003e80:	b933      	cbnz	r3, 8003e90 <_free_r+0x30>
 8003e82:	6063      	str	r3, [r4, #4]
 8003e84:	6014      	str	r4, [r2, #0]
 8003e86:	b003      	add	sp, #12
 8003e88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e8c:	f000 b8da 	b.w	8004044 <__malloc_unlock>
 8003e90:	42a3      	cmp	r3, r4
 8003e92:	d908      	bls.n	8003ea6 <_free_r+0x46>
 8003e94:	6825      	ldr	r5, [r4, #0]
 8003e96:	1961      	adds	r1, r4, r5
 8003e98:	428b      	cmp	r3, r1
 8003e9a:	bf01      	itttt	eq
 8003e9c:	6819      	ldreq	r1, [r3, #0]
 8003e9e:	685b      	ldreq	r3, [r3, #4]
 8003ea0:	1949      	addeq	r1, r1, r5
 8003ea2:	6021      	streq	r1, [r4, #0]
 8003ea4:	e7ed      	b.n	8003e82 <_free_r+0x22>
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	b10b      	cbz	r3, 8003eb0 <_free_r+0x50>
 8003eac:	42a3      	cmp	r3, r4
 8003eae:	d9fa      	bls.n	8003ea6 <_free_r+0x46>
 8003eb0:	6811      	ldr	r1, [r2, #0]
 8003eb2:	1855      	adds	r5, r2, r1
 8003eb4:	42a5      	cmp	r5, r4
 8003eb6:	d10b      	bne.n	8003ed0 <_free_r+0x70>
 8003eb8:	6824      	ldr	r4, [r4, #0]
 8003eba:	4421      	add	r1, r4
 8003ebc:	1854      	adds	r4, r2, r1
 8003ebe:	42a3      	cmp	r3, r4
 8003ec0:	6011      	str	r1, [r2, #0]
 8003ec2:	d1e0      	bne.n	8003e86 <_free_r+0x26>
 8003ec4:	681c      	ldr	r4, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	6053      	str	r3, [r2, #4]
 8003eca:	440c      	add	r4, r1
 8003ecc:	6014      	str	r4, [r2, #0]
 8003ece:	e7da      	b.n	8003e86 <_free_r+0x26>
 8003ed0:	d902      	bls.n	8003ed8 <_free_r+0x78>
 8003ed2:	230c      	movs	r3, #12
 8003ed4:	6003      	str	r3, [r0, #0]
 8003ed6:	e7d6      	b.n	8003e86 <_free_r+0x26>
 8003ed8:	6825      	ldr	r5, [r4, #0]
 8003eda:	1961      	adds	r1, r4, r5
 8003edc:	428b      	cmp	r3, r1
 8003ede:	bf04      	itt	eq
 8003ee0:	6819      	ldreq	r1, [r3, #0]
 8003ee2:	685b      	ldreq	r3, [r3, #4]
 8003ee4:	6063      	str	r3, [r4, #4]
 8003ee6:	bf04      	itt	eq
 8003ee8:	1949      	addeq	r1, r1, r5
 8003eea:	6021      	streq	r1, [r4, #0]
 8003eec:	6054      	str	r4, [r2, #4]
 8003eee:	e7ca      	b.n	8003e86 <_free_r+0x26>
 8003ef0:	b003      	add	sp, #12
 8003ef2:	bd30      	pop	{r4, r5, pc}
 8003ef4:	200002a8 	.word	0x200002a8

08003ef8 <sbrk_aligned>:
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	4e0e      	ldr	r6, [pc, #56]	; (8003f34 <sbrk_aligned+0x3c>)
 8003efc:	460c      	mov	r4, r1
 8003efe:	6831      	ldr	r1, [r6, #0]
 8003f00:	4605      	mov	r5, r0
 8003f02:	b911      	cbnz	r1, 8003f0a <sbrk_aligned+0x12>
 8003f04:	f000 fba6 	bl	8004654 <_sbrk_r>
 8003f08:	6030      	str	r0, [r6, #0]
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	f000 fba1 	bl	8004654 <_sbrk_r>
 8003f12:	1c43      	adds	r3, r0, #1
 8003f14:	d00a      	beq.n	8003f2c <sbrk_aligned+0x34>
 8003f16:	1cc4      	adds	r4, r0, #3
 8003f18:	f024 0403 	bic.w	r4, r4, #3
 8003f1c:	42a0      	cmp	r0, r4
 8003f1e:	d007      	beq.n	8003f30 <sbrk_aligned+0x38>
 8003f20:	1a21      	subs	r1, r4, r0
 8003f22:	4628      	mov	r0, r5
 8003f24:	f000 fb96 	bl	8004654 <_sbrk_r>
 8003f28:	3001      	adds	r0, #1
 8003f2a:	d101      	bne.n	8003f30 <sbrk_aligned+0x38>
 8003f2c:	f04f 34ff 	mov.w	r4, #4294967295
 8003f30:	4620      	mov	r0, r4
 8003f32:	bd70      	pop	{r4, r5, r6, pc}
 8003f34:	200002ac 	.word	0x200002ac

08003f38 <_malloc_r>:
 8003f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f3c:	1ccd      	adds	r5, r1, #3
 8003f3e:	f025 0503 	bic.w	r5, r5, #3
 8003f42:	3508      	adds	r5, #8
 8003f44:	2d0c      	cmp	r5, #12
 8003f46:	bf38      	it	cc
 8003f48:	250c      	movcc	r5, #12
 8003f4a:	2d00      	cmp	r5, #0
 8003f4c:	4607      	mov	r7, r0
 8003f4e:	db01      	blt.n	8003f54 <_malloc_r+0x1c>
 8003f50:	42a9      	cmp	r1, r5
 8003f52:	d905      	bls.n	8003f60 <_malloc_r+0x28>
 8003f54:	230c      	movs	r3, #12
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	2600      	movs	r6, #0
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004034 <_malloc_r+0xfc>
 8003f64:	f000 f868 	bl	8004038 <__malloc_lock>
 8003f68:	f8d8 3000 	ldr.w	r3, [r8]
 8003f6c:	461c      	mov	r4, r3
 8003f6e:	bb5c      	cbnz	r4, 8003fc8 <_malloc_r+0x90>
 8003f70:	4629      	mov	r1, r5
 8003f72:	4638      	mov	r0, r7
 8003f74:	f7ff ffc0 	bl	8003ef8 <sbrk_aligned>
 8003f78:	1c43      	adds	r3, r0, #1
 8003f7a:	4604      	mov	r4, r0
 8003f7c:	d155      	bne.n	800402a <_malloc_r+0xf2>
 8003f7e:	f8d8 4000 	ldr.w	r4, [r8]
 8003f82:	4626      	mov	r6, r4
 8003f84:	2e00      	cmp	r6, #0
 8003f86:	d145      	bne.n	8004014 <_malloc_r+0xdc>
 8003f88:	2c00      	cmp	r4, #0
 8003f8a:	d048      	beq.n	800401e <_malloc_r+0xe6>
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	4631      	mov	r1, r6
 8003f90:	4638      	mov	r0, r7
 8003f92:	eb04 0903 	add.w	r9, r4, r3
 8003f96:	f000 fb5d 	bl	8004654 <_sbrk_r>
 8003f9a:	4581      	cmp	r9, r0
 8003f9c:	d13f      	bne.n	800401e <_malloc_r+0xe6>
 8003f9e:	6821      	ldr	r1, [r4, #0]
 8003fa0:	1a6d      	subs	r5, r5, r1
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	4638      	mov	r0, r7
 8003fa6:	f7ff ffa7 	bl	8003ef8 <sbrk_aligned>
 8003faa:	3001      	adds	r0, #1
 8003fac:	d037      	beq.n	800401e <_malloc_r+0xe6>
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	442b      	add	r3, r5
 8003fb2:	6023      	str	r3, [r4, #0]
 8003fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d038      	beq.n	800402e <_malloc_r+0xf6>
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	42a2      	cmp	r2, r4
 8003fc0:	d12b      	bne.n	800401a <_malloc_r+0xe2>
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	e00f      	b.n	8003fe8 <_malloc_r+0xb0>
 8003fc8:	6822      	ldr	r2, [r4, #0]
 8003fca:	1b52      	subs	r2, r2, r5
 8003fcc:	d41f      	bmi.n	800400e <_malloc_r+0xd6>
 8003fce:	2a0b      	cmp	r2, #11
 8003fd0:	d917      	bls.n	8004002 <_malloc_r+0xca>
 8003fd2:	1961      	adds	r1, r4, r5
 8003fd4:	42a3      	cmp	r3, r4
 8003fd6:	6025      	str	r5, [r4, #0]
 8003fd8:	bf18      	it	ne
 8003fda:	6059      	strne	r1, [r3, #4]
 8003fdc:	6863      	ldr	r3, [r4, #4]
 8003fde:	bf08      	it	eq
 8003fe0:	f8c8 1000 	streq.w	r1, [r8]
 8003fe4:	5162      	str	r2, [r4, r5]
 8003fe6:	604b      	str	r3, [r1, #4]
 8003fe8:	4638      	mov	r0, r7
 8003fea:	f104 060b 	add.w	r6, r4, #11
 8003fee:	f000 f829 	bl	8004044 <__malloc_unlock>
 8003ff2:	f026 0607 	bic.w	r6, r6, #7
 8003ff6:	1d23      	adds	r3, r4, #4
 8003ff8:	1af2      	subs	r2, r6, r3
 8003ffa:	d0ae      	beq.n	8003f5a <_malloc_r+0x22>
 8003ffc:	1b9b      	subs	r3, r3, r6
 8003ffe:	50a3      	str	r3, [r4, r2]
 8004000:	e7ab      	b.n	8003f5a <_malloc_r+0x22>
 8004002:	42a3      	cmp	r3, r4
 8004004:	6862      	ldr	r2, [r4, #4]
 8004006:	d1dd      	bne.n	8003fc4 <_malloc_r+0x8c>
 8004008:	f8c8 2000 	str.w	r2, [r8]
 800400c:	e7ec      	b.n	8003fe8 <_malloc_r+0xb0>
 800400e:	4623      	mov	r3, r4
 8004010:	6864      	ldr	r4, [r4, #4]
 8004012:	e7ac      	b.n	8003f6e <_malloc_r+0x36>
 8004014:	4634      	mov	r4, r6
 8004016:	6876      	ldr	r6, [r6, #4]
 8004018:	e7b4      	b.n	8003f84 <_malloc_r+0x4c>
 800401a:	4613      	mov	r3, r2
 800401c:	e7cc      	b.n	8003fb8 <_malloc_r+0x80>
 800401e:	230c      	movs	r3, #12
 8004020:	603b      	str	r3, [r7, #0]
 8004022:	4638      	mov	r0, r7
 8004024:	f000 f80e 	bl	8004044 <__malloc_unlock>
 8004028:	e797      	b.n	8003f5a <_malloc_r+0x22>
 800402a:	6025      	str	r5, [r4, #0]
 800402c:	e7dc      	b.n	8003fe8 <_malloc_r+0xb0>
 800402e:	605b      	str	r3, [r3, #4]
 8004030:	deff      	udf	#255	; 0xff
 8004032:	bf00      	nop
 8004034:	200002a8 	.word	0x200002a8

08004038 <__malloc_lock>:
 8004038:	4801      	ldr	r0, [pc, #4]	; (8004040 <__malloc_lock+0x8>)
 800403a:	f7ff bf0f 	b.w	8003e5c <__retarget_lock_acquire_recursive>
 800403e:	bf00      	nop
 8004040:	200002a4 	.word	0x200002a4

08004044 <__malloc_unlock>:
 8004044:	4801      	ldr	r0, [pc, #4]	; (800404c <__malloc_unlock+0x8>)
 8004046:	f7ff bf0a 	b.w	8003e5e <__retarget_lock_release_recursive>
 800404a:	bf00      	nop
 800404c:	200002a4 	.word	0x200002a4

08004050 <__ssputs_r>:
 8004050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004054:	688e      	ldr	r6, [r1, #8]
 8004056:	461f      	mov	r7, r3
 8004058:	42be      	cmp	r6, r7
 800405a:	680b      	ldr	r3, [r1, #0]
 800405c:	4682      	mov	sl, r0
 800405e:	460c      	mov	r4, r1
 8004060:	4690      	mov	r8, r2
 8004062:	d82c      	bhi.n	80040be <__ssputs_r+0x6e>
 8004064:	898a      	ldrh	r2, [r1, #12]
 8004066:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800406a:	d026      	beq.n	80040ba <__ssputs_r+0x6a>
 800406c:	6965      	ldr	r5, [r4, #20]
 800406e:	6909      	ldr	r1, [r1, #16]
 8004070:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004074:	eba3 0901 	sub.w	r9, r3, r1
 8004078:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800407c:	1c7b      	adds	r3, r7, #1
 800407e:	444b      	add	r3, r9
 8004080:	106d      	asrs	r5, r5, #1
 8004082:	429d      	cmp	r5, r3
 8004084:	bf38      	it	cc
 8004086:	461d      	movcc	r5, r3
 8004088:	0553      	lsls	r3, r2, #21
 800408a:	d527      	bpl.n	80040dc <__ssputs_r+0x8c>
 800408c:	4629      	mov	r1, r5
 800408e:	f7ff ff53 	bl	8003f38 <_malloc_r>
 8004092:	4606      	mov	r6, r0
 8004094:	b360      	cbz	r0, 80040f0 <__ssputs_r+0xa0>
 8004096:	6921      	ldr	r1, [r4, #16]
 8004098:	464a      	mov	r2, r9
 800409a:	f000 faeb 	bl	8004674 <memcpy>
 800409e:	89a3      	ldrh	r3, [r4, #12]
 80040a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80040a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a8:	81a3      	strh	r3, [r4, #12]
 80040aa:	6126      	str	r6, [r4, #16]
 80040ac:	6165      	str	r5, [r4, #20]
 80040ae:	444e      	add	r6, r9
 80040b0:	eba5 0509 	sub.w	r5, r5, r9
 80040b4:	6026      	str	r6, [r4, #0]
 80040b6:	60a5      	str	r5, [r4, #8]
 80040b8:	463e      	mov	r6, r7
 80040ba:	42be      	cmp	r6, r7
 80040bc:	d900      	bls.n	80040c0 <__ssputs_r+0x70>
 80040be:	463e      	mov	r6, r7
 80040c0:	6820      	ldr	r0, [r4, #0]
 80040c2:	4632      	mov	r2, r6
 80040c4:	4641      	mov	r1, r8
 80040c6:	f000 faab 	bl	8004620 <memmove>
 80040ca:	68a3      	ldr	r3, [r4, #8]
 80040cc:	1b9b      	subs	r3, r3, r6
 80040ce:	60a3      	str	r3, [r4, #8]
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	4433      	add	r3, r6
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	2000      	movs	r0, #0
 80040d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040dc:	462a      	mov	r2, r5
 80040de:	f000 fad7 	bl	8004690 <_realloc_r>
 80040e2:	4606      	mov	r6, r0
 80040e4:	2800      	cmp	r0, #0
 80040e6:	d1e0      	bne.n	80040aa <__ssputs_r+0x5a>
 80040e8:	6921      	ldr	r1, [r4, #16]
 80040ea:	4650      	mov	r0, sl
 80040ec:	f7ff feb8 	bl	8003e60 <_free_r>
 80040f0:	230c      	movs	r3, #12
 80040f2:	f8ca 3000 	str.w	r3, [sl]
 80040f6:	89a3      	ldrh	r3, [r4, #12]
 80040f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040fc:	81a3      	strh	r3, [r4, #12]
 80040fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004102:	e7e9      	b.n	80040d8 <__ssputs_r+0x88>

08004104 <_svfiprintf_r>:
 8004104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004108:	4698      	mov	r8, r3
 800410a:	898b      	ldrh	r3, [r1, #12]
 800410c:	061b      	lsls	r3, r3, #24
 800410e:	b09d      	sub	sp, #116	; 0x74
 8004110:	4607      	mov	r7, r0
 8004112:	460d      	mov	r5, r1
 8004114:	4614      	mov	r4, r2
 8004116:	d50e      	bpl.n	8004136 <_svfiprintf_r+0x32>
 8004118:	690b      	ldr	r3, [r1, #16]
 800411a:	b963      	cbnz	r3, 8004136 <_svfiprintf_r+0x32>
 800411c:	2140      	movs	r1, #64	; 0x40
 800411e:	f7ff ff0b 	bl	8003f38 <_malloc_r>
 8004122:	6028      	str	r0, [r5, #0]
 8004124:	6128      	str	r0, [r5, #16]
 8004126:	b920      	cbnz	r0, 8004132 <_svfiprintf_r+0x2e>
 8004128:	230c      	movs	r3, #12
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	f04f 30ff 	mov.w	r0, #4294967295
 8004130:	e0d0      	b.n	80042d4 <_svfiprintf_r+0x1d0>
 8004132:	2340      	movs	r3, #64	; 0x40
 8004134:	616b      	str	r3, [r5, #20]
 8004136:	2300      	movs	r3, #0
 8004138:	9309      	str	r3, [sp, #36]	; 0x24
 800413a:	2320      	movs	r3, #32
 800413c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004140:	f8cd 800c 	str.w	r8, [sp, #12]
 8004144:	2330      	movs	r3, #48	; 0x30
 8004146:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80042ec <_svfiprintf_r+0x1e8>
 800414a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800414e:	f04f 0901 	mov.w	r9, #1
 8004152:	4623      	mov	r3, r4
 8004154:	469a      	mov	sl, r3
 8004156:	f813 2b01 	ldrb.w	r2, [r3], #1
 800415a:	b10a      	cbz	r2, 8004160 <_svfiprintf_r+0x5c>
 800415c:	2a25      	cmp	r2, #37	; 0x25
 800415e:	d1f9      	bne.n	8004154 <_svfiprintf_r+0x50>
 8004160:	ebba 0b04 	subs.w	fp, sl, r4
 8004164:	d00b      	beq.n	800417e <_svfiprintf_r+0x7a>
 8004166:	465b      	mov	r3, fp
 8004168:	4622      	mov	r2, r4
 800416a:	4629      	mov	r1, r5
 800416c:	4638      	mov	r0, r7
 800416e:	f7ff ff6f 	bl	8004050 <__ssputs_r>
 8004172:	3001      	adds	r0, #1
 8004174:	f000 80a9 	beq.w	80042ca <_svfiprintf_r+0x1c6>
 8004178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800417a:	445a      	add	r2, fp
 800417c:	9209      	str	r2, [sp, #36]	; 0x24
 800417e:	f89a 3000 	ldrb.w	r3, [sl]
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 80a1 	beq.w	80042ca <_svfiprintf_r+0x1c6>
 8004188:	2300      	movs	r3, #0
 800418a:	f04f 32ff 	mov.w	r2, #4294967295
 800418e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004192:	f10a 0a01 	add.w	sl, sl, #1
 8004196:	9304      	str	r3, [sp, #16]
 8004198:	9307      	str	r3, [sp, #28]
 800419a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800419e:	931a      	str	r3, [sp, #104]	; 0x68
 80041a0:	4654      	mov	r4, sl
 80041a2:	2205      	movs	r2, #5
 80041a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041a8:	4850      	ldr	r0, [pc, #320]	; (80042ec <_svfiprintf_r+0x1e8>)
 80041aa:	f7fc f831 	bl	8000210 <memchr>
 80041ae:	9a04      	ldr	r2, [sp, #16]
 80041b0:	b9d8      	cbnz	r0, 80041ea <_svfiprintf_r+0xe6>
 80041b2:	06d0      	lsls	r0, r2, #27
 80041b4:	bf44      	itt	mi
 80041b6:	2320      	movmi	r3, #32
 80041b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041bc:	0711      	lsls	r1, r2, #28
 80041be:	bf44      	itt	mi
 80041c0:	232b      	movmi	r3, #43	; 0x2b
 80041c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041c6:	f89a 3000 	ldrb.w	r3, [sl]
 80041ca:	2b2a      	cmp	r3, #42	; 0x2a
 80041cc:	d015      	beq.n	80041fa <_svfiprintf_r+0xf6>
 80041ce:	9a07      	ldr	r2, [sp, #28]
 80041d0:	4654      	mov	r4, sl
 80041d2:	2000      	movs	r0, #0
 80041d4:	f04f 0c0a 	mov.w	ip, #10
 80041d8:	4621      	mov	r1, r4
 80041da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041de:	3b30      	subs	r3, #48	; 0x30
 80041e0:	2b09      	cmp	r3, #9
 80041e2:	d94d      	bls.n	8004280 <_svfiprintf_r+0x17c>
 80041e4:	b1b0      	cbz	r0, 8004214 <_svfiprintf_r+0x110>
 80041e6:	9207      	str	r2, [sp, #28]
 80041e8:	e014      	b.n	8004214 <_svfiprintf_r+0x110>
 80041ea:	eba0 0308 	sub.w	r3, r0, r8
 80041ee:	fa09 f303 	lsl.w	r3, r9, r3
 80041f2:	4313      	orrs	r3, r2
 80041f4:	9304      	str	r3, [sp, #16]
 80041f6:	46a2      	mov	sl, r4
 80041f8:	e7d2      	b.n	80041a0 <_svfiprintf_r+0x9c>
 80041fa:	9b03      	ldr	r3, [sp, #12]
 80041fc:	1d19      	adds	r1, r3, #4
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	9103      	str	r1, [sp, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	bfbb      	ittet	lt
 8004206:	425b      	neglt	r3, r3
 8004208:	f042 0202 	orrlt.w	r2, r2, #2
 800420c:	9307      	strge	r3, [sp, #28]
 800420e:	9307      	strlt	r3, [sp, #28]
 8004210:	bfb8      	it	lt
 8004212:	9204      	strlt	r2, [sp, #16]
 8004214:	7823      	ldrb	r3, [r4, #0]
 8004216:	2b2e      	cmp	r3, #46	; 0x2e
 8004218:	d10c      	bne.n	8004234 <_svfiprintf_r+0x130>
 800421a:	7863      	ldrb	r3, [r4, #1]
 800421c:	2b2a      	cmp	r3, #42	; 0x2a
 800421e:	d134      	bne.n	800428a <_svfiprintf_r+0x186>
 8004220:	9b03      	ldr	r3, [sp, #12]
 8004222:	1d1a      	adds	r2, r3, #4
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	9203      	str	r2, [sp, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	bfb8      	it	lt
 800422c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004230:	3402      	adds	r4, #2
 8004232:	9305      	str	r3, [sp, #20]
 8004234:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80042fc <_svfiprintf_r+0x1f8>
 8004238:	7821      	ldrb	r1, [r4, #0]
 800423a:	2203      	movs	r2, #3
 800423c:	4650      	mov	r0, sl
 800423e:	f7fb ffe7 	bl	8000210 <memchr>
 8004242:	b138      	cbz	r0, 8004254 <_svfiprintf_r+0x150>
 8004244:	9b04      	ldr	r3, [sp, #16]
 8004246:	eba0 000a 	sub.w	r0, r0, sl
 800424a:	2240      	movs	r2, #64	; 0x40
 800424c:	4082      	lsls	r2, r0
 800424e:	4313      	orrs	r3, r2
 8004250:	3401      	adds	r4, #1
 8004252:	9304      	str	r3, [sp, #16]
 8004254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004258:	4825      	ldr	r0, [pc, #148]	; (80042f0 <_svfiprintf_r+0x1ec>)
 800425a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800425e:	2206      	movs	r2, #6
 8004260:	f7fb ffd6 	bl	8000210 <memchr>
 8004264:	2800      	cmp	r0, #0
 8004266:	d038      	beq.n	80042da <_svfiprintf_r+0x1d6>
 8004268:	4b22      	ldr	r3, [pc, #136]	; (80042f4 <_svfiprintf_r+0x1f0>)
 800426a:	bb1b      	cbnz	r3, 80042b4 <_svfiprintf_r+0x1b0>
 800426c:	9b03      	ldr	r3, [sp, #12]
 800426e:	3307      	adds	r3, #7
 8004270:	f023 0307 	bic.w	r3, r3, #7
 8004274:	3308      	adds	r3, #8
 8004276:	9303      	str	r3, [sp, #12]
 8004278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800427a:	4433      	add	r3, r6
 800427c:	9309      	str	r3, [sp, #36]	; 0x24
 800427e:	e768      	b.n	8004152 <_svfiprintf_r+0x4e>
 8004280:	fb0c 3202 	mla	r2, ip, r2, r3
 8004284:	460c      	mov	r4, r1
 8004286:	2001      	movs	r0, #1
 8004288:	e7a6      	b.n	80041d8 <_svfiprintf_r+0xd4>
 800428a:	2300      	movs	r3, #0
 800428c:	3401      	adds	r4, #1
 800428e:	9305      	str	r3, [sp, #20]
 8004290:	4619      	mov	r1, r3
 8004292:	f04f 0c0a 	mov.w	ip, #10
 8004296:	4620      	mov	r0, r4
 8004298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800429c:	3a30      	subs	r2, #48	; 0x30
 800429e:	2a09      	cmp	r2, #9
 80042a0:	d903      	bls.n	80042aa <_svfiprintf_r+0x1a6>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0c6      	beq.n	8004234 <_svfiprintf_r+0x130>
 80042a6:	9105      	str	r1, [sp, #20]
 80042a8:	e7c4      	b.n	8004234 <_svfiprintf_r+0x130>
 80042aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80042ae:	4604      	mov	r4, r0
 80042b0:	2301      	movs	r3, #1
 80042b2:	e7f0      	b.n	8004296 <_svfiprintf_r+0x192>
 80042b4:	ab03      	add	r3, sp, #12
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	462a      	mov	r2, r5
 80042ba:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <_svfiprintf_r+0x1f4>)
 80042bc:	a904      	add	r1, sp, #16
 80042be:	4638      	mov	r0, r7
 80042c0:	f3af 8000 	nop.w
 80042c4:	1c42      	adds	r2, r0, #1
 80042c6:	4606      	mov	r6, r0
 80042c8:	d1d6      	bne.n	8004278 <_svfiprintf_r+0x174>
 80042ca:	89ab      	ldrh	r3, [r5, #12]
 80042cc:	065b      	lsls	r3, r3, #25
 80042ce:	f53f af2d 	bmi.w	800412c <_svfiprintf_r+0x28>
 80042d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042d4:	b01d      	add	sp, #116	; 0x74
 80042d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042da:	ab03      	add	r3, sp, #12
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	462a      	mov	r2, r5
 80042e0:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <_svfiprintf_r+0x1f4>)
 80042e2:	a904      	add	r1, sp, #16
 80042e4:	4638      	mov	r0, r7
 80042e6:	f000 f879 	bl	80043dc <_printf_i>
 80042ea:	e7eb      	b.n	80042c4 <_svfiprintf_r+0x1c0>
 80042ec:	080061f0 	.word	0x080061f0
 80042f0:	080061fa 	.word	0x080061fa
 80042f4:	00000000 	.word	0x00000000
 80042f8:	08004051 	.word	0x08004051
 80042fc:	080061f6 	.word	0x080061f6

08004300 <_printf_common>:
 8004300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004304:	4616      	mov	r6, r2
 8004306:	4699      	mov	r9, r3
 8004308:	688a      	ldr	r2, [r1, #8]
 800430a:	690b      	ldr	r3, [r1, #16]
 800430c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004310:	4293      	cmp	r3, r2
 8004312:	bfb8      	it	lt
 8004314:	4613      	movlt	r3, r2
 8004316:	6033      	str	r3, [r6, #0]
 8004318:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800431c:	4607      	mov	r7, r0
 800431e:	460c      	mov	r4, r1
 8004320:	b10a      	cbz	r2, 8004326 <_printf_common+0x26>
 8004322:	3301      	adds	r3, #1
 8004324:	6033      	str	r3, [r6, #0]
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	0699      	lsls	r1, r3, #26
 800432a:	bf42      	ittt	mi
 800432c:	6833      	ldrmi	r3, [r6, #0]
 800432e:	3302      	addmi	r3, #2
 8004330:	6033      	strmi	r3, [r6, #0]
 8004332:	6825      	ldr	r5, [r4, #0]
 8004334:	f015 0506 	ands.w	r5, r5, #6
 8004338:	d106      	bne.n	8004348 <_printf_common+0x48>
 800433a:	f104 0a19 	add.w	sl, r4, #25
 800433e:	68e3      	ldr	r3, [r4, #12]
 8004340:	6832      	ldr	r2, [r6, #0]
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	42ab      	cmp	r3, r5
 8004346:	dc26      	bgt.n	8004396 <_printf_common+0x96>
 8004348:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800434c:	1e13      	subs	r3, r2, #0
 800434e:	6822      	ldr	r2, [r4, #0]
 8004350:	bf18      	it	ne
 8004352:	2301      	movne	r3, #1
 8004354:	0692      	lsls	r2, r2, #26
 8004356:	d42b      	bmi.n	80043b0 <_printf_common+0xb0>
 8004358:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800435c:	4649      	mov	r1, r9
 800435e:	4638      	mov	r0, r7
 8004360:	47c0      	blx	r8
 8004362:	3001      	adds	r0, #1
 8004364:	d01e      	beq.n	80043a4 <_printf_common+0xa4>
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	6922      	ldr	r2, [r4, #16]
 800436a:	f003 0306 	and.w	r3, r3, #6
 800436e:	2b04      	cmp	r3, #4
 8004370:	bf02      	ittt	eq
 8004372:	68e5      	ldreq	r5, [r4, #12]
 8004374:	6833      	ldreq	r3, [r6, #0]
 8004376:	1aed      	subeq	r5, r5, r3
 8004378:	68a3      	ldr	r3, [r4, #8]
 800437a:	bf0c      	ite	eq
 800437c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004380:	2500      	movne	r5, #0
 8004382:	4293      	cmp	r3, r2
 8004384:	bfc4      	itt	gt
 8004386:	1a9b      	subgt	r3, r3, r2
 8004388:	18ed      	addgt	r5, r5, r3
 800438a:	2600      	movs	r6, #0
 800438c:	341a      	adds	r4, #26
 800438e:	42b5      	cmp	r5, r6
 8004390:	d11a      	bne.n	80043c8 <_printf_common+0xc8>
 8004392:	2000      	movs	r0, #0
 8004394:	e008      	b.n	80043a8 <_printf_common+0xa8>
 8004396:	2301      	movs	r3, #1
 8004398:	4652      	mov	r2, sl
 800439a:	4649      	mov	r1, r9
 800439c:	4638      	mov	r0, r7
 800439e:	47c0      	blx	r8
 80043a0:	3001      	adds	r0, #1
 80043a2:	d103      	bne.n	80043ac <_printf_common+0xac>
 80043a4:	f04f 30ff 	mov.w	r0, #4294967295
 80043a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ac:	3501      	adds	r5, #1
 80043ae:	e7c6      	b.n	800433e <_printf_common+0x3e>
 80043b0:	18e1      	adds	r1, r4, r3
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	2030      	movs	r0, #48	; 0x30
 80043b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043ba:	4422      	add	r2, r4
 80043bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043c4:	3302      	adds	r3, #2
 80043c6:	e7c7      	b.n	8004358 <_printf_common+0x58>
 80043c8:	2301      	movs	r3, #1
 80043ca:	4622      	mov	r2, r4
 80043cc:	4649      	mov	r1, r9
 80043ce:	4638      	mov	r0, r7
 80043d0:	47c0      	blx	r8
 80043d2:	3001      	adds	r0, #1
 80043d4:	d0e6      	beq.n	80043a4 <_printf_common+0xa4>
 80043d6:	3601      	adds	r6, #1
 80043d8:	e7d9      	b.n	800438e <_printf_common+0x8e>
	...

080043dc <_printf_i>:
 80043dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043e0:	7e0f      	ldrb	r7, [r1, #24]
 80043e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043e4:	2f78      	cmp	r7, #120	; 0x78
 80043e6:	4691      	mov	r9, r2
 80043e8:	4680      	mov	r8, r0
 80043ea:	460c      	mov	r4, r1
 80043ec:	469a      	mov	sl, r3
 80043ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043f2:	d807      	bhi.n	8004404 <_printf_i+0x28>
 80043f4:	2f62      	cmp	r7, #98	; 0x62
 80043f6:	d80a      	bhi.n	800440e <_printf_i+0x32>
 80043f8:	2f00      	cmp	r7, #0
 80043fa:	f000 80d4 	beq.w	80045a6 <_printf_i+0x1ca>
 80043fe:	2f58      	cmp	r7, #88	; 0x58
 8004400:	f000 80c0 	beq.w	8004584 <_printf_i+0x1a8>
 8004404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004408:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800440c:	e03a      	b.n	8004484 <_printf_i+0xa8>
 800440e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004412:	2b15      	cmp	r3, #21
 8004414:	d8f6      	bhi.n	8004404 <_printf_i+0x28>
 8004416:	a101      	add	r1, pc, #4	; (adr r1, 800441c <_printf_i+0x40>)
 8004418:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800441c:	08004475 	.word	0x08004475
 8004420:	08004489 	.word	0x08004489
 8004424:	08004405 	.word	0x08004405
 8004428:	08004405 	.word	0x08004405
 800442c:	08004405 	.word	0x08004405
 8004430:	08004405 	.word	0x08004405
 8004434:	08004489 	.word	0x08004489
 8004438:	08004405 	.word	0x08004405
 800443c:	08004405 	.word	0x08004405
 8004440:	08004405 	.word	0x08004405
 8004444:	08004405 	.word	0x08004405
 8004448:	0800458d 	.word	0x0800458d
 800444c:	080044b5 	.word	0x080044b5
 8004450:	08004547 	.word	0x08004547
 8004454:	08004405 	.word	0x08004405
 8004458:	08004405 	.word	0x08004405
 800445c:	080045af 	.word	0x080045af
 8004460:	08004405 	.word	0x08004405
 8004464:	080044b5 	.word	0x080044b5
 8004468:	08004405 	.word	0x08004405
 800446c:	08004405 	.word	0x08004405
 8004470:	0800454f 	.word	0x0800454f
 8004474:	682b      	ldr	r3, [r5, #0]
 8004476:	1d1a      	adds	r2, r3, #4
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	602a      	str	r2, [r5, #0]
 800447c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004480:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004484:	2301      	movs	r3, #1
 8004486:	e09f      	b.n	80045c8 <_printf_i+0x1ec>
 8004488:	6820      	ldr	r0, [r4, #0]
 800448a:	682b      	ldr	r3, [r5, #0]
 800448c:	0607      	lsls	r7, r0, #24
 800448e:	f103 0104 	add.w	r1, r3, #4
 8004492:	6029      	str	r1, [r5, #0]
 8004494:	d501      	bpl.n	800449a <_printf_i+0xbe>
 8004496:	681e      	ldr	r6, [r3, #0]
 8004498:	e003      	b.n	80044a2 <_printf_i+0xc6>
 800449a:	0646      	lsls	r6, r0, #25
 800449c:	d5fb      	bpl.n	8004496 <_printf_i+0xba>
 800449e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80044a2:	2e00      	cmp	r6, #0
 80044a4:	da03      	bge.n	80044ae <_printf_i+0xd2>
 80044a6:	232d      	movs	r3, #45	; 0x2d
 80044a8:	4276      	negs	r6, r6
 80044aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ae:	485a      	ldr	r0, [pc, #360]	; (8004618 <_printf_i+0x23c>)
 80044b0:	230a      	movs	r3, #10
 80044b2:	e012      	b.n	80044da <_printf_i+0xfe>
 80044b4:	682b      	ldr	r3, [r5, #0]
 80044b6:	6820      	ldr	r0, [r4, #0]
 80044b8:	1d19      	adds	r1, r3, #4
 80044ba:	6029      	str	r1, [r5, #0]
 80044bc:	0605      	lsls	r5, r0, #24
 80044be:	d501      	bpl.n	80044c4 <_printf_i+0xe8>
 80044c0:	681e      	ldr	r6, [r3, #0]
 80044c2:	e002      	b.n	80044ca <_printf_i+0xee>
 80044c4:	0641      	lsls	r1, r0, #25
 80044c6:	d5fb      	bpl.n	80044c0 <_printf_i+0xe4>
 80044c8:	881e      	ldrh	r6, [r3, #0]
 80044ca:	4853      	ldr	r0, [pc, #332]	; (8004618 <_printf_i+0x23c>)
 80044cc:	2f6f      	cmp	r7, #111	; 0x6f
 80044ce:	bf0c      	ite	eq
 80044d0:	2308      	moveq	r3, #8
 80044d2:	230a      	movne	r3, #10
 80044d4:	2100      	movs	r1, #0
 80044d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044da:	6865      	ldr	r5, [r4, #4]
 80044dc:	60a5      	str	r5, [r4, #8]
 80044de:	2d00      	cmp	r5, #0
 80044e0:	bfa2      	ittt	ge
 80044e2:	6821      	ldrge	r1, [r4, #0]
 80044e4:	f021 0104 	bicge.w	r1, r1, #4
 80044e8:	6021      	strge	r1, [r4, #0]
 80044ea:	b90e      	cbnz	r6, 80044f0 <_printf_i+0x114>
 80044ec:	2d00      	cmp	r5, #0
 80044ee:	d04b      	beq.n	8004588 <_printf_i+0x1ac>
 80044f0:	4615      	mov	r5, r2
 80044f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80044f6:	fb03 6711 	mls	r7, r3, r1, r6
 80044fa:	5dc7      	ldrb	r7, [r0, r7]
 80044fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004500:	4637      	mov	r7, r6
 8004502:	42bb      	cmp	r3, r7
 8004504:	460e      	mov	r6, r1
 8004506:	d9f4      	bls.n	80044f2 <_printf_i+0x116>
 8004508:	2b08      	cmp	r3, #8
 800450a:	d10b      	bne.n	8004524 <_printf_i+0x148>
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	07de      	lsls	r6, r3, #31
 8004510:	d508      	bpl.n	8004524 <_printf_i+0x148>
 8004512:	6923      	ldr	r3, [r4, #16]
 8004514:	6861      	ldr	r1, [r4, #4]
 8004516:	4299      	cmp	r1, r3
 8004518:	bfde      	ittt	le
 800451a:	2330      	movle	r3, #48	; 0x30
 800451c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004520:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004524:	1b52      	subs	r2, r2, r5
 8004526:	6122      	str	r2, [r4, #16]
 8004528:	f8cd a000 	str.w	sl, [sp]
 800452c:	464b      	mov	r3, r9
 800452e:	aa03      	add	r2, sp, #12
 8004530:	4621      	mov	r1, r4
 8004532:	4640      	mov	r0, r8
 8004534:	f7ff fee4 	bl	8004300 <_printf_common>
 8004538:	3001      	adds	r0, #1
 800453a:	d14a      	bne.n	80045d2 <_printf_i+0x1f6>
 800453c:	f04f 30ff 	mov.w	r0, #4294967295
 8004540:	b004      	add	sp, #16
 8004542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	f043 0320 	orr.w	r3, r3, #32
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	4833      	ldr	r0, [pc, #204]	; (800461c <_printf_i+0x240>)
 8004550:	2778      	movs	r7, #120	; 0x78
 8004552:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	6829      	ldr	r1, [r5, #0]
 800455a:	061f      	lsls	r7, r3, #24
 800455c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004560:	d402      	bmi.n	8004568 <_printf_i+0x18c>
 8004562:	065f      	lsls	r7, r3, #25
 8004564:	bf48      	it	mi
 8004566:	b2b6      	uxthmi	r6, r6
 8004568:	07df      	lsls	r7, r3, #31
 800456a:	bf48      	it	mi
 800456c:	f043 0320 	orrmi.w	r3, r3, #32
 8004570:	6029      	str	r1, [r5, #0]
 8004572:	bf48      	it	mi
 8004574:	6023      	strmi	r3, [r4, #0]
 8004576:	b91e      	cbnz	r6, 8004580 <_printf_i+0x1a4>
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	f023 0320 	bic.w	r3, r3, #32
 800457e:	6023      	str	r3, [r4, #0]
 8004580:	2310      	movs	r3, #16
 8004582:	e7a7      	b.n	80044d4 <_printf_i+0xf8>
 8004584:	4824      	ldr	r0, [pc, #144]	; (8004618 <_printf_i+0x23c>)
 8004586:	e7e4      	b.n	8004552 <_printf_i+0x176>
 8004588:	4615      	mov	r5, r2
 800458a:	e7bd      	b.n	8004508 <_printf_i+0x12c>
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	6826      	ldr	r6, [r4, #0]
 8004590:	6961      	ldr	r1, [r4, #20]
 8004592:	1d18      	adds	r0, r3, #4
 8004594:	6028      	str	r0, [r5, #0]
 8004596:	0635      	lsls	r5, r6, #24
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	d501      	bpl.n	80045a0 <_printf_i+0x1c4>
 800459c:	6019      	str	r1, [r3, #0]
 800459e:	e002      	b.n	80045a6 <_printf_i+0x1ca>
 80045a0:	0670      	lsls	r0, r6, #25
 80045a2:	d5fb      	bpl.n	800459c <_printf_i+0x1c0>
 80045a4:	8019      	strh	r1, [r3, #0]
 80045a6:	2300      	movs	r3, #0
 80045a8:	6123      	str	r3, [r4, #16]
 80045aa:	4615      	mov	r5, r2
 80045ac:	e7bc      	b.n	8004528 <_printf_i+0x14c>
 80045ae:	682b      	ldr	r3, [r5, #0]
 80045b0:	1d1a      	adds	r2, r3, #4
 80045b2:	602a      	str	r2, [r5, #0]
 80045b4:	681d      	ldr	r5, [r3, #0]
 80045b6:	6862      	ldr	r2, [r4, #4]
 80045b8:	2100      	movs	r1, #0
 80045ba:	4628      	mov	r0, r5
 80045bc:	f7fb fe28 	bl	8000210 <memchr>
 80045c0:	b108      	cbz	r0, 80045c6 <_printf_i+0x1ea>
 80045c2:	1b40      	subs	r0, r0, r5
 80045c4:	6060      	str	r0, [r4, #4]
 80045c6:	6863      	ldr	r3, [r4, #4]
 80045c8:	6123      	str	r3, [r4, #16]
 80045ca:	2300      	movs	r3, #0
 80045cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045d0:	e7aa      	b.n	8004528 <_printf_i+0x14c>
 80045d2:	6923      	ldr	r3, [r4, #16]
 80045d4:	462a      	mov	r2, r5
 80045d6:	4649      	mov	r1, r9
 80045d8:	4640      	mov	r0, r8
 80045da:	47d0      	blx	sl
 80045dc:	3001      	adds	r0, #1
 80045de:	d0ad      	beq.n	800453c <_printf_i+0x160>
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	079b      	lsls	r3, r3, #30
 80045e4:	d413      	bmi.n	800460e <_printf_i+0x232>
 80045e6:	68e0      	ldr	r0, [r4, #12]
 80045e8:	9b03      	ldr	r3, [sp, #12]
 80045ea:	4298      	cmp	r0, r3
 80045ec:	bfb8      	it	lt
 80045ee:	4618      	movlt	r0, r3
 80045f0:	e7a6      	b.n	8004540 <_printf_i+0x164>
 80045f2:	2301      	movs	r3, #1
 80045f4:	4632      	mov	r2, r6
 80045f6:	4649      	mov	r1, r9
 80045f8:	4640      	mov	r0, r8
 80045fa:	47d0      	blx	sl
 80045fc:	3001      	adds	r0, #1
 80045fe:	d09d      	beq.n	800453c <_printf_i+0x160>
 8004600:	3501      	adds	r5, #1
 8004602:	68e3      	ldr	r3, [r4, #12]
 8004604:	9903      	ldr	r1, [sp, #12]
 8004606:	1a5b      	subs	r3, r3, r1
 8004608:	42ab      	cmp	r3, r5
 800460a:	dcf2      	bgt.n	80045f2 <_printf_i+0x216>
 800460c:	e7eb      	b.n	80045e6 <_printf_i+0x20a>
 800460e:	2500      	movs	r5, #0
 8004610:	f104 0619 	add.w	r6, r4, #25
 8004614:	e7f5      	b.n	8004602 <_printf_i+0x226>
 8004616:	bf00      	nop
 8004618:	08006201 	.word	0x08006201
 800461c:	08006212 	.word	0x08006212

08004620 <memmove>:
 8004620:	4288      	cmp	r0, r1
 8004622:	b510      	push	{r4, lr}
 8004624:	eb01 0402 	add.w	r4, r1, r2
 8004628:	d902      	bls.n	8004630 <memmove+0x10>
 800462a:	4284      	cmp	r4, r0
 800462c:	4623      	mov	r3, r4
 800462e:	d807      	bhi.n	8004640 <memmove+0x20>
 8004630:	1e43      	subs	r3, r0, #1
 8004632:	42a1      	cmp	r1, r4
 8004634:	d008      	beq.n	8004648 <memmove+0x28>
 8004636:	f811 2b01 	ldrb.w	r2, [r1], #1
 800463a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800463e:	e7f8      	b.n	8004632 <memmove+0x12>
 8004640:	4402      	add	r2, r0
 8004642:	4601      	mov	r1, r0
 8004644:	428a      	cmp	r2, r1
 8004646:	d100      	bne.n	800464a <memmove+0x2a>
 8004648:	bd10      	pop	{r4, pc}
 800464a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800464e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004652:	e7f7      	b.n	8004644 <memmove+0x24>

08004654 <_sbrk_r>:
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	4d06      	ldr	r5, [pc, #24]	; (8004670 <_sbrk_r+0x1c>)
 8004658:	2300      	movs	r3, #0
 800465a:	4604      	mov	r4, r0
 800465c:	4608      	mov	r0, r1
 800465e:	602b      	str	r3, [r5, #0]
 8004660:	f7fd faa6 	bl	8001bb0 <_sbrk>
 8004664:	1c43      	adds	r3, r0, #1
 8004666:	d102      	bne.n	800466e <_sbrk_r+0x1a>
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	b103      	cbz	r3, 800466e <_sbrk_r+0x1a>
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	bd38      	pop	{r3, r4, r5, pc}
 8004670:	200002a0 	.word	0x200002a0

08004674 <memcpy>:
 8004674:	440a      	add	r2, r1
 8004676:	4291      	cmp	r1, r2
 8004678:	f100 33ff 	add.w	r3, r0, #4294967295
 800467c:	d100      	bne.n	8004680 <memcpy+0xc>
 800467e:	4770      	bx	lr
 8004680:	b510      	push	{r4, lr}
 8004682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004686:	f803 4f01 	strb.w	r4, [r3, #1]!
 800468a:	4291      	cmp	r1, r2
 800468c:	d1f9      	bne.n	8004682 <memcpy+0xe>
 800468e:	bd10      	pop	{r4, pc}

08004690 <_realloc_r>:
 8004690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004694:	4680      	mov	r8, r0
 8004696:	4614      	mov	r4, r2
 8004698:	460e      	mov	r6, r1
 800469a:	b921      	cbnz	r1, 80046a6 <_realloc_r+0x16>
 800469c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046a0:	4611      	mov	r1, r2
 80046a2:	f7ff bc49 	b.w	8003f38 <_malloc_r>
 80046a6:	b92a      	cbnz	r2, 80046b4 <_realloc_r+0x24>
 80046a8:	f7ff fbda 	bl	8003e60 <_free_r>
 80046ac:	4625      	mov	r5, r4
 80046ae:	4628      	mov	r0, r5
 80046b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046b4:	f000 f81b 	bl	80046ee <_malloc_usable_size_r>
 80046b8:	4284      	cmp	r4, r0
 80046ba:	4607      	mov	r7, r0
 80046bc:	d802      	bhi.n	80046c4 <_realloc_r+0x34>
 80046be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80046c2:	d812      	bhi.n	80046ea <_realloc_r+0x5a>
 80046c4:	4621      	mov	r1, r4
 80046c6:	4640      	mov	r0, r8
 80046c8:	f7ff fc36 	bl	8003f38 <_malloc_r>
 80046cc:	4605      	mov	r5, r0
 80046ce:	2800      	cmp	r0, #0
 80046d0:	d0ed      	beq.n	80046ae <_realloc_r+0x1e>
 80046d2:	42bc      	cmp	r4, r7
 80046d4:	4622      	mov	r2, r4
 80046d6:	4631      	mov	r1, r6
 80046d8:	bf28      	it	cs
 80046da:	463a      	movcs	r2, r7
 80046dc:	f7ff ffca 	bl	8004674 <memcpy>
 80046e0:	4631      	mov	r1, r6
 80046e2:	4640      	mov	r0, r8
 80046e4:	f7ff fbbc 	bl	8003e60 <_free_r>
 80046e8:	e7e1      	b.n	80046ae <_realloc_r+0x1e>
 80046ea:	4635      	mov	r5, r6
 80046ec:	e7df      	b.n	80046ae <_realloc_r+0x1e>

080046ee <_malloc_usable_size_r>:
 80046ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046f2:	1f18      	subs	r0, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	bfbc      	itt	lt
 80046f8:	580b      	ldrlt	r3, [r1, r0]
 80046fa:	18c0      	addlt	r0, r0, r3
 80046fc:	4770      	bx	lr
	...

08004700 <_init>:
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004702:	bf00      	nop
 8004704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004706:	bc08      	pop	{r3}
 8004708:	469e      	mov	lr, r3
 800470a:	4770      	bx	lr

0800470c <_fini>:
 800470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470e:	bf00      	nop
 8004710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004712:	bc08      	pop	{r3}
 8004714:	469e      	mov	lr, r3
 8004716:	4770      	bx	lr
