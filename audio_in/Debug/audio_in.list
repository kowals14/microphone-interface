
audio_in.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000843c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08008604  08008604  00018604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008624  08008624  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08008624  08008624  00018624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800862c  0800862c  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800862c  0800862c  0001862c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008630  08008630  00018630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08008634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  20000040  08008674  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  08008674  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001beee  00000000  00000000  000200b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003797  00000000  00000000  0003bfa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001900  00000000  00000000  0003f738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001396  00000000  00000000  00041038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028150  00000000  00000000  000423ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dcfd  00000000  00000000  0006a51e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9b8b  00000000  00000000  0008821b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ad8  00000000  00000000  00181da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00188880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000040 	.word	0x20000040
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080085ec 	.word	0x080085ec

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000044 	.word	0x20000044
 8000204:	080085ec 	.word	0x080085ec

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	f5ad 6df1 	sub.w	sp, sp, #1928	; 0x788
 800050a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f003 f8b0 	bl	8003670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f822 	bl	8000558 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000514:	f000 f88c 	bl	8000630 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 fada 	bl	8000ad0 <MX_GPIO_Init>
  MX_DMA_Init();
 800051c:	f000 fa6c 	bl	80009f8 <MX_DMA_Init>
  MX_FMC_Init();
 8000520:	f000 fa88 	bl	8000a34 <MX_FMC_Init>
  MX_USART1_UART_Init();
 8000524:	f000 fa38 	bl	8000998 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 8000528:	f000 f8aa 	bl	8000680 <MX_DMA2D_Init>
  MX_SAI2_Init();
 800052c:	f000 f98c 	bl	8000848 <MX_SAI2_Init>
  MX_LTDC_Init();
 8000530:	f000 f8d8 	bl	80006e4 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
  BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_DIGITAL_MICROPHONE_2, OUTPUT_DEVICE_AUTO, AUDIO_FREQUENCY_48K, 0 ,0);
 8000534:	2300      	movs	r3, #0
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	2300      	movs	r3, #0
 800053a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800053e:	2104      	movs	r1, #4
 8000540:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000544:	f002 fe5a 	bl	80031fc <BSP_AUDIO_IN_OUT_Init>
  uint16_t buf[BUFF_SIZE];
  BSP_AUDIO_IN_Record(buf, BUFF_SIZE);
 8000548:	463b      	mov	r3, r7
 800054a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800054e:	4618      	mov	r0, r3
 8000550:	f002 fece 	bl	80032f0 <BSP_AUDIO_IN_Record>
  //BSP_AUDIO_OUT_Play(buf, BUFF_SIZE*2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000554:	e7fe      	b.n	8000554 <main+0x50>
	...

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f008 f814 	bl	8008594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	4b2a      	ldr	r3, [pc, #168]	; (8000628 <SystemClock_Config+0xd0>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a29      	ldr	r2, [pc, #164]	; (8000628 <SystemClock_Config+0xd0>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b27      	ldr	r3, [pc, #156]	; (8000628 <SystemClock_Config+0xd0>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000594:	4b25      	ldr	r3, [pc, #148]	; (800062c <SystemClock_Config+0xd4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a24      	ldr	r2, [pc, #144]	; (800062c <SystemClock_Config+0xd4>)
 800059a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <SystemClock_Config+0xd4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ac:	2302      	movs	r3, #2
 80005ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b4:	2310      	movs	r3, #16
 80005b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b8:	2302      	movs	r3, #2
 80005ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005bc:	2300      	movs	r3, #0
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c0:	2308      	movs	r3, #8
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 80005c4:	23d2      	movs	r3, #210	; 0xd2
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	4618      	mov	r0, r3
 80005d6:	f005 f98b 	bl	80058f0 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005e0:	f000 fb18 	bl	8000c14 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005e4:	f005 f934 	bl	8005850 <HAL_PWREx_EnableOverDrive>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ee:	f000 fb11 	bl	8000c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2302      	movs	r3, #2
 80005f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	2106      	movs	r1, #6
 8000610:	4618      	mov	r0, r3
 8000612:	f005 fc11 	bl	8005e38 <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800061c:	f000 fafa 	bl	8000c14 <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3750      	adds	r7, #80	; 0x50
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b0a2      	sub	sp, #136	; 0x88
 8000634:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2284      	movs	r2, #132	; 0x84
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f007 ffa9 	bl	8008594 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <PeriphCommonClock_Config+0x4c>)
 8000644:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000646:	2332      	movs	r3, #50	; 0x32
 8000648:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800064a:	2302      	movs	r3, #2
 800064c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800064e:	2302      	movs	r3, #2
 8000650:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000652:	2300      	movs	r3, #0
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800065a:	2300      	movs	r3, #0
 800065c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800065e:	2300      	movs	r3, #0
 8000660:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	4618      	mov	r0, r3
 8000666:	f005 fdff 	bl	8006268 <HAL_RCCEx_PeriphCLKConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <PeriphCommonClock_Config+0x44>
  {
    Error_Handler();
 8000670:	f000 fad0 	bl	8000c14 <Error_Handler>
  }
}
 8000674:	bf00      	nop
 8000676:	3788      	adds	r7, #136	; 0x88
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	00100008 	.word	0x00100008

08000680 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <MX_DMA2D_Init+0x5c>)
 8000686:	4a16      	ldr	r2, [pc, #88]	; (80006e0 <MX_DMA2D_Init+0x60>)
 8000688:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_DMA2D_Init+0x5c>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_DMA2D_Init+0x5c>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_DMA2D_Init+0x5c>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_DMA2D_Init+0x5c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_DMA2D_Init+0x5c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_DMA2D_Init+0x5c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_DMA2D_Init+0x5c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006b4:	4809      	ldr	r0, [pc, #36]	; (80006dc <MX_DMA2D_Init+0x5c>)
 80006b6:	f003 fce5 	bl	8004084 <HAL_DMA2D_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006c0:	f000 faa8 	bl	8000c14 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006c4:	2101      	movs	r1, #1
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_DMA2D_Init+0x5c>)
 80006c8:	f003 fd26 	bl	8004118 <HAL_DMA2D_ConfigLayer>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006d2:	f000 fa9f 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000005c 	.word	0x2000005c
 80006e0:	4002b000 	.word	0x4002b000

080006e4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b09a      	sub	sp, #104	; 0x68
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80006ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006ee:	2234      	movs	r2, #52	; 0x34
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f007 ff4e 	bl	8008594 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80006f8:	463b      	mov	r3, r7
 80006fa:	2234      	movs	r2, #52	; 0x34
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f007 ff48 	bl	8008594 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000704:	4b4e      	ldr	r3, [pc, #312]	; (8000840 <MX_LTDC_Init+0x15c>)
 8000706:	4a4f      	ldr	r2, [pc, #316]	; (8000844 <MX_LTDC_Init+0x160>)
 8000708:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800070a:	4b4d      	ldr	r3, [pc, #308]	; (8000840 <MX_LTDC_Init+0x15c>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000710:	4b4b      	ldr	r3, [pc, #300]	; (8000840 <MX_LTDC_Init+0x15c>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000716:	4b4a      	ldr	r3, [pc, #296]	; (8000840 <MX_LTDC_Init+0x15c>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800071c:	4b48      	ldr	r3, [pc, #288]	; (8000840 <MX_LTDC_Init+0x15c>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000722:	4b47      	ldr	r3, [pc, #284]	; (8000840 <MX_LTDC_Init+0x15c>)
 8000724:	2207      	movs	r2, #7
 8000726:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000728:	4b45      	ldr	r3, [pc, #276]	; (8000840 <MX_LTDC_Init+0x15c>)
 800072a:	2203      	movs	r2, #3
 800072c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800072e:	4b44      	ldr	r3, [pc, #272]	; (8000840 <MX_LTDC_Init+0x15c>)
 8000730:	220e      	movs	r2, #14
 8000732:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000734:	4b42      	ldr	r3, [pc, #264]	; (8000840 <MX_LTDC_Init+0x15c>)
 8000736:	2205      	movs	r2, #5
 8000738:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800073a:	4b41      	ldr	r3, [pc, #260]	; (8000840 <MX_LTDC_Init+0x15c>)
 800073c:	f240 228e 	movw	r2, #654	; 0x28e
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000742:	4b3f      	ldr	r3, [pc, #252]	; (8000840 <MX_LTDC_Init+0x15c>)
 8000744:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000748:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <MX_LTDC_Init+0x15c>)
 800074c:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000752:	4b3b      	ldr	r3, [pc, #236]	; (8000840 <MX_LTDC_Init+0x15c>)
 8000754:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000758:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800075a:	4b39      	ldr	r3, [pc, #228]	; (8000840 <MX_LTDC_Init+0x15c>)
 800075c:	2200      	movs	r2, #0
 800075e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000762:	4b37      	ldr	r3, [pc, #220]	; (8000840 <MX_LTDC_Init+0x15c>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800076a:	4b35      	ldr	r3, [pc, #212]	; (8000840 <MX_LTDC_Init+0x15c>)
 800076c:	2200      	movs	r2, #0
 800076e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000772:	4833      	ldr	r0, [pc, #204]	; (8000840 <MX_LTDC_Init+0x15c>)
 8000774:	f004 fdc4 	bl	8005300 <HAL_LTDC_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800077e:	f000 fa49 	bl	8000c14 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000792:	2300      	movs	r3, #0
 8000794:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800079e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a2:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80007a4:	2305      	movs	r3, #5
 80007a6:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80007c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007ca:	2200      	movs	r2, #0
 80007cc:	4619      	mov	r1, r3
 80007ce:	481c      	ldr	r0, [pc, #112]	; (8000840 <MX_LTDC_Init+0x15c>)
 80007d0:	f004 fe66 	bl	80054a0 <HAL_LTDC_ConfigLayer>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80007da:	f000 fa1b 	bl	8000c14 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80007fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fe:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000800:	2305      	movs	r3, #5
 8000802:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000822:	463b      	mov	r3, r7
 8000824:	2201      	movs	r2, #1
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_LTDC_Init+0x15c>)
 800082a:	f004 fe39 	bl	80054a0 <HAL_LTDC_ConfigLayer>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000834:	f000 f9ee 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	3768      	adds	r7, #104	; 0x68
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	2000009c 	.word	0x2000009c
 8000844:	40016800 	.word	0x40016800

08000848 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800084c:	4b4e      	ldr	r3, [pc, #312]	; (8000988 <MX_SAI2_Init+0x140>)
 800084e:	4a4f      	ldr	r2, [pc, #316]	; (800098c <MX_SAI2_Init+0x144>)
 8000850:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000852:	4b4d      	ldr	r3, [pc, #308]	; (8000988 <MX_SAI2_Init+0x140>)
 8000854:	2200      	movs	r2, #0
 8000856:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000858:	4b4b      	ldr	r3, [pc, #300]	; (8000988 <MX_SAI2_Init+0x140>)
 800085a:	2200      	movs	r2, #0
 800085c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800085e:	4b4a      	ldr	r3, [pc, #296]	; (8000988 <MX_SAI2_Init+0x140>)
 8000860:	2240      	movs	r2, #64	; 0x40
 8000862:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000864:	4b48      	ldr	r3, [pc, #288]	; (8000988 <MX_SAI2_Init+0x140>)
 8000866:	2200      	movs	r2, #0
 8000868:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800086a:	4b47      	ldr	r3, [pc, #284]	; (8000988 <MX_SAI2_Init+0x140>)
 800086c:	2200      	movs	r2, #0
 800086e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000870:	4b45      	ldr	r3, [pc, #276]	; (8000988 <MX_SAI2_Init+0x140>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000876:	4b44      	ldr	r3, [pc, #272]	; (8000988 <MX_SAI2_Init+0x140>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800087c:	4b42      	ldr	r3, [pc, #264]	; (8000988 <MX_SAI2_Init+0x140>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000882:	4b41      	ldr	r3, [pc, #260]	; (8000988 <MX_SAI2_Init+0x140>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000888:	4b3f      	ldr	r3, [pc, #252]	; (8000988 <MX_SAI2_Init+0x140>)
 800088a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800088e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000890:	4b3d      	ldr	r3, [pc, #244]	; (8000988 <MX_SAI2_Init+0x140>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000896:	4b3c      	ldr	r3, [pc, #240]	; (8000988 <MX_SAI2_Init+0x140>)
 8000898:	2200      	movs	r2, #0
 800089a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800089c:	4b3a      	ldr	r3, [pc, #232]	; (8000988 <MX_SAI2_Init+0x140>)
 800089e:	2200      	movs	r2, #0
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80008a2:	4b39      	ldr	r3, [pc, #228]	; (8000988 <MX_SAI2_Init+0x140>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80008a8:	4b37      	ldr	r3, [pc, #220]	; (8000988 <MX_SAI2_Init+0x140>)
 80008aa:	2208      	movs	r2, #8
 80008ac:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80008ae:	4b36      	ldr	r3, [pc, #216]	; (8000988 <MX_SAI2_Init+0x140>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80008b4:	4b34      	ldr	r3, [pc, #208]	; (8000988 <MX_SAI2_Init+0x140>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80008ba:	4b33      	ldr	r3, [pc, #204]	; (8000988 <MX_SAI2_Init+0x140>)
 80008bc:	2200      	movs	r2, #0
 80008be:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80008c0:	4b31      	ldr	r3, [pc, #196]	; (8000988 <MX_SAI2_Init+0x140>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80008c6:	4b30      	ldr	r3, [pc, #192]	; (8000988 <MX_SAI2_Init+0x140>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80008cc:	4b2e      	ldr	r3, [pc, #184]	; (8000988 <MX_SAI2_Init+0x140>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80008d2:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <MX_SAI2_Init+0x140>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80008d8:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <MX_SAI2_Init+0x140>)
 80008da:	2200      	movs	r2, #0
 80008dc:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80008de:	482a      	ldr	r0, [pc, #168]	; (8000988 <MX_SAI2_Init+0x140>)
 80008e0:	f006 fafe 	bl	8006ee0 <HAL_SAI_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_SAI2_Init+0xa6>
  {
    Error_Handler();
 80008ea:	f000 f993 	bl	8000c14 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80008ee:	4b28      	ldr	r3, [pc, #160]	; (8000990 <MX_SAI2_Init+0x148>)
 80008f0:	4a28      	ldr	r2, [pc, #160]	; (8000994 <MX_SAI2_Init+0x14c>)
 80008f2:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80008f4:	4b26      	ldr	r3, [pc, #152]	; (8000990 <MX_SAI2_Init+0x148>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80008fa:	4b25      	ldr	r3, [pc, #148]	; (8000990 <MX_SAI2_Init+0x148>)
 80008fc:	2203      	movs	r2, #3
 80008fe:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000900:	4b23      	ldr	r3, [pc, #140]	; (8000990 <MX_SAI2_Init+0x148>)
 8000902:	2240      	movs	r2, #64	; 0x40
 8000904:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000906:	4b22      	ldr	r3, [pc, #136]	; (8000990 <MX_SAI2_Init+0x148>)
 8000908:	2200      	movs	r2, #0
 800090a:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800090c:	4b20      	ldr	r3, [pc, #128]	; (8000990 <MX_SAI2_Init+0x148>)
 800090e:	2200      	movs	r2, #0
 8000910:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000912:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <MX_SAI2_Init+0x148>)
 8000914:	2201      	movs	r2, #1
 8000916:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000918:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <MX_SAI2_Init+0x148>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <MX_SAI2_Init+0x148>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000924:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_SAI2_Init+0x148>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <MX_SAI2_Init+0x148>)
 800092c:	2200      	movs	r2, #0
 800092e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_SAI2_Init+0x148>)
 8000932:	2200      	movs	r2, #0
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_SAI2_Init+0x148>)
 8000938:	2200      	movs	r2, #0
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_SAI2_Init+0x148>)
 800093e:	2208      	movs	r2, #8
 8000940:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <MX_SAI2_Init+0x148>)
 8000944:	2201      	movs	r2, #1
 8000946:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_SAI2_Init+0x148>)
 800094a:	2200      	movs	r2, #0
 800094c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_SAI2_Init+0x148>)
 8000950:	2200      	movs	r2, #0
 8000952:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_SAI2_Init+0x148>)
 8000956:	2200      	movs	r2, #0
 8000958:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <MX_SAI2_Init+0x148>)
 800095c:	2200      	movs	r2, #0
 800095e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_SAI2_Init+0x148>)
 8000962:	2200      	movs	r2, #0
 8000964:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <MX_SAI2_Init+0x148>)
 8000968:	2201      	movs	r2, #1
 800096a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_SAI2_Init+0x148>)
 800096e:	2200      	movs	r2, #0
 8000970:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000972:	4807      	ldr	r0, [pc, #28]	; (8000990 <MX_SAI2_Init+0x148>)
 8000974:	f006 fab4 	bl	8006ee0 <HAL_SAI_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_SAI2_Init+0x13a>
  {
    Error_Handler();
 800097e:	f000 f949 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000144 	.word	0x20000144
 800098c:	40015c04 	.word	0x40015c04
 8000990:	200001c8 	.word	0x200001c8
 8000994:	40015c24 	.word	0x40015c24

08000998 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 800099e:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <MX_USART1_UART_Init+0x5c>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009dc:	f007 f8c2 	bl	8007b64 <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009e6:	f000 f915 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200002ac 	.word	0x200002ac
 80009f4:	40011000 	.word	0x40011000

080009f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_DMA_Init+0x38>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <MX_DMA_Init+0x38>)
 8000a04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_DMA_Init+0x38>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2045      	movs	r0, #69	; 0x45
 8000a1c:	f002 ff32 	bl	8003884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a20:	2045      	movs	r0, #69	; 0x45
 8000a22:	f002 ff4b 	bl	80038bc <HAL_NVIC_EnableIRQ>

}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
 8000a48:	615a      	str	r2, [r3, #20]
 8000a4a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <MX_FMC_Init+0x94>)
 8000a4e:	4a1f      	ldr	r2, [pc, #124]	; (8000acc <MX_FMC_Init+0x98>)
 8000a50:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000a52:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <MX_FMC_Init+0x94>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <MX_FMC_Init+0x94>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_FMC_Init+0x94>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8;
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <MX_FMC_Init+0x94>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a6a:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <MX_FMC_Init+0x94>)
 8000a6c:	2240      	movs	r2, #64	; 0x40
 8000a6e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <MX_FMC_Init+0x94>)
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_FMC_Init+0x94>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <MX_FMC_Init+0x94>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_FMC_Init+0x94>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_FMC_Init+0x94>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000a8e:	2310      	movs	r3, #16
 8000a90:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000a92:	2310      	movs	r3, #16
 8000a94:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000a96:	2310      	movs	r3, #16
 8000a98:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000a9a:	2310      	movs	r3, #16
 8000a9c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000a9e:	2310      	movs	r3, #16
 8000aa0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000aa2:	2310      	movs	r3, #16
 8000aa4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000aa6:	2310      	movs	r3, #16
 8000aa8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <MX_FMC_Init+0x94>)
 8000ab0:	f006 fd45 	bl	800753e <HAL_SDRAM_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000aba:	f000 f8ab 	bl	8000c14 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000abe:	bf00      	nop
 8000ac0:	3720      	adds	r7, #32
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000334 	.word	0x20000334
 8000acc:	a0000140 	.word	0xa0000140

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b08d      	sub	sp, #52	; 0x34
 8000ad4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad6:	4b45      	ldr	r3, [pc, #276]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a44      	ldr	r2, [pc, #272]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000adc:	f043 0310 	orr.w	r3, r3, #16
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b42      	ldr	r3, [pc, #264]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0310 	and.w	r3, r3, #16
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	4b3f      	ldr	r3, [pc, #252]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a3e      	ldr	r2, [pc, #248]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b3c      	ldr	r3, [pc, #240]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b06:	4b39      	ldr	r3, [pc, #228]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a38      	ldr	r2, [pc, #224]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b36      	ldr	r3, [pc, #216]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b1e:	4b33      	ldr	r3, [pc, #204]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a32      	ldr	r2, [pc, #200]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000b24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b30      	ldr	r3, [pc, #192]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b32:	623b      	str	r3, [r7, #32]
 8000b34:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b36:	4b2d      	ldr	r3, [pc, #180]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a2c      	ldr	r2, [pc, #176]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000b3c:	f043 0308 	orr.w	r3, r3, #8
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b2a      	ldr	r3, [pc, #168]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	61fb      	str	r3, [r7, #28]
 8000b4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b27      	ldr	r3, [pc, #156]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a26      	ldr	r2, [pc, #152]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b24      	ldr	r3, [pc, #144]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	61bb      	str	r3, [r7, #24]
 8000b64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a20      	ldr	r2, [pc, #128]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a1a      	ldr	r2, [pc, #104]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000b84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a14      	ldr	r2, [pc, #80]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000b9c:	f043 0320 	orr.w	r3, r3, #32
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0320 	and.w	r3, r3, #32
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_GPIO_Init+0x11c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bde:	bf00      	nop
 8000be0:	3734      	adds	r7, #52	; 0x34
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800

08000bf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d101      	bne.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c02:	f002 fd43 	bl	800368c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40010000 	.word	0x40010000

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <Error_Handler+0x8>
	...

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_MspInit+0x44>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <HAL_MspInit+0x44>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <HAL_MspInit+0x44>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_MspInit+0x44>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <HAL_MspInit+0x44>)
 8000c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c48:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_MspInit+0x44>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800

08000c68 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <HAL_DMA2D_MspInit+0x38>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d10b      	bne.n	8000c92 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <HAL_DMA2D_MspInit+0x3c>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a09      	ldr	r2, [pc, #36]	; (8000ca4 <HAL_DMA2D_MspInit+0x3c>)
 8000c80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <HAL_DMA2D_MspInit+0x3c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000c92:	bf00      	nop
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	4002b000 	.word	0x4002b000
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b092      	sub	sp, #72	; 0x48
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a8a      	ldr	r2, [pc, #552]	; (8000ef0 <HAL_LTDC_MspInit+0x248>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	f040 810e 	bne.w	8000ee8 <HAL_LTDC_MspInit+0x240>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000ccc:	4b89      	ldr	r3, [pc, #548]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd0:	4a88      	ldr	r2, [pc, #544]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000cd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cd6:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd8:	4b86      	ldr	r3, [pc, #536]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
 8000ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce4:	4b83      	ldr	r3, [pc, #524]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	4a82      	ldr	r2, [pc, #520]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000cea:	f043 0310 	orr.w	r3, r3, #16
 8000cee:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf0:	4b80      	ldr	r3, [pc, #512]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	f003 0310 	and.w	r3, r3, #16
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	4b7d      	ldr	r3, [pc, #500]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	4a7c      	ldr	r2, [pc, #496]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000d02:	f043 0302 	orr.w	r3, r3, #2
 8000d06:	6313      	str	r3, [r2, #48]	; 0x30
 8000d08:	4b7a      	ldr	r3, [pc, #488]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d14:	4b77      	ldr	r3, [pc, #476]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	4a76      	ldr	r2, [pc, #472]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d20:	4b74      	ldr	r3, [pc, #464]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d2c:	4b71      	ldr	r3, [pc, #452]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	4a70      	ldr	r2, [pc, #448]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d36:	6313      	str	r3, [r2, #48]	; 0x30
 8000d38:	4b6e      	ldr	r3, [pc, #440]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d40:	623b      	str	r3, [r7, #32]
 8000d42:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d44:	4b6b      	ldr	r3, [pc, #428]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	4a6a      	ldr	r2, [pc, #424]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000d4a:	f043 0308 	orr.w	r3, r3, #8
 8000d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d50:	4b68      	ldr	r3, [pc, #416]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	f003 0308 	and.w	r3, r3, #8
 8000d58:	61fb      	str	r3, [r7, #28]
 8000d5a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	4b65      	ldr	r3, [pc, #404]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	4a64      	ldr	r2, [pc, #400]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6313      	str	r3, [r2, #48]	; 0x30
 8000d68:	4b62      	ldr	r3, [pc, #392]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	61bb      	str	r3, [r7, #24]
 8000d72:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d74:	4b5f      	ldr	r3, [pc, #380]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	4a5e      	ldr	r2, [pc, #376]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d80:	4b5c      	ldr	r3, [pc, #368]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d8c:	4b59      	ldr	r3, [pc, #356]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	4a58      	ldr	r2, [pc, #352]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d96:	6313      	str	r3, [r2, #48]	; 0x30
 8000d98:	4b56      	ldr	r3, [pc, #344]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da4:	4b53      	ldr	r3, [pc, #332]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	4a52      	ldr	r2, [pc, #328]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dae:	6313      	str	r3, [r2, #48]	; 0x30
 8000db0:	4b50      	ldr	r3, [pc, #320]	; (8000ef4 <HAL_LTDC_MspInit+0x24c>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
    PH3     ------> LTDC_R1
    PG6     ------> LTDC_R7
    PA1     ------> LTDC_R2
    PH9     ------> LTDC_R3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000dbc:	2370      	movs	r3, #112	; 0x70
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dcc:	230e      	movs	r3, #14
 8000dce:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4848      	ldr	r0, [pc, #288]	; (8000ef8 <HAL_LTDC_MspInit+0x250>)
 8000dd8:	f003 fa30 	bl	800423c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ddc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000de0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dee:	230e      	movs	r3, #14
 8000df0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000df6:	4619      	mov	r1, r3
 8000df8:	4840      	ldr	r0, [pc, #256]	; (8000efc <HAL_LTDC_MspInit+0x254>)
 8000dfa:	f003 fa1f 	bl	800423c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_6;
 8000dfe:	f44f 5321 	mov.w	r3, #10304	; 0x2840
 8000e02:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e10:	230e      	movs	r3, #14
 8000e12:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4839      	ldr	r0, [pc, #228]	; (8000f00 <HAL_LTDC_MspInit+0x258>)
 8000e1c:	f003 fa0e 	bl	800423c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e32:	230e      	movs	r3, #14
 8000e34:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4831      	ldr	r0, [pc, #196]	; (8000f04 <HAL_LTDC_MspInit+0x25c>)
 8000e3e:	f003 f9fd 	bl	800423c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_3;
 8000e42:	2348      	movs	r3, #72	; 0x48
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e52:	230e      	movs	r3, #14
 8000e54:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	482a      	ldr	r0, [pc, #168]	; (8000f08 <HAL_LTDC_MspInit+0x260>)
 8000e5e:	f003 f9ed 	bl	800423c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_1;
 8000e62:	f641 1302 	movw	r3, #6402	; 0x1902
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e74:	230e      	movs	r3, #14
 8000e76:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4823      	ldr	r0, [pc, #140]	; (8000f0c <HAL_LTDC_MspInit+0x264>)
 8000e80:	f003 f9dc 	bl	800423c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_9
 8000e84:	f244 6313 	movw	r3, #17939	; 0x4613
 8000e88:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_0|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e96:	230e      	movs	r3, #14
 8000e98:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	481b      	ldr	r0, [pc, #108]	; (8000f10 <HAL_LTDC_MspInit+0x268>)
 8000ea2:	f003 f9cb 	bl	800423c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_4;
 8000ea6:	2390      	movs	r3, #144	; 0x90
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eb6:	230e      	movs	r3, #14
 8000eb8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000eba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4814      	ldr	r0, [pc, #80]	; (8000f14 <HAL_LTDC_MspInit+0x26c>)
 8000ec2:	f003 f9bb 	bl	800423c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3
 8000ec6:	f24e 2308 	movw	r3, #57864	; 0xe208
 8000eca:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ed8:	230e      	movs	r3, #14
 8000eda:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000edc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480d      	ldr	r0, [pc, #52]	; (8000f18 <HAL_LTDC_MspInit+0x270>)
 8000ee4:	f003 f9aa 	bl	800423c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000ee8:	bf00      	nop
 8000eea:	3748      	adds	r7, #72	; 0x48
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40016800 	.word	0x40016800
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40020400 	.word	0x40020400
 8000f00:	40021800 	.word	0x40021800
 8000f04:	40022400 	.word	0x40022400
 8000f08:	40020c00 	.word	0x40020c00
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	40022000 	.word	0x40022000
 8000f14:	40022800 	.word	0x40022800
 8000f18:	40021c00 	.word	0x40021c00

08000f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b0ac      	sub	sp, #176	; 0xb0
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f34:	f107 0318 	add.w	r3, r7, #24
 8000f38:	2284      	movs	r2, #132	; 0x84
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f007 fb29 	bl	8008594 <memset>
  if(huart->Instance==USART1)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a32      	ldr	r2, [pc, #200]	; (8001010 <HAL_UART_MspInit+0xf4>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d15c      	bne.n	8001006 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f4c:	2340      	movs	r3, #64	; 0x40
 8000f4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f50:	2300      	movs	r3, #0
 8000f52:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f54:	f107 0318 	add.w	r3, r7, #24
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f005 f985 	bl	8006268 <HAL_RCCEx_PeriphCLKConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f64:	f7ff fe56 	bl	8000c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f68:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <HAL_UART_MspInit+0xf8>)
 8000f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6c:	4a29      	ldr	r2, [pc, #164]	; (8001014 <HAL_UART_MspInit+0xf8>)
 8000f6e:	f043 0310 	orr.w	r3, r3, #16
 8000f72:	6453      	str	r3, [r2, #68]	; 0x44
 8000f74:	4b27      	ldr	r3, [pc, #156]	; (8001014 <HAL_UART_MspInit+0xf8>)
 8000f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f78:	f003 0310 	and.w	r3, r3, #16
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f80:	4b24      	ldr	r3, [pc, #144]	; (8001014 <HAL_UART_MspInit+0xf8>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	4a23      	ldr	r2, [pc, #140]	; (8001014 <HAL_UART_MspInit+0xf8>)
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8c:	4b21      	ldr	r3, [pc, #132]	; (8001014 <HAL_UART_MspInit+0xf8>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <HAL_UART_MspInit+0xf8>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9c:	4a1d      	ldr	r2, [pc, #116]	; (8001014 <HAL_UART_MspInit+0xf8>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <HAL_UART_MspInit+0xf8>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fc8:	2307      	movs	r3, #7
 8000fca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4810      	ldr	r0, [pc, #64]	; (8001018 <HAL_UART_MspInit+0xfc>)
 8000fd6:	f003 f931 	bl	800423c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ffe:	4619      	mov	r1, r3
 8001000:	4806      	ldr	r0, [pc, #24]	; (800101c <HAL_UART_MspInit+0x100>)
 8001002:	f003 f91b 	bl	800423c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001006:	bf00      	nop
 8001008:	37b0      	adds	r7, #176	; 0xb0
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40011000 	.word	0x40011000
 8001014:	40023800 	.word	0x40023800
 8001018:	40020400 	.word	0x40020400
 800101c:	40020000 	.word	0x40020000

08001020 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001034:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <HAL_FMC_MspInit+0x100>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d16d      	bne.n	8001118 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800103c:	4b38      	ldr	r3, [pc, #224]	; (8001120 <HAL_FMC_MspInit+0x100>)
 800103e:	2201      	movs	r2, #1
 8001040:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001042:	4b38      	ldr	r3, [pc, #224]	; (8001124 <HAL_FMC_MspInit+0x104>)
 8001044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001046:	4a37      	ldr	r2, [pc, #220]	; (8001124 <HAL_FMC_MspInit+0x104>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6393      	str	r3, [r2, #56]	; 0x38
 800104e:	4b35      	ldr	r3, [pc, #212]	; (8001124 <HAL_FMC_MspInit+0x104>)
 8001050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]
  PF11   ------> FMC_SDNRAS
  PE9   ------> FMC_D6
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_5
 800105a:	f248 1331 	movw	r3, #33073	; 0x8131
 800105e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800106c:	230c      	movs	r3, #12
 800106e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	4619      	mov	r1, r3
 8001074:	482c      	ldr	r0, [pc, #176]	; (8001128 <HAL_FMC_MspInit+0x108>)
 8001076:	f003 f8e1 	bl	800423c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14;
 800107a:	f24c 0303 	movw	r3, #49155	; 0xc003
 800107e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800108c:	230c      	movs	r3, #12
 800108e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	4619      	mov	r1, r3
 8001094:	4825      	ldr	r0, [pc, #148]	; (800112c <HAL_FMC_MspInit+0x10c>)
 8001096:	f003 f8d1 	bl	800423c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800109a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800109e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a8:	2303      	movs	r3, #3
 80010aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010ac:	230c      	movs	r3, #12
 80010ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	4619      	mov	r1, r3
 80010b4:	481e      	ldr	r0, [pc, #120]	; (8001130 <HAL_FMC_MspInit+0x110>)
 80010b6:	f003 f8c1 	bl	800423c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_2;
 80010ba:	2324      	movs	r3, #36	; 0x24
 80010bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010ca:	230c      	movs	r3, #12
 80010cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	4619      	mov	r1, r3
 80010d2:	4818      	ldr	r0, [pc, #96]	; (8001134 <HAL_FMC_MspInit+0x114>)
 80010d4:	f003 f8b2 	bl	800423c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010d8:	2304      	movs	r3, #4
 80010da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e4:	2303      	movs	r3, #3
 80010e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010e8:	230c      	movs	r3, #12
 80010ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	4619      	mov	r1, r3
 80010f0:	4811      	ldr	r0, [pc, #68]	; (8001138 <HAL_FMC_MspInit+0x118>)
 80010f2:	f003 f8a3 	bl	800423c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_10;
 80010f6:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80010fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001108:	230c      	movs	r3, #12
 800110a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	4619      	mov	r1, r3
 8001110:	480a      	ldr	r0, [pc, #40]	; (800113c <HAL_FMC_MspInit+0x11c>)
 8001112:	f003 f893 	bl	800423c <HAL_GPIO_Init>
 8001116:	e000      	b.n	800111a <HAL_FMC_MspInit+0xfa>
    return;
 8001118:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000368 	.word	0x20000368
 8001124:	40023800 	.word	0x40023800
 8001128:	40021800 	.word	0x40021800
 800112c:	40020c00 	.word	0x40020c00
 8001130:	40021400 	.word	0x40021400
 8001134:	40021c00 	.word	0x40021c00
 8001138:	40020800 	.word	0x40020800
 800113c:	40021000 	.word	0x40021000

08001140 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001148:	f7ff ff6a 	bl	8001020 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a4e      	ldr	r2, [pc, #312]	; (800129c <HAL_SAI_MspInit+0x148>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d134      	bne.n	80011d0 <HAL_SAI_MspInit+0x7c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8001166:	4b4e      	ldr	r3, [pc, #312]	; (80012a0 <HAL_SAI_MspInit+0x14c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d10b      	bne.n	8001186 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800116e:	4b4d      	ldr	r3, [pc, #308]	; (80012a4 <HAL_SAI_MspInit+0x150>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a4c      	ldr	r2, [pc, #304]	; (80012a4 <HAL_SAI_MspInit+0x150>)
 8001174:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b4a      	ldr	r3, [pc, #296]	; (80012a4 <HAL_SAI_MspInit+0x150>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8001186:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <HAL_SAI_MspInit+0x14c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	3301      	adds	r3, #1
 800118c:	4a44      	ldr	r2, [pc, #272]	; (80012a0 <HAL_SAI_MspInit+0x14c>)
 800118e:	6013      	str	r3, [r2, #0]
    PE0     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001190:	2301      	movs	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80011a0:	230a      	movs	r3, #10
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4619      	mov	r1, r3
 80011aa:	483f      	ldr	r0, [pc, #252]	; (80012a8 <HAL_SAI_MspInit+0x154>)
 80011ac:	f003 f846 	bl	800423c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 80011b0:	23e0      	movs	r3, #224	; 0xe0
 80011b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80011c0:	230a      	movs	r3, #10
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	4838      	ldr	r0, [pc, #224]	; (80012ac <HAL_SAI_MspInit+0x158>)
 80011cc:	f003 f836 	bl	800423c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a36      	ldr	r2, [pc, #216]	; (80012b0 <HAL_SAI_MspInit+0x15c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d15b      	bne.n	8001292 <HAL_SAI_MspInit+0x13e>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80011da:	4b31      	ldr	r3, [pc, #196]	; (80012a0 <HAL_SAI_MspInit+0x14c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10b      	bne.n	80011fa <HAL_SAI_MspInit+0xa6>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80011e2:	4b30      	ldr	r3, [pc, #192]	; (80012a4 <HAL_SAI_MspInit+0x150>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	4a2f      	ldr	r2, [pc, #188]	; (80012a4 <HAL_SAI_MspInit+0x150>)
 80011e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011ec:	6453      	str	r3, [r2, #68]	; 0x44
 80011ee:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <HAL_SAI_MspInit+0x150>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80011fa:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <HAL_SAI_MspInit+0x14c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	4a27      	ldr	r2, [pc, #156]	; (80012a0 <HAL_SAI_MspInit+0x14c>)
 8001202:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001216:	230a      	movs	r3, #10
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	4824      	ldr	r0, [pc, #144]	; (80012b4 <HAL_SAI_MspInit+0x160>)
 8001222:	f003 f80b 	bl	800423c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream6;
 8001226:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <HAL_SAI_MspInit+0x164>)
 8001228:	4a24      	ldr	r2, [pc, #144]	; (80012bc <HAL_SAI_MspInit+0x168>)
 800122a:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_3;
 800122c:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <HAL_SAI_MspInit+0x164>)
 800122e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001232:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001234:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <HAL_SAI_MspInit+0x164>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <HAL_SAI_MspInit+0x164>)
 800123c:	2200      	movs	r2, #0
 800123e:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <HAL_SAI_MspInit+0x164>)
 8001242:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001246:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <HAL_SAI_MspInit+0x164>)
 800124a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800124e:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <HAL_SAI_MspInit+0x164>)
 8001252:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001256:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_NORMAL;
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_SAI_MspInit+0x164>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 800125e:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <HAL_SAI_MspInit+0x164>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_SAI_MspInit+0x164>)
 8001266:	2200      	movs	r2, #0
 8001268:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 800126a:	4813      	ldr	r0, [pc, #76]	; (80012b8 <HAL_SAI_MspInit+0x164>)
 800126c:	f002 fb34 	bl	80038d8 <HAL_DMA_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_SAI_MspInit+0x126>
    {
      Error_Handler();
 8001276:	f7ff fccd 	bl	8000c14 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <HAL_SAI_MspInit+0x164>)
 800127e:	671a      	str	r2, [r3, #112]	; 0x70
 8001280:	4a0d      	ldr	r2, [pc, #52]	; (80012b8 <HAL_SAI_MspInit+0x164>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <HAL_SAI_MspInit+0x164>)
 800128a:	66da      	str	r2, [r3, #108]	; 0x6c
 800128c:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <HAL_SAI_MspInit+0x164>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	; 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40015c04 	.word	0x40015c04
 80012a0:	2000036c 	.word	0x2000036c
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40022000 	.word	0x40022000
 80012b0:	40015c24 	.word	0x40015c24
 80012b4:	40021800 	.word	0x40021800
 80012b8:	2000024c 	.word	0x2000024c
 80012bc:	400264a0 	.word	0x400264a0

080012c0 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a20      	ldr	r2, [pc, #128]	; (8001350 <HAL_SAI_MspDeInit+0x90>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d116      	bne.n	8001300 <HAL_SAI_MspDeInit+0x40>
    {
    SAI2_client --;
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <HAL_SAI_MspDeInit+0x94>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	4a1e      	ldr	r2, [pc, #120]	; (8001354 <HAL_SAI_MspDeInit+0x94>)
 80012da:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 80012dc:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <HAL_SAI_MspDeInit+0x94>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d105      	bne.n	80012f0 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 80012e4:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <HAL_SAI_MspDeInit+0x98>)
 80012e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e8:	4a1b      	ldr	r2, [pc, #108]	; (8001358 <HAL_SAI_MspDeInit+0x98>)
 80012ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012ee:	6453      	str	r3, [r2, #68]	; 0x44
    PE0     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0);
 80012f0:	2101      	movs	r1, #1
 80012f2:	481a      	ldr	r0, [pc, #104]	; (800135c <HAL_SAI_MspDeInit+0x9c>)
 80012f4:	f003 f94e 	bl	8004594 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOI, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6);
 80012f8:	21e0      	movs	r1, #224	; 0xe0
 80012fa:	4819      	ldr	r0, [pc, #100]	; (8001360 <HAL_SAI_MspDeInit+0xa0>)
 80012fc:	f003 f94a 	bl	8004594 <HAL_GPIO_DeInit>

    }
    if(hsai->Instance==SAI2_Block_B)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a17      	ldr	r2, [pc, #92]	; (8001364 <HAL_SAI_MspDeInit+0xa4>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d11d      	bne.n	8001346 <HAL_SAI_MspDeInit+0x86>
    {
    SAI2_client --;
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_SAI_MspDeInit+0x94>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	3b01      	subs	r3, #1
 8001310:	4a10      	ldr	r2, [pc, #64]	; (8001354 <HAL_SAI_MspDeInit+0x94>)
 8001312:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <HAL_SAI_MspDeInit+0x94>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d105      	bne.n	8001328 <HAL_SAI_MspDeInit+0x68>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_SAI_MspDeInit+0x98>)
 800131e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001320:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <HAL_SAI_MspDeInit+0x98>)
 8001322:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001326:	6453      	str	r3, [r2, #68]	; 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_10);
 8001328:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800132c:	480e      	ldr	r0, [pc, #56]	; (8001368 <HAL_SAI_MspDeInit+0xa8>)
 800132e:	f003 f931 	bl	8004594 <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001336:	4618      	mov	r0, r3
 8001338:	f002 fb7c 	bl	8003a34 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001340:	4618      	mov	r0, r3
 8001342:	f002 fb77 	bl	8003a34 <HAL_DMA_DeInit>
    }
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40015c04 	.word	0x40015c04
 8001354:	2000036c 	.word	0x2000036c
 8001358:	40023800 	.word	0x40023800
 800135c:	40021000 	.word	0x40021000
 8001360:	40022000 	.word	0x40022000
 8001364:	40015c24 	.word	0x40015c24
 8001368:	40021800 	.word	0x40021800

0800136c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08c      	sub	sp, #48	; 0x30
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001374:	2300      	movs	r3, #0
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800137c:	4b2f      	ldr	r3, [pc, #188]	; (800143c <HAL_InitTick+0xd0>)
 800137e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001380:	4a2e      	ldr	r2, [pc, #184]	; (800143c <HAL_InitTick+0xd0>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6453      	str	r3, [r2, #68]	; 0x44
 8001388:	4b2c      	ldr	r3, [pc, #176]	; (800143c <HAL_InitTick+0xd0>)
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001394:	f107 020c 	add.w	r2, r7, #12
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f004 ff30 	bl	8006204 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80013a4:	f004 ff1a 	bl	80061dc <HAL_RCC_GetPCLK2Freq>
 80013a8:	4603      	mov	r3, r0
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b0:	4a23      	ldr	r2, [pc, #140]	; (8001440 <HAL_InitTick+0xd4>)
 80013b2:	fba2 2303 	umull	r2, r3, r2, r3
 80013b6:	0c9b      	lsrs	r3, r3, #18
 80013b8:	3b01      	subs	r3, #1
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80013bc:	4b21      	ldr	r3, [pc, #132]	; (8001444 <HAL_InitTick+0xd8>)
 80013be:	4a22      	ldr	r2, [pc, #136]	; (8001448 <HAL_InitTick+0xdc>)
 80013c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <HAL_InitTick+0xd8>)
 80013c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013c8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013ca:	4a1e      	ldr	r2, [pc, #120]	; (8001444 <HAL_InitTick+0xd8>)
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <HAL_InitTick+0xd8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d6:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <HAL_InitTick+0xd8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <HAL_InitTick+0xd8>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80013e2:	4818      	ldr	r0, [pc, #96]	; (8001444 <HAL_InitTick+0xd8>)
 80013e4:	f006 f8df 	bl	80075a6 <HAL_TIM_Base_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80013ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d11b      	bne.n	800142e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80013f6:	4813      	ldr	r0, [pc, #76]	; (8001444 <HAL_InitTick+0xd8>)
 80013f8:	f006 f936 	bl	8007668 <HAL_TIM_Base_Start_IT>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001402:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001406:	2b00      	cmp	r3, #0
 8001408:	d111      	bne.n	800142e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800140a:	2019      	movs	r0, #25
 800140c:	f002 fa56 	bl	80038bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b0f      	cmp	r3, #15
 8001414:	d808      	bhi.n	8001428 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001416:	2200      	movs	r2, #0
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	2019      	movs	r0, #25
 800141c:	f002 fa32 	bl	8003884 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001420:	4a0a      	ldr	r2, [pc, #40]	; (800144c <HAL_InitTick+0xe0>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e002      	b.n	800142e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800142e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001432:	4618      	mov	r0, r3
 8001434:	3730      	adds	r7, #48	; 0x30
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	431bde83 	.word	0x431bde83
 8001444:	20000370 	.word	0x20000370
 8001448:	40010000 	.word	0x40010000
 800144c:	20000038 	.word	0x20000038

08001450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001454:	e7fe      	b.n	8001454 <NMI_Handler+0x4>

08001456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <HardFault_Handler+0x4>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <MemManage_Handler+0x4>

08001462 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <UsageFault_Handler+0x4>

0800146e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80014ae:	f006 f953 	bl	8007758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000370 	.word	0x20000370

080014bc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <DMA2_Stream6_IRQHandler+0x10>)
 80014c2:	f002 fb75 	bl	8003bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000024c 	.word	0x2000024c

080014d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <SystemInit+0x20>)
 80014d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <SystemInit+0x20>)
 80014dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800152c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f8:	480d      	ldr	r0, [pc, #52]	; (8001530 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014fa:	490e      	ldr	r1, [pc, #56]	; (8001534 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014fc:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001500:	e002      	b.n	8001508 <LoopCopyDataInit>

08001502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001506:	3304      	adds	r3, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800150c:	d3f9      	bcc.n	8001502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001510:	4c0b      	ldr	r4, [pc, #44]	; (8001540 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001514:	e001      	b.n	800151a <LoopFillZerobss>

08001516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001518:	3204      	adds	r2, #4

0800151a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800151c:	d3fb      	bcc.n	8001516 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800151e:	f7ff ffd7 	bl	80014d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001522:	f007 f83f 	bl	80085a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001526:	f7fe ffed 	bl	8000504 <main>
  bx  lr    
 800152a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800152c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001538:	08008634 	.word	0x08008634
  ldr r2, =_sbss
 800153c:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001540:	200005e8 	.word	0x200005e8

08001544 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC_IRQHandler>
	...

08001548 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	4603      	mov	r3, r0
 8001552:	81fb      	strh	r3, [r7, #14]
 8001554:	460b      	mov	r3, r1
 8001556:	81bb      	strh	r3, [r7, #12]
 8001558:	4613      	mov	r3, r2
 800155a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8001560:	89bb      	ldrh	r3, [r7, #12]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8001566:	89bb      	ldrh	r3, [r7, #12]
 8001568:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800156c:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8001572:	f001 fc71 	bl	8002e58 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8001576:	89fb      	ldrh	r3, [r7, #14]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2203      	movs	r2, #3
 800157c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001580:	4618      	mov	r0, r3
 8001582:	f001 fafb 	bl	8002b7c <CODEC_IO_Write>
 8001586:	4603      	mov	r3, r0
 8001588:	461a      	mov	r2, r3
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	4413      	add	r3, r2
 800158e:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8001590:	89fb      	ldrh	r3, [r7, #14]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2200      	movs	r2, #0
 8001596:	f640 0117 	movw	r1, #2071	; 0x817
 800159a:	4618      	mov	r0, r3
 800159c:	f001 faee 	bl	8002b7c <CODEC_IO_Write>
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	4413      	add	r3, r2
 80015a8:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80015aa:	89fb      	ldrh	r3, [r7, #14]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 7181 	mov.w	r1, #258	; 0x102
 80015b4:	4618      	mov	r0, r3
 80015b6:	f001 fae1 	bl	8002b7c <CODEC_IO_Write>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	4413      	add	r3, r2
 80015c2:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80015c4:	89fb      	ldrh	r3, [r7, #14]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	226c      	movs	r2, #108	; 0x6c
 80015ca:	2139      	movs	r1, #57	; 0x39
 80015cc:	4618      	mov	r0, r3
 80015ce:	f001 fad5 	bl	8002b7c <CODEC_IO_Write>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	4413      	add	r3, r2
 80015da:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 80015dc:	8afb      	ldrh	r3, [r7, #22]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00c      	beq.n	80015fc <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 80015e2:	89fb      	ldrh	r3, [r7, #14]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2213      	movs	r2, #19
 80015e8:	2101      	movs	r1, #1
 80015ea:	4618      	mov	r0, r3
 80015ec:	f001 fac6 	bl	8002b7c <CODEC_IO_Write>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	4413      	add	r3, r2
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	e00b      	b.n	8001614 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 80015fc:	89fb      	ldrh	r3, [r7, #14]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2203      	movs	r2, #3
 8001602:	2101      	movs	r1, #1
 8001604:	4618      	mov	r0, r3
 8001606:	f001 fab9 	bl	8002b7c <CODEC_IO_Write>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	4413      	add	r3, r2
 8001612:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8001614:	2032      	movs	r0, #50	; 0x32
 8001616:	f001 fc87 	bl	8002f28 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 800161a:	8b3b      	ldrh	r3, [r7, #24]
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 815f 	beq.w	80018e0 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8001622:	4bae      	ldr	r3, [pc, #696]	; (80018dc <wm8994_Init+0x394>)
 8001624:	2201      	movs	r2, #1
 8001626:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8001628:	8b3b      	ldrh	r3, [r7, #24]
 800162a:	2b03      	cmp	r3, #3
 800162c:	f000 808c 	beq.w	8001748 <wm8994_Init+0x200>
 8001630:	2b03      	cmp	r3, #3
 8001632:	f300 8111 	bgt.w	8001858 <wm8994_Init+0x310>
 8001636:	2b01      	cmp	r3, #1
 8001638:	d002      	beq.n	8001640 <wm8994_Init+0xf8>
 800163a:	2b02      	cmp	r3, #2
 800163c:	d042      	beq.n	80016c4 <wm8994_Init+0x17c>
 800163e:	e10b      	b.n	8001858 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8001640:	89fb      	ldrh	r3, [r7, #14]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	f640 420c 	movw	r2, #3084	; 0xc0c
 8001648:	2105      	movs	r1, #5
 800164a:	4618      	mov	r0, r3
 800164c:	f001 fa96 	bl	8002b7c <CODEC_IO_Write>
 8001650:	4603      	mov	r3, r0
 8001652:	461a      	mov	r2, r3
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	4413      	add	r3, r2
 8001658:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800165a:	89fb      	ldrh	r3, [r7, #14]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2200      	movs	r2, #0
 8001660:	f240 6101 	movw	r1, #1537	; 0x601
 8001664:	4618      	mov	r0, r3
 8001666:	f001 fa89 	bl	8002b7c <CODEC_IO_Write>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	4413      	add	r3, r2
 8001672:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8001674:	89fb      	ldrh	r3, [r7, #14]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2200      	movs	r2, #0
 800167a:	f240 6102 	movw	r1, #1538	; 0x602
 800167e:	4618      	mov	r0, r3
 8001680:	f001 fa7c 	bl	8002b7c <CODEC_IO_Write>
 8001684:	4603      	mov	r3, r0
 8001686:	461a      	mov	r2, r3
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	4413      	add	r3, r2
 800168c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800168e:	89fb      	ldrh	r3, [r7, #14]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2202      	movs	r2, #2
 8001694:	f240 6104 	movw	r1, #1540	; 0x604
 8001698:	4618      	mov	r0, r3
 800169a:	f001 fa6f 	bl	8002b7c <CODEC_IO_Write>
 800169e:	4603      	mov	r3, r0
 80016a0:	461a      	mov	r2, r3
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	4413      	add	r3, r2
 80016a6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80016a8:	89fb      	ldrh	r3, [r7, #14]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2202      	movs	r2, #2
 80016ae:	f240 6105 	movw	r1, #1541	; 0x605
 80016b2:	4618      	mov	r0, r3
 80016b4:	f001 fa62 	bl	8002b7c <CODEC_IO_Write>
 80016b8:	4603      	mov	r3, r0
 80016ba:	461a      	mov	r2, r3
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	4413      	add	r3, r2
 80016c0:	61fb      	str	r3, [r7, #28]
      break;
 80016c2:	e110      	b.n	80018e6 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80016c4:	89fb      	ldrh	r3, [r7, #14]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f240 3203 	movw	r2, #771	; 0x303
 80016cc:	2105      	movs	r1, #5
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 fa54 	bl	8002b7c <CODEC_IO_Write>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	4413      	add	r3, r2
 80016dc:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80016de:	89fb      	ldrh	r3, [r7, #14]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2201      	movs	r2, #1
 80016e4:	f240 6101 	movw	r1, #1537	; 0x601
 80016e8:	4618      	mov	r0, r3
 80016ea:	f001 fa47 	bl	8002b7c <CODEC_IO_Write>
 80016ee:	4603      	mov	r3, r0
 80016f0:	461a      	mov	r2, r3
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	4413      	add	r3, r2
 80016f6:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80016f8:	89fb      	ldrh	r3, [r7, #14]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2201      	movs	r2, #1
 80016fe:	f240 6102 	movw	r1, #1538	; 0x602
 8001702:	4618      	mov	r0, r3
 8001704:	f001 fa3a 	bl	8002b7c <CODEC_IO_Write>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	4413      	add	r3, r2
 8001710:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8001712:	89fb      	ldrh	r3, [r7, #14]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2200      	movs	r2, #0
 8001718:	f240 6104 	movw	r1, #1540	; 0x604
 800171c:	4618      	mov	r0, r3
 800171e:	f001 fa2d 	bl	8002b7c <CODEC_IO_Write>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	4413      	add	r3, r2
 800172a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800172c:	89fb      	ldrh	r3, [r7, #14]
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2200      	movs	r2, #0
 8001732:	f240 6105 	movw	r1, #1541	; 0x605
 8001736:	4618      	mov	r0, r3
 8001738:	f001 fa20 	bl	8002b7c <CODEC_IO_Write>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	4413      	add	r3, r2
 8001744:	61fb      	str	r3, [r7, #28]
      break;
 8001746:	e0ce      	b.n	80018e6 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001748:	8afb      	ldrh	r3, [r7, #22]
 800174a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800174e:	d141      	bne.n	80017d4 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8001750:	89fb      	ldrh	r3, [r7, #14]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001758:	2105      	movs	r1, #5
 800175a:	4618      	mov	r0, r3
 800175c:	f001 fa0e 	bl	8002b7c <CODEC_IO_Write>
 8001760:	4603      	mov	r3, r0
 8001762:	461a      	mov	r2, r3
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	4413      	add	r3, r2
 8001768:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 800176a:	89fb      	ldrh	r3, [r7, #14]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2203      	movs	r2, #3
 8001770:	f240 6101 	movw	r1, #1537	; 0x601
 8001774:	4618      	mov	r0, r3
 8001776:	f001 fa01 	bl	8002b7c <CODEC_IO_Write>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	4413      	add	r3, r2
 8001782:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8001784:	89fb      	ldrh	r3, [r7, #14]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2203      	movs	r2, #3
 800178a:	f240 6102 	movw	r1, #1538	; 0x602
 800178e:	4618      	mov	r0, r3
 8001790:	f001 f9f4 	bl	8002b7c <CODEC_IO_Write>
 8001794:	4603      	mov	r3, r0
 8001796:	461a      	mov	r2, r3
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	4413      	add	r3, r2
 800179c:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 800179e:	89fb      	ldrh	r3, [r7, #14]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2203      	movs	r2, #3
 80017a4:	f240 6104 	movw	r1, #1540	; 0x604
 80017a8:	4618      	mov	r0, r3
 80017aa:	f001 f9e7 	bl	8002b7c <CODEC_IO_Write>
 80017ae:	4603      	mov	r3, r0
 80017b0:	461a      	mov	r2, r3
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	4413      	add	r3, r2
 80017b6:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80017b8:	89fb      	ldrh	r3, [r7, #14]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2203      	movs	r2, #3
 80017be:	f240 6105 	movw	r1, #1541	; 0x605
 80017c2:	4618      	mov	r0, r3
 80017c4:	f001 f9da 	bl	8002b7c <CODEC_IO_Write>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	4413      	add	r3, r2
 80017d0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 80017d2:	e088      	b.n	80018e6 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80017d4:	89fb      	ldrh	r3, [r7, #14]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	f640 720f 	movw	r2, #3855	; 0xf0f
 80017dc:	2105      	movs	r1, #5
 80017de:	4618      	mov	r0, r3
 80017e0:	f001 f9cc 	bl	8002b7c <CODEC_IO_Write>
 80017e4:	4603      	mov	r3, r0
 80017e6:	461a      	mov	r2, r3
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	4413      	add	r3, r2
 80017ec:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80017ee:	89fb      	ldrh	r3, [r7, #14]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2201      	movs	r2, #1
 80017f4:	f240 6101 	movw	r1, #1537	; 0x601
 80017f8:	4618      	mov	r0, r3
 80017fa:	f001 f9bf 	bl	8002b7c <CODEC_IO_Write>
 80017fe:	4603      	mov	r3, r0
 8001800:	461a      	mov	r2, r3
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	4413      	add	r3, r2
 8001806:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001808:	89fb      	ldrh	r3, [r7, #14]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2201      	movs	r2, #1
 800180e:	f240 6102 	movw	r1, #1538	; 0x602
 8001812:	4618      	mov	r0, r3
 8001814:	f001 f9b2 	bl	8002b7c <CODEC_IO_Write>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	4413      	add	r3, r2
 8001820:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8001822:	89fb      	ldrh	r3, [r7, #14]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2202      	movs	r2, #2
 8001828:	f240 6104 	movw	r1, #1540	; 0x604
 800182c:	4618      	mov	r0, r3
 800182e:	f001 f9a5 	bl	8002b7c <CODEC_IO_Write>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	4413      	add	r3, r2
 800183a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 800183c:	89fb      	ldrh	r3, [r7, #14]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2202      	movs	r2, #2
 8001842:	f240 6105 	movw	r1, #1541	; 0x605
 8001846:	4618      	mov	r0, r3
 8001848:	f001 f998 	bl	8002b7c <CODEC_IO_Write>
 800184c:	4603      	mov	r3, r0
 800184e:	461a      	mov	r2, r3
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	4413      	add	r3, r2
 8001854:	61fb      	str	r3, [r7, #28]
      break;
 8001856:	e046      	b.n	80018e6 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8001858:	89fb      	ldrh	r3, [r7, #14]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	f240 3203 	movw	r2, #771	; 0x303
 8001860:	2105      	movs	r1, #5
 8001862:	4618      	mov	r0, r3
 8001864:	f001 f98a 	bl	8002b7c <CODEC_IO_Write>
 8001868:	4603      	mov	r3, r0
 800186a:	461a      	mov	r2, r3
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	4413      	add	r3, r2
 8001870:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001872:	89fb      	ldrh	r3, [r7, #14]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2201      	movs	r2, #1
 8001878:	f240 6101 	movw	r1, #1537	; 0x601
 800187c:	4618      	mov	r0, r3
 800187e:	f001 f97d 	bl	8002b7c <CODEC_IO_Write>
 8001882:	4603      	mov	r3, r0
 8001884:	461a      	mov	r2, r3
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	4413      	add	r3, r2
 800188a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800188c:	89fb      	ldrh	r3, [r7, #14]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2201      	movs	r2, #1
 8001892:	f240 6102 	movw	r1, #1538	; 0x602
 8001896:	4618      	mov	r0, r3
 8001898:	f001 f970 	bl	8002b7c <CODEC_IO_Write>
 800189c:	4603      	mov	r3, r0
 800189e:	461a      	mov	r2, r3
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	4413      	add	r3, r2
 80018a4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80018a6:	89fb      	ldrh	r3, [r7, #14]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2200      	movs	r2, #0
 80018ac:	f240 6104 	movw	r1, #1540	; 0x604
 80018b0:	4618      	mov	r0, r3
 80018b2:	f001 f963 	bl	8002b7c <CODEC_IO_Write>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461a      	mov	r2, r3
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	4413      	add	r3, r2
 80018be:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80018c0:	89fb      	ldrh	r3, [r7, #14]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2200      	movs	r2, #0
 80018c6:	f240 6105 	movw	r1, #1541	; 0x605
 80018ca:	4618      	mov	r0, r3
 80018cc:	f001 f956 	bl	8002b7c <CODEC_IO_Write>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	4413      	add	r3, r2
 80018d8:	61fb      	str	r3, [r7, #28]
      break;
 80018da:	e004      	b.n	80018e6 <wm8994_Init+0x39e>
 80018dc:	200003bc 	.word	0x200003bc
    }
  }
  else
  {
    outputEnabled = 0;
 80018e0:	4b99      	ldr	r3, [pc, #612]	; (8001b48 <wm8994_Init+0x600>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 80018e6:	8afb      	ldrh	r3, [r7, #22]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 81ab 	beq.w	8001c44 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 80018ee:	4b97      	ldr	r3, [pc, #604]	; (8001b4c <wm8994_Init+0x604>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80018f4:	8afb      	ldrh	r3, [r7, #22]
 80018f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018fa:	f000 8129 	beq.w	8001b50 <wm8994_Init+0x608>
 80018fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001902:	f300 819b 	bgt.w	8001c3c <wm8994_Init+0x6f4>
 8001906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800190a:	d05a      	beq.n	80019c2 <wm8994_Init+0x47a>
 800190c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001910:	f300 8194 	bgt.w	8001c3c <wm8994_Init+0x6f4>
 8001914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001918:	f000 80c6 	beq.w	8001aa8 <wm8994_Init+0x560>
 800191c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001920:	f040 818c 	bne.w	8001c3c <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8001924:	89fb      	ldrh	r3, [r7, #14]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 800192c:	2104      	movs	r1, #4
 800192e:	4618      	mov	r0, r3
 8001930:	f001 f924 	bl	8002b7c <CODEC_IO_Write>
 8001934:	4603      	mov	r3, r0
 8001936:	461a      	mov	r2, r3
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	4413      	add	r3, r2
 800193c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800193e:	89fb      	ldrh	r3, [r7, #14]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	22db      	movs	r2, #219	; 0xdb
 8001944:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8001948:	4618      	mov	r0, r3
 800194a:	f001 f917 	bl	8002b7c <CODEC_IO_Write>
 800194e:	4603      	mov	r3, r0
 8001950:	461a      	mov	r2, r3
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	4413      	add	r3, r2
 8001956:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8001958:	89fb      	ldrh	r3, [r7, #14]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001960:	2102      	movs	r1, #2
 8001962:	4618      	mov	r0, r3
 8001964:	f001 f90a 	bl	8002b7c <CODEC_IO_Write>
 8001968:	4603      	mov	r3, r0
 800196a:	461a      	mov	r2, r3
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	4413      	add	r3, r2
 8001970:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8001972:	89fb      	ldrh	r3, [r7, #14]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2202      	movs	r2, #2
 8001978:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800197c:	4618      	mov	r0, r3
 800197e:	f001 f8fd 	bl	8002b7c <CODEC_IO_Write>
 8001982:	4603      	mov	r3, r0
 8001984:	461a      	mov	r2, r3
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	4413      	add	r3, r2
 800198a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800198c:	89fb      	ldrh	r3, [r7, #14]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2202      	movs	r2, #2
 8001992:	f240 6109 	movw	r1, #1545	; 0x609
 8001996:	4618      	mov	r0, r3
 8001998:	f001 f8f0 	bl	8002b7c <CODEC_IO_Write>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	4413      	add	r3, r2
 80019a4:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80019a6:	89fb      	ldrh	r3, [r7, #14]
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	220e      	movs	r2, #14
 80019ac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80019b0:	4618      	mov	r0, r3
 80019b2:	f001 f8e3 	bl	8002b7c <CODEC_IO_Write>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	4413      	add	r3, r2
 80019be:	61fb      	str	r3, [r7, #28]
      break;
 80019c0:	e143      	b.n	8001c4a <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80019c2:	89fb      	ldrh	r3, [r7, #14]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2211      	movs	r2, #17
 80019c8:	2128      	movs	r1, #40	; 0x28
 80019ca:	4618      	mov	r0, r3
 80019cc:	f001 f8d6 	bl	8002b7c <CODEC_IO_Write>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	4413      	add	r3, r2
 80019d8:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 80019da:	89fb      	ldrh	r3, [r7, #14]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2235      	movs	r2, #53	; 0x35
 80019e0:	2129      	movs	r1, #41	; 0x29
 80019e2:	4618      	mov	r0, r3
 80019e4:	f001 f8ca 	bl	8002b7c <CODEC_IO_Write>
 80019e8:	4603      	mov	r3, r0
 80019ea:	461a      	mov	r2, r3
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	4413      	add	r3, r2
 80019f0:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 80019f2:	89fb      	ldrh	r3, [r7, #14]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2235      	movs	r2, #53	; 0x35
 80019f8:	212a      	movs	r1, #42	; 0x2a
 80019fa:	4618      	mov	r0, r3
 80019fc:	f001 f8be 	bl	8002b7c <CODEC_IO_Write>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	4413      	add	r3, r2
 8001a08:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8001a0a:	89fb      	ldrh	r3, [r7, #14]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	f240 3203 	movw	r2, #771	; 0x303
 8001a12:	2104      	movs	r1, #4
 8001a14:	4618      	mov	r0, r3
 8001a16:	f001 f8b1 	bl	8002b7c <CODEC_IO_Write>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	4413      	add	r3, r2
 8001a22:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8001a24:	89fb      	ldrh	r3, [r7, #14]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	22db      	movs	r2, #219	; 0xdb
 8001a2a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f001 f8a4 	bl	8002b7c <CODEC_IO_Write>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461a      	mov	r2, r3
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8001a3e:	89fb      	ldrh	r3, [r7, #14]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	f246 3250 	movw	r2, #25424	; 0x6350
 8001a46:	2102      	movs	r1, #2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f001 f897 	bl	8002b7c <CODEC_IO_Write>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	461a      	mov	r2, r3
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	4413      	add	r3, r2
 8001a56:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8001a58:	89fb      	ldrh	r3, [r7, #14]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	f240 6106 	movw	r1, #1542	; 0x606
 8001a62:	4618      	mov	r0, r3
 8001a64:	f001 f88a 	bl	8002b7c <CODEC_IO_Write>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	4413      	add	r3, r2
 8001a70:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8001a72:	89fb      	ldrh	r3, [r7, #14]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2202      	movs	r2, #2
 8001a78:	f240 6107 	movw	r1, #1543	; 0x607
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f001 f87d 	bl	8002b7c <CODEC_IO_Write>
 8001a82:	4603      	mov	r3, r0
 8001a84:	461a      	mov	r2, r3
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	4413      	add	r3, r2
 8001a8a:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001a8c:	89fb      	ldrh	r3, [r7, #14]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	220d      	movs	r2, #13
 8001a92:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001a96:	4618      	mov	r0, r3
 8001a98:	f001 f870 	bl	8002b7c <CODEC_IO_Write>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	61fb      	str	r3, [r7, #28]
      break;
 8001aa6:	e0d0      	b.n	8001c4a <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8001aa8:	89fb      	ldrh	r3, [r7, #14]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8001ab0:	2104      	movs	r1, #4
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f001 f862 	bl	8002b7c <CODEC_IO_Write>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	4413      	add	r3, r2
 8001ac0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8001ac2:	89fb      	ldrh	r3, [r7, #14]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	22db      	movs	r2, #219	; 0xdb
 8001ac8:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8001acc:	4618      	mov	r0, r3
 8001ace:	f001 f855 	bl	8002b7c <CODEC_IO_Write>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	4413      	add	r3, r2
 8001ada:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8001adc:	89fb      	ldrh	r3, [r7, #14]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	f246 3250 	movw	r2, #25424	; 0x6350
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f001 f848 	bl	8002b7c <CODEC_IO_Write>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461a      	mov	r2, r3
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	4413      	add	r3, r2
 8001af4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8001af6:	89fb      	ldrh	r3, [r7, #14]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2202      	movs	r2, #2
 8001afc:	f240 6106 	movw	r1, #1542	; 0x606
 8001b00:	4618      	mov	r0, r3
 8001b02:	f001 f83b 	bl	8002b7c <CODEC_IO_Write>
 8001b06:	4603      	mov	r3, r0
 8001b08:	461a      	mov	r2, r3
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8001b10:	89fb      	ldrh	r3, [r7, #14]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2202      	movs	r2, #2
 8001b16:	f240 6107 	movw	r1, #1543	; 0x607
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f001 f82e 	bl	8002b7c <CODEC_IO_Write>
 8001b20:	4603      	mov	r3, r0
 8001b22:	461a      	mov	r2, r3
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	4413      	add	r3, r2
 8001b28:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001b2a:	89fb      	ldrh	r3, [r7, #14]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	220d      	movs	r2, #13
 8001b30:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001b34:	4618      	mov	r0, r3
 8001b36:	f001 f821 	bl	8002b7c <CODEC_IO_Write>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	4413      	add	r3, r2
 8001b42:	61fb      	str	r3, [r7, #28]
      break; 
 8001b44:	e081      	b.n	8001c4a <wm8994_Init+0x702>
 8001b46:	bf00      	nop
 8001b48:	200003bc 	.word	0x200003bc
 8001b4c:	200003c0 	.word	0x200003c0
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8001b50:	89fb      	ldrh	r3, [r7, #14]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	f640 723c 	movw	r2, #3900	; 0xf3c
 8001b58:	2104      	movs	r1, #4
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f001 f80e 	bl	8002b7c <CODEC_IO_Write>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	4413      	add	r3, r2
 8001b68:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8001b6a:	89fb      	ldrh	r3, [r7, #14]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	22db      	movs	r2, #219	; 0xdb
 8001b70:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8001b74:	4618      	mov	r0, r3
 8001b76:	f001 f801 	bl	8002b7c <CODEC_IO_Write>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	4413      	add	r3, r2
 8001b82:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8001b84:	89fb      	ldrh	r3, [r7, #14]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	22db      	movs	r2, #219	; 0xdb
 8001b8a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 fff4 	bl	8002b7c <CODEC_IO_Write>
 8001b94:	4603      	mov	r3, r0
 8001b96:	461a      	mov	r2, r3
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8001b9e:	89fb      	ldrh	r3, [r7, #14]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 ffe7 	bl	8002b7c <CODEC_IO_Write>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8001bb8:	89fb      	ldrh	r3, [r7, #14]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	f240 6106 	movw	r1, #1542	; 0x606
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 ffda 	bl	8002b7c <CODEC_IO_Write>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	461a      	mov	r2, r3
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	4413      	add	r3, r2
 8001bd0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8001bd2:	89fb      	ldrh	r3, [r7, #14]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	f240 6107 	movw	r1, #1543	; 0x607
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 ffcd 	bl	8002b7c <CODEC_IO_Write>
 8001be2:	4603      	mov	r3, r0
 8001be4:	461a      	mov	r2, r3
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	4413      	add	r3, r2
 8001bea:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8001bec:	89fb      	ldrh	r3, [r7, #14]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 ffc0 	bl	8002b7c <CODEC_IO_Write>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	461a      	mov	r2, r3
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	4413      	add	r3, r2
 8001c04:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8001c06:	89fb      	ldrh	r3, [r7, #14]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	f240 6109 	movw	r1, #1545	; 0x609
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 ffb3 	bl	8002b7c <CODEC_IO_Write>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001c20:	89fb      	ldrh	r3, [r7, #14]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	220d      	movs	r2, #13
 8001c26:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 ffa6 	bl	8002b7c <CODEC_IO_Write>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	4413      	add	r3, r2
 8001c38:	61fb      	str	r3, [r7, #28]
      break;    
 8001c3a:	e006      	b.n	8001c4a <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	61fb      	str	r3, [r7, #28]
      break;
 8001c42:	e002      	b.n	8001c4a <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8001c44:	4ba4      	ldr	r3, [pc, #656]	; (8001ed8 <wm8994_Init+0x990>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4aa3      	ldr	r2, [pc, #652]	; (8001edc <wm8994_Init+0x994>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d079      	beq.n	8001d46 <wm8994_Init+0x7fe>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4aa1      	ldr	r2, [pc, #644]	; (8001edc <wm8994_Init+0x994>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	f200 80ad 	bhi.w	8001db6 <wm8994_Init+0x86e>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d061      	beq.n	8001d2a <wm8994_Init+0x7e2>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	f200 80a2 	bhi.w	8001db6 <wm8994_Init+0x86e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	f000 808e 	beq.w	8001d9a <wm8994_Init+0x852>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001c84:	4293      	cmp	r3, r2
 8001c86:	f200 8096 	bhi.w	8001db6 <wm8994_Init+0x86e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001c90:	d03d      	beq.n	8001d0e <wm8994_Init+0x7c6>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001c98:	f200 808d 	bhi.w	8001db6 <wm8994_Init+0x86e>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f245 6222 	movw	r2, #22050	; 0x5622
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d06b      	beq.n	8001d7e <wm8994_Init+0x836>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f245 6222 	movw	r2, #22050	; 0x5622
 8001cac:	4293      	cmp	r3, r2
 8001cae:	f200 8082 	bhi.w	8001db6 <wm8994_Init+0x86e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001cb8:	d01b      	beq.n	8001cf2 <wm8994_Init+0x7aa>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001cc0:	d879      	bhi.n	8001db6 <wm8994_Init+0x86e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001cc8:	d005      	beq.n	8001cd6 <wm8994_Init+0x78e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d046      	beq.n	8001d62 <wm8994_Init+0x81a>
 8001cd4:	e06f      	b.n	8001db6 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8001cd6:	89fb      	ldrh	r3, [r7, #14]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2203      	movs	r2, #3
 8001cdc:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 ff4b 	bl	8002b7c <CODEC_IO_Write>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	461a      	mov	r2, r3
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	4413      	add	r3, r2
 8001cee:	61fb      	str	r3, [r7, #28]
    break;
 8001cf0:	e06f      	b.n	8001dd2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8001cf2:	89fb      	ldrh	r3, [r7, #14]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2233      	movs	r2, #51	; 0x33
 8001cf8:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 ff3d 	bl	8002b7c <CODEC_IO_Write>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	4413      	add	r3, r2
 8001d0a:	61fb      	str	r3, [r7, #28]
    break;
 8001d0c:	e061      	b.n	8001dd2 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8001d0e:	89fb      	ldrh	r3, [r7, #14]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2263      	movs	r2, #99	; 0x63
 8001d14:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 ff2f 	bl	8002b7c <CODEC_IO_Write>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	461a      	mov	r2, r3
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	4413      	add	r3, r2
 8001d26:	61fb      	str	r3, [r7, #28]
    break;
 8001d28:	e053      	b.n	8001dd2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8001d2a:	89fb      	ldrh	r3, [r7, #14]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2283      	movs	r2, #131	; 0x83
 8001d30:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 ff21 	bl	8002b7c <CODEC_IO_Write>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	4413      	add	r3, r2
 8001d42:	61fb      	str	r3, [r7, #28]
    break;
 8001d44:	e045      	b.n	8001dd2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8001d46:	89fb      	ldrh	r3, [r7, #14]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	22a3      	movs	r2, #163	; 0xa3
 8001d4c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 ff13 	bl	8002b7c <CODEC_IO_Write>
 8001d56:	4603      	mov	r3, r0
 8001d58:	461a      	mov	r2, r3
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	61fb      	str	r3, [r7, #28]
    break;
 8001d60:	e037      	b.n	8001dd2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8001d62:	89fb      	ldrh	r3, [r7, #14]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2213      	movs	r2, #19
 8001d68:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 ff05 	bl	8002b7c <CODEC_IO_Write>
 8001d72:	4603      	mov	r3, r0
 8001d74:	461a      	mov	r2, r3
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	4413      	add	r3, r2
 8001d7a:	61fb      	str	r3, [r7, #28]
    break;
 8001d7c:	e029      	b.n	8001dd2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8001d7e:	89fb      	ldrh	r3, [r7, #14]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2243      	movs	r2, #67	; 0x43
 8001d84:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 fef7 	bl	8002b7c <CODEC_IO_Write>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	461a      	mov	r2, r3
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	4413      	add	r3, r2
 8001d96:	61fb      	str	r3, [r7, #28]
    break;
 8001d98:	e01b      	b.n	8001dd2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8001d9a:	89fb      	ldrh	r3, [r7, #14]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2273      	movs	r2, #115	; 0x73
 8001da0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 fee9 	bl	8002b7c <CODEC_IO_Write>
 8001daa:	4603      	mov	r3, r0
 8001dac:	461a      	mov	r2, r3
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	4413      	add	r3, r2
 8001db2:	61fb      	str	r3, [r7, #28]
    break; 
 8001db4:	e00d      	b.n	8001dd2 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8001db6:	89fb      	ldrh	r3, [r7, #14]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2283      	movs	r2, #131	; 0x83
 8001dbc:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 fedb 	bl	8002b7c <CODEC_IO_Write>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	461a      	mov	r2, r3
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	4413      	add	r3, r2
 8001dce:	61fb      	str	r3, [r7, #28]
    break; 
 8001dd0:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001dd2:	8afb      	ldrh	r3, [r7, #22]
 8001dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dd8:	d10e      	bne.n	8001df8 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8001dda:	89fb      	ldrh	r3, [r7, #14]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f244 0218 	movw	r2, #16408	; 0x4018
 8001de2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 fec8 	bl	8002b7c <CODEC_IO_Write>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	4413      	add	r3, r2
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	e00d      	b.n	8001e14 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8001df8:	89fb      	ldrh	r3, [r7, #14]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f244 0210 	movw	r2, #16400	; 0x4010
 8001e00:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 feb9 	bl	8002b7c <CODEC_IO_Write>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	4413      	add	r3, r2
 8001e12:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8001e14:	89fb      	ldrh	r3, [r7, #14]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f240 3102 	movw	r1, #770	; 0x302
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 feac 	bl	8002b7c <CODEC_IO_Write>
 8001e24:	4603      	mov	r3, r0
 8001e26:	461a      	mov	r2, r3
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8001e2e:	89fb      	ldrh	r3, [r7, #14]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	220a      	movs	r2, #10
 8001e34:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 fe9f 	bl	8002b7c <CODEC_IO_Write>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	461a      	mov	r2, r3
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	4413      	add	r3, r2
 8001e46:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8001e48:	89fb      	ldrh	r3, [r7, #14]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fe92 	bl	8002b7c <CODEC_IO_Write>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	4413      	add	r3, r2
 8001e60:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8001e62:	8b3b      	ldrh	r3, [r7, #24]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 817b 	beq.w	8002160 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8001e6a:	8b3b      	ldrh	r3, [r7, #24]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d157      	bne.n	8001f20 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8001e70:	89fb      	ldrh	r3, [r7, #14]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e78:	212d      	movs	r1, #45	; 0x2d
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 fe7e 	bl	8002b7c <CODEC_IO_Write>
 8001e80:	4603      	mov	r3, r0
 8001e82:	461a      	mov	r2, r3
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	4413      	add	r3, r2
 8001e88:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8001e8a:	89fb      	ldrh	r3, [r7, #14]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e92:	212e      	movs	r1, #46	; 0x2e
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 fe71 	bl	8002b7c <CODEC_IO_Write>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <wm8994_Init+0x998>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01b      	beq.n	8001ee4 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8001eac:	89fb      	ldrh	r3, [r7, #14]
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8001eb4:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 fe5f 	bl	8002b7c <CODEC_IO_Write>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <wm8994_Init+0x998>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8001ece:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ed2:	f001 f829 	bl	8002f28 <AUDIO_IO_Delay>
 8001ed6:	e016      	b.n	8001f06 <wm8994_Init+0x9be>
 8001ed8:	200003c0 	.word	0x200003c0
 8001edc:	00017700 	.word	0x00017700
 8001ee0:	20000034 	.word	0x20000034
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8001ee4:	89fb      	ldrh	r3, [r7, #14]
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	f248 1208 	movw	r2, #33032	; 0x8108
 8001eec:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 fe43 	bl	8002b7c <CODEC_IO_Write>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	461a      	mov	r2, r3
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	4413      	add	r3, r2
 8001efe:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8001f00:	2032      	movs	r0, #50	; 0x32
 8001f02:	f001 f811 	bl	8002f28 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8001f06:	89fb      	ldrh	r3, [r7, #14]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 fe33 	bl	8002b7c <CODEC_IO_Write>
 8001f16:	4603      	mov	r3, r0
 8001f18:	461a      	mov	r2, r3
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8001f20:	89fb      	ldrh	r3, [r7, #14]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001f28:	2103      	movs	r1, #3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 fe26 	bl	8002b7c <CODEC_IO_Write>
 8001f30:	4603      	mov	r3, r0
 8001f32:	461a      	mov	r2, r3
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	4413      	add	r3, r2
 8001f38:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8001f3a:	89fb      	ldrh	r3, [r7, #14]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2122      	movs	r1, #34	; 0x22
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 fe1a 	bl	8002b7c <CODEC_IO_Write>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	4413      	add	r3, r2
 8001f50:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8001f52:	89fb      	ldrh	r3, [r7, #14]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2200      	movs	r2, #0
 8001f58:	2123      	movs	r1, #35	; 0x23
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 fe0e 	bl	8002b7c <CODEC_IO_Write>
 8001f60:	4603      	mov	r3, r0
 8001f62:	461a      	mov	r2, r3
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	4413      	add	r3, r2
 8001f68:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8001f6a:	89fb      	ldrh	r3, [r7, #14]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001f72:	2136      	movs	r1, #54	; 0x36
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 fe01 	bl	8002b7c <CODEC_IO_Write>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	4413      	add	r3, r2
 8001f82:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8001f84:	89fb      	ldrh	r3, [r7, #14]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	f243 0203 	movw	r2, #12291	; 0x3003
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 fdf4 	bl	8002b7c <CODEC_IO_Write>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461a      	mov	r2, r3
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001f9e:	8afb      	ldrh	r3, [r7, #22]
 8001fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fa4:	d10d      	bne.n	8001fc2 <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8001fa6:	89fb      	ldrh	r3, [r7, #14]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f240 2205 	movw	r2, #517	; 0x205
 8001fae:	2151      	movs	r1, #81	; 0x51
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 fde3 	bl	8002b7c <CODEC_IO_Write>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	461a      	mov	r2, r3
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	61fb      	str	r3, [r7, #28]
 8001fc0:	e00b      	b.n	8001fda <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8001fc2:	89fb      	ldrh	r3, [r7, #14]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2205      	movs	r2, #5
 8001fc8:	2151      	movs	r1, #81	; 0x51
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 fdd6 	bl	8002b7c <CODEC_IO_Write>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8001fda:	8b7b      	ldrh	r3, [r7, #26]
 8001fdc:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8001fe0:	f043 0303 	orr.w	r3, r3, #3
 8001fe4:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001fe6:	89fb      	ldrh	r3, [r7, #14]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	8b7a      	ldrh	r2, [r7, #26]
 8001fec:	2101      	movs	r1, #1
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 fdc4 	bl	8002b7c <CODEC_IO_Write>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8001ffe:	89fb      	ldrh	r3, [r7, #14]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2222      	movs	r2, #34	; 0x22
 8002004:	2160      	movs	r1, #96	; 0x60
 8002006:	4618      	mov	r0, r3
 8002008:	f000 fdb8 	bl	8002b7c <CODEC_IO_Write>
 800200c:	4603      	mov	r3, r0
 800200e:	461a      	mov	r2, r3
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	4413      	add	r3, r2
 8002014:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8002016:	89fb      	ldrh	r3, [r7, #14]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f649 7225 	movw	r2, #40741	; 0x9f25
 800201e:	214c      	movs	r1, #76	; 0x4c
 8002020:	4618      	mov	r0, r3
 8002022:	f000 fdab 	bl	8002b7c <CODEC_IO_Write>
 8002026:	4603      	mov	r3, r0
 8002028:	461a      	mov	r2, r3
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	4413      	add	r3, r2
 800202e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8002030:	200f      	movs	r0, #15
 8002032:	f000 ff79 	bl	8002f28 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8002036:	89fb      	ldrh	r3, [r7, #14]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2201      	movs	r2, #1
 800203c:	212d      	movs	r1, #45	; 0x2d
 800203e:	4618      	mov	r0, r3
 8002040:	f000 fd9c 	bl	8002b7c <CODEC_IO_Write>
 8002044:	4603      	mov	r3, r0
 8002046:	461a      	mov	r2, r3
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	4413      	add	r3, r2
 800204c:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 800204e:	89fb      	ldrh	r3, [r7, #14]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2201      	movs	r2, #1
 8002054:	212e      	movs	r1, #46	; 0x2e
 8002056:	4618      	mov	r0, r3
 8002058:	f000 fd90 	bl	8002b7c <CODEC_IO_Write>
 800205c:	4603      	mov	r3, r0
 800205e:	461a      	mov	r2, r3
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	4413      	add	r3, r2
 8002064:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8002066:	89fb      	ldrh	r3, [r7, #14]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	f44f 724c 	mov.w	r2, #816	; 0x330
 800206e:	2103      	movs	r1, #3
 8002070:	4618      	mov	r0, r3
 8002072:	f000 fd83 	bl	8002b7c <CODEC_IO_Write>
 8002076:	4603      	mov	r3, r0
 8002078:	461a      	mov	r2, r3
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	4413      	add	r3, r2
 800207e:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8002080:	89fb      	ldrh	r3, [r7, #14]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2233      	movs	r2, #51	; 0x33
 8002086:	2154      	movs	r1, #84	; 0x54
 8002088:	4618      	mov	r0, r3
 800208a:	f000 fd77 	bl	8002b7c <CODEC_IO_Write>
 800208e:	4603      	mov	r3, r0
 8002090:	461a      	mov	r2, r3
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	4413      	add	r3, r2
 8002096:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8002098:	f240 1001 	movw	r0, #257	; 0x101
 800209c:	f000 ff44 	bl	8002f28 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 80020a0:	89fb      	ldrh	r3, [r7, #14]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	22ee      	movs	r2, #238	; 0xee
 80020a6:	2160      	movs	r1, #96	; 0x60
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 fd67 	bl	8002b7c <CODEC_IO_Write>
 80020ae:	4603      	mov	r3, r0
 80020b0:	461a      	mov	r2, r3
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	4413      	add	r3, r2
 80020b6:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 80020b8:	89fb      	ldrh	r3, [r7, #14]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	22c0      	movs	r2, #192	; 0xc0
 80020be:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 fd5a 	bl	8002b7c <CODEC_IO_Write>
 80020c8:	4603      	mov	r3, r0
 80020ca:	461a      	mov	r2, r3
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	4413      	add	r3, r2
 80020d0:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 80020d2:	89fb      	ldrh	r3, [r7, #14]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	22c0      	movs	r2, #192	; 0xc0
 80020d8:	f240 6111 	movw	r1, #1553	; 0x611
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 fd4d 	bl	8002b7c <CODEC_IO_Write>
 80020e2:	4603      	mov	r3, r0
 80020e4:	461a      	mov	r2, r3
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	4413      	add	r3, r2
 80020ea:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80020ec:	89fb      	ldrh	r3, [r7, #14]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2210      	movs	r2, #16
 80020f2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 fd40 	bl	8002b7c <CODEC_IO_Write>
 80020fc:	4603      	mov	r3, r0
 80020fe:	461a      	mov	r2, r3
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	4413      	add	r3, r2
 8002104:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8002106:	89fb      	ldrh	r3, [r7, #14]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	22c0      	movs	r2, #192	; 0xc0
 800210c:	f240 6112 	movw	r1, #1554	; 0x612
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fd33 	bl	8002b7c <CODEC_IO_Write>
 8002116:	4603      	mov	r3, r0
 8002118:	461a      	mov	r2, r3
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	4413      	add	r3, r2
 800211e:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8002120:	89fb      	ldrh	r3, [r7, #14]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	22c0      	movs	r2, #192	; 0xc0
 8002126:	f240 6113 	movw	r1, #1555	; 0x613
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fd26 	bl	8002b7c <CODEC_IO_Write>
 8002130:	4603      	mov	r3, r0
 8002132:	461a      	mov	r2, r3
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	4413      	add	r3, r2
 8002138:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800213a:	89fb      	ldrh	r3, [r7, #14]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2210      	movs	r2, #16
 8002140:	f240 4122 	movw	r1, #1058	; 0x422
 8002144:	4618      	mov	r0, r3
 8002146:	f000 fd19 	bl	8002b7c <CODEC_IO_Write>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	4413      	add	r3, r2
 8002152:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002154:	7afa      	ldrb	r2, [r7, #11]
 8002156:	89fb      	ldrh	r3, [r7, #14]
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f984 	bl	8002468 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8002160:	8afb      	ldrh	r3, [r7, #22]
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 80a6 	beq.w	80022b4 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8002168:	8afb      	ldrh	r3, [r7, #22]
 800216a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800216e:	d003      	beq.n	8002178 <wm8994_Init+0xc30>
 8002170:	8afb      	ldrh	r3, [r7, #22]
 8002172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002176:	d12b      	bne.n	80021d0 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002178:	8b7b      	ldrh	r3, [r7, #26]
 800217a:	f043 0313 	orr.w	r3, r3, #19
 800217e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002180:	89fb      	ldrh	r3, [r7, #14]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	8b7a      	ldrh	r2, [r7, #26]
 8002186:	2101      	movs	r1, #1
 8002188:	4618      	mov	r0, r3
 800218a:	f000 fcf7 	bl	8002b7c <CODEC_IO_Write>
 800218e:	4603      	mov	r3, r0
 8002190:	461a      	mov	r2, r3
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	4413      	add	r3, r2
 8002196:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002198:	89fb      	ldrh	r3, [r7, #14]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2202      	movs	r2, #2
 800219e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fcea 	bl	8002b7c <CODEC_IO_Write>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461a      	mov	r2, r3
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	4413      	add	r3, r2
 80021b0:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 80021b2:	89fb      	ldrh	r3, [r7, #14]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021ba:	f240 4111 	movw	r1, #1041	; 0x411
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 fcdc 	bl	8002b7c <CODEC_IO_Write>
 80021c4:	4603      	mov	r3, r0
 80021c6:	461a      	mov	r2, r3
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	4413      	add	r3, r2
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	e06b      	b.n	80022a8 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80021d0:	8afb      	ldrh	r3, [r7, #22]
 80021d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021d6:	d139      	bne.n	800224c <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80021d8:	8b7b      	ldrh	r3, [r7, #26]
 80021da:	f043 0313 	orr.w	r3, r3, #19
 80021de:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80021e0:	89fb      	ldrh	r3, [r7, #14]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	8b7a      	ldrh	r2, [r7, #26]
 80021e6:	2101      	movs	r1, #1
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 fcc7 	bl	8002b7c <CODEC_IO_Write>
 80021ee:	4603      	mov	r3, r0
 80021f0:	461a      	mov	r2, r3
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	4413      	add	r3, r2
 80021f6:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80021f8:	89fb      	ldrh	r3, [r7, #14]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2202      	movs	r2, #2
 80021fe:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8002202:	4618      	mov	r0, r3
 8002204:	f000 fcba 	bl	8002b7c <CODEC_IO_Write>
 8002208:	4603      	mov	r3, r0
 800220a:	461a      	mov	r2, r3
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	4413      	add	r3, r2
 8002210:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8002212:	89fb      	ldrh	r3, [r7, #14]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800221a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800221e:	4618      	mov	r0, r3
 8002220:	f000 fcac 	bl	8002b7c <CODEC_IO_Write>
 8002224:	4603      	mov	r3, r0
 8002226:	461a      	mov	r2, r3
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	4413      	add	r3, r2
 800222c:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 800222e:	89fb      	ldrh	r3, [r7, #14]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8002236:	f240 4111 	movw	r1, #1041	; 0x411
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fc9e 	bl	8002b7c <CODEC_IO_Write>
 8002240:	4603      	mov	r3, r0
 8002242:	461a      	mov	r2, r3
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	4413      	add	r3, r2
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	e02d      	b.n	80022a8 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 800224c:	8afb      	ldrh	r3, [r7, #22]
 800224e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002252:	d003      	beq.n	800225c <wm8994_Init+0xd14>
 8002254:	8afb      	ldrh	r3, [r7, #22]
 8002256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800225a:	d125      	bne.n	80022a8 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 800225c:	89fb      	ldrh	r3, [r7, #14]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	220b      	movs	r2, #11
 8002262:	2118      	movs	r1, #24
 8002264:	4618      	mov	r0, r3
 8002266:	f000 fc89 	bl	8002b7c <CODEC_IO_Write>
 800226a:	4603      	mov	r3, r0
 800226c:	461a      	mov	r2, r3
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	4413      	add	r3, r2
 8002272:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8002274:	89fb      	ldrh	r3, [r7, #14]
 8002276:	b2db      	uxtb	r3, r3
 8002278:	220b      	movs	r2, #11
 800227a:	211a      	movs	r1, #26
 800227c:	4618      	mov	r0, r3
 800227e:	f000 fc7d 	bl	8002b7c <CODEC_IO_Write>
 8002282:	4603      	mov	r3, r0
 8002284:	461a      	mov	r2, r3
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	4413      	add	r3, r2
 800228a:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800228c:	89fb      	ldrh	r3, [r7, #14]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8002294:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8002298:	4618      	mov	r0, r3
 800229a:	f000 fc6f 	bl	8002b7c <CODEC_IO_Write>
 800229e:	4603      	mov	r3, r0
 80022a0:	461a      	mov	r2, r3
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	4413      	add	r3, r2
 80022a6:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80022a8:	7afa      	ldrb	r2, [r7, #11]
 80022aa:	89fb      	ldrh	r3, [r7, #14]
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f8da 	bl	8002468 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 80022b4:	69fb      	ldr	r3, [r7, #28]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3720      	adds	r7, #32
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop

080022c0 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80022c4:	f000 fdd2 	bl	8002e6c <AUDIO_IO_DeInit>
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}

080022cc <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80022d6:	f000 fdbf 	bl	8002e58 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 fdf5 	bl	8002ed0 <AUDIO_IO_Read>
 80022e6:	4603      	mov	r3, r0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	6039      	str	r1, [r7, #0]
 80022fa:	80fb      	strh	r3, [r7, #6]
 80022fc:	4613      	mov	r3, r2
 80022fe:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002304:	88fb      	ldrh	r3, [r7, #6]
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f9d1 	bl	80026b0 <wm8994_SetMute>
 800230e:	4602      	mov	r2, r0
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4413      	add	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002316:	68fb      	ldr	r3, [r7, #12]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800232e:	88fb      	ldrh	r3, [r7, #6]
 8002330:	2101      	movs	r1, #1
 8002332:	4618      	mov	r0, r3
 8002334:	f000 f9bc 	bl	80026b0 <wm8994_SetMute>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4413      	add	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2201      	movs	r2, #1
 8002346:	2102      	movs	r1, #2
 8002348:	4618      	mov	r0, r3
 800234a:	f000 fc17 	bl	8002b7c <CODEC_IO_Write>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4413      	add	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8002358:	68fb      	ldr	r3, [r7, #12]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b084      	sub	sp, #16
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f000 f99b 	bl	80026b0 <wm8994_SetMute>
 800237a:	4602      	mov	r2, r0
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4413      	add	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	6039      	str	r1, [r7, #0]
 8002396:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 800239c:	4b31      	ldr	r3, [pc, #196]	; (8002464 <wm8994_Stop+0xd8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d05a      	beq.n	800245a <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	2101      	movs	r1, #1
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 f981 	bl	80026b0 <wm8994_SetMute>
 80023ae:	4602      	mov	r2, r0
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4413      	add	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d04e      	beq.n	800245a <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023c4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 fbd7 	bl	8002b7c <CODEC_IO_Write>
 80023ce:	4603      	mov	r3, r0
 80023d0:	461a      	mov	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4413      	add	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023e0:	f240 4122 	movw	r1, #1058	; 0x422
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fbc9 	bl	8002b7c <CODEC_IO_Write>
 80023ea:	4603      	mov	r3, r0
 80023ec:	461a      	mov	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4413      	add	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2200      	movs	r2, #0
 80023fa:	212d      	movs	r1, #45	; 0x2d
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 fbbd 	bl	8002b7c <CODEC_IO_Write>
 8002402:	4603      	mov	r3, r0
 8002404:	461a      	mov	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4413      	add	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2200      	movs	r2, #0
 8002412:	212e      	movs	r1, #46	; 0x2e
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fbb1 	bl	8002b7c <CODEC_IO_Write>
 800241a:	4603      	mov	r3, r0
 800241c:	461a      	mov	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4413      	add	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2200      	movs	r2, #0
 800242a:	2105      	movs	r1, #5
 800242c:	4618      	mov	r0, r3
 800242e:	f000 fba5 	bl	8002b7c <CODEC_IO_Write>
 8002432:	4603      	mov	r3, r0
 8002434:	461a      	mov	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4413      	add	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2200      	movs	r2, #0
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f000 fb99 	bl	8002b7c <CODEC_IO_Write>
 800244a:	4603      	mov	r3, r0
 800244c:	461a      	mov	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4413      	add	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <wm8994_Stop+0xd8>)
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 800245a:	68fb      	ldr	r3, [r7, #12]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	200003bc 	.word	0x200003bc

08002468 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	460a      	mov	r2, r1
 8002472:	80fb      	strh	r3, [r7, #6]
 8002474:	4613      	mov	r3, r2
 8002476:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800247c:	797b      	ldrb	r3, [r7, #5]
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d80b      	bhi.n	800249a <wm8994_SetVolume+0x32>
 8002482:	797a      	ldrb	r2, [r7, #5]
 8002484:	4613      	mov	r3, r2
 8002486:	019b      	lsls	r3, r3, #6
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	4a86      	ldr	r2, [pc, #536]	; (80026a4 <wm8994_SetVolume+0x23c>)
 800248c:	fb82 1203 	smull	r1, r2, r2, r3
 8002490:	1152      	asrs	r2, r2, #5
 8002492:	17db      	asrs	r3, r3, #31
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	e000      	b.n	800249c <wm8994_SetVolume+0x34>
 800249a:	2364      	movs	r3, #100	; 0x64
 800249c:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 800249e:	4b82      	ldr	r3, [pc, #520]	; (80026a8 <wm8994_SetVolume+0x240>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 809b 	beq.w	80025de <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 80024a8:	7afb      	ldrb	r3, [r7, #11]
 80024aa:	2b3e      	cmp	r3, #62	; 0x3e
 80024ac:	d93d      	bls.n	800252a <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f8fc 	bl	80026b0 <wm8994_SetMute>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4413      	add	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f240 127f 	movw	r2, #383	; 0x17f
 80024c8:	211c      	movs	r1, #28
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 fb56 	bl	8002b7c <CODEC_IO_Write>
 80024d0:	4603      	mov	r3, r0
 80024d2:	461a      	mov	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	f240 127f 	movw	r2, #383	; 0x17f
 80024e2:	211d      	movs	r1, #29
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 fb49 	bl	8002b7c <CODEC_IO_Write>
 80024ea:	4603      	mov	r3, r0
 80024ec:	461a      	mov	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4413      	add	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f240 127f 	movw	r2, #383	; 0x17f
 80024fc:	2126      	movs	r1, #38	; 0x26
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fb3c 	bl	8002b7c <CODEC_IO_Write>
 8002504:	4603      	mov	r3, r0
 8002506:	461a      	mov	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4413      	add	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	f240 127f 	movw	r2, #383	; 0x17f
 8002516:	2127      	movs	r1, #39	; 0x27
 8002518:	4618      	mov	r0, r3
 800251a:	f000 fb2f 	bl	8002b7c <CODEC_IO_Write>
 800251e:	4603      	mov	r3, r0
 8002520:	461a      	mov	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4413      	add	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	e059      	b.n	80025de <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 800252a:	797b      	ldrb	r3, [r7, #5]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d109      	bne.n	8002544 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002530:	88fb      	ldrh	r3, [r7, #6]
 8002532:	2101      	movs	r1, #1
 8002534:	4618      	mov	r0, r3
 8002536:	f000 f8bb 	bl	80026b0 <wm8994_SetMute>
 800253a:	4602      	mov	r2, r0
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	e04c      	b.n	80025de <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002544:	88fb      	ldrh	r3, [r7, #6]
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f000 f8b1 	bl	80026b0 <wm8994_SetMute>
 800254e:	4602      	mov	r2, r0
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4413      	add	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	b2d8      	uxtb	r0, r3
 800255a:	7afb      	ldrb	r3, [r7, #11]
 800255c:	b21b      	sxth	r3, r3
 800255e:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8002562:	b21b      	sxth	r3, r3
 8002564:	b29b      	uxth	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	211c      	movs	r1, #28
 800256a:	f000 fb07 	bl	8002b7c <CODEC_IO_Write>
 800256e:	4603      	mov	r3, r0
 8002570:	461a      	mov	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4413      	add	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8002578:	88fb      	ldrh	r3, [r7, #6]
 800257a:	b2d8      	uxtb	r0, r3
 800257c:	7afb      	ldrb	r3, [r7, #11]
 800257e:	b21b      	sxth	r3, r3
 8002580:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8002584:	b21b      	sxth	r3, r3
 8002586:	b29b      	uxth	r3, r3
 8002588:	461a      	mov	r2, r3
 800258a:	211d      	movs	r1, #29
 800258c:	f000 faf6 	bl	8002b7c <CODEC_IO_Write>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4413      	add	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	b2d8      	uxtb	r0, r3
 800259e:	7afb      	ldrb	r3, [r7, #11]
 80025a0:	b21b      	sxth	r3, r3
 80025a2:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80025a6:	b21b      	sxth	r3, r3
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	461a      	mov	r2, r3
 80025ac:	2126      	movs	r1, #38	; 0x26
 80025ae:	f000 fae5 	bl	8002b7c <CODEC_IO_Write>
 80025b2:	4603      	mov	r3, r0
 80025b4:	461a      	mov	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4413      	add	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	b2d8      	uxtb	r0, r3
 80025c0:	7afb      	ldrb	r3, [r7, #11]
 80025c2:	b21b      	sxth	r3, r3
 80025c4:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80025c8:	b21b      	sxth	r3, r3
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	2127      	movs	r1, #39	; 0x27
 80025d0:	f000 fad4 	bl	8002b7c <CODEC_IO_Write>
 80025d4:	4603      	mov	r3, r0
 80025d6:	461a      	mov	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4413      	add	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 80025de:	4b33      	ldr	r3, [pc, #204]	; (80026ac <wm8994_SetVolume+0x244>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d059      	beq.n	800269a <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80025e6:	797b      	ldrb	r3, [r7, #5]
 80025e8:	2b63      	cmp	r3, #99	; 0x63
 80025ea:	d80c      	bhi.n	8002606 <wm8994_SetVolume+0x19e>
 80025ec:	797a      	ldrb	r2, [r7, #5]
 80025ee:	4613      	mov	r3, r2
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	1a9b      	subs	r3, r3, r2
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	4a2b      	ldr	r2, [pc, #172]	; (80026a4 <wm8994_SetVolume+0x23c>)
 80025f8:	fb82 1203 	smull	r1, r2, r2, r3
 80025fc:	1152      	asrs	r2, r2, #5
 80025fe:	17db      	asrs	r3, r3, #31
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	e000      	b.n	8002608 <wm8994_SetVolume+0x1a0>
 8002606:	23ef      	movs	r3, #239	; 0xef
 8002608:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	b2d8      	uxtb	r0, r3
 800260e:	7afb      	ldrb	r3, [r7, #11]
 8002610:	b21b      	sxth	r3, r3
 8002612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002616:	b21b      	sxth	r3, r3
 8002618:	b29b      	uxth	r3, r3
 800261a:	461a      	mov	r2, r3
 800261c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002620:	f000 faac 	bl	8002b7c <CODEC_IO_Write>
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4413      	add	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	b2d8      	uxtb	r0, r3
 8002632:	7afb      	ldrb	r3, [r7, #11]
 8002634:	b21b      	sxth	r3, r3
 8002636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263a:	b21b      	sxth	r3, r3
 800263c:	b29b      	uxth	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	f240 4101 	movw	r1, #1025	; 0x401
 8002644:	f000 fa9a 	bl	8002b7c <CODEC_IO_Write>
 8002648:	4603      	mov	r3, r0
 800264a:	461a      	mov	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4413      	add	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	b2d8      	uxtb	r0, r3
 8002656:	7afb      	ldrb	r3, [r7, #11]
 8002658:	b21b      	sxth	r3, r3
 800265a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265e:	b21b      	sxth	r3, r3
 8002660:	b29b      	uxth	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	f240 4104 	movw	r1, #1028	; 0x404
 8002668:	f000 fa88 	bl	8002b7c <CODEC_IO_Write>
 800266c:	4603      	mov	r3, r0
 800266e:	461a      	mov	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	b2d8      	uxtb	r0, r3
 800267a:	7afb      	ldrb	r3, [r7, #11]
 800267c:	b21b      	sxth	r3, r3
 800267e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002682:	b21b      	sxth	r3, r3
 8002684:	b29b      	uxth	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	f240 4105 	movw	r1, #1029	; 0x405
 800268c:	f000 fa76 	bl	8002b7c <CODEC_IO_Write>
 8002690:	4603      	mov	r3, r0
 8002692:	461a      	mov	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4413      	add	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 800269a:	68fb      	ldr	r3, [r7, #12]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	51eb851f 	.word	0x51eb851f
 80026a8:	200003bc 	.word	0x200003bc
 80026ac:	200003c0 	.word	0x200003c0

080026b0 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	6039      	str	r1, [r7, #0]
 80026ba:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 80026c0:	4b21      	ldr	r3, [pc, #132]	; (8002748 <wm8994_SetMute+0x98>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d039      	beq.n	800273c <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d11c      	bne.n	8002708 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026d6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fa4e 	bl	8002b7c <CODEC_IO_Write>
 80026e0:	4603      	mov	r3, r0
 80026e2:	461a      	mov	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026f2:	f240 4122 	movw	r1, #1058	; 0x422
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fa40 	bl	8002b7c <CODEC_IO_Write>
 80026fc:	4603      	mov	r3, r0
 80026fe:	461a      	mov	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4413      	add	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	e019      	b.n	800273c <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2210      	movs	r2, #16
 800270e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fa32 	bl	8002b7c <CODEC_IO_Write>
 8002718:	4603      	mov	r3, r0
 800271a:	461a      	mov	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4413      	add	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2210      	movs	r2, #16
 8002728:	f240 4122 	movw	r1, #1058	; 0x422
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fa25 	bl	8002b7c <CODEC_IO_Write>
 8002732:	4603      	mov	r3, r0
 8002734:	461a      	mov	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4413      	add	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 800273c:	68fb      	ldr	r3, [r7, #12]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	200003bc 	.word	0x200003bc

0800274c <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	460a      	mov	r2, r1
 8002756:	80fb      	strh	r3, [r7, #6]
 8002758:	4613      	mov	r3, r2
 800275a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8002760:	797b      	ldrb	r3, [r7, #5]
 8002762:	2b03      	cmp	r3, #3
 8002764:	f000 808c 	beq.w	8002880 <wm8994_SetOutputMode+0x134>
 8002768:	2b03      	cmp	r3, #3
 800276a:	f300 80cb 	bgt.w	8002904 <wm8994_SetOutputMode+0x1b8>
 800276e:	2b01      	cmp	r3, #1
 8002770:	d002      	beq.n	8002778 <wm8994_SetOutputMode+0x2c>
 8002772:	2b02      	cmp	r3, #2
 8002774:	d042      	beq.n	80027fc <wm8994_SetOutputMode+0xb0>
 8002776:	e0c5      	b.n	8002904 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f640 420c 	movw	r2, #3084	; 0xc0c
 8002780:	2105      	movs	r1, #5
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f9fa 	bl	8002b7c <CODEC_IO_Write>
 8002788:	4603      	mov	r3, r0
 800278a:	461a      	mov	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4413      	add	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2200      	movs	r2, #0
 8002798:	f240 6101 	movw	r1, #1537	; 0x601
 800279c:	4618      	mov	r0, r3
 800279e:	f000 f9ed 	bl	8002b7c <CODEC_IO_Write>
 80027a2:	4603      	mov	r3, r0
 80027a4:	461a      	mov	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4413      	add	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80027ac:	88fb      	ldrh	r3, [r7, #6]
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2200      	movs	r2, #0
 80027b2:	f240 6102 	movw	r1, #1538	; 0x602
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 f9e0 	bl	8002b7c <CODEC_IO_Write>
 80027bc:	4603      	mov	r3, r0
 80027be:	461a      	mov	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4413      	add	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2202      	movs	r2, #2
 80027cc:	f240 6104 	movw	r1, #1540	; 0x604
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 f9d3 	bl	8002b7c <CODEC_IO_Write>
 80027d6:	4603      	mov	r3, r0
 80027d8:	461a      	mov	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4413      	add	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2202      	movs	r2, #2
 80027e6:	f240 6105 	movw	r1, #1541	; 0x605
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 f9c6 	bl	8002b7c <CODEC_IO_Write>
 80027f0:	4603      	mov	r3, r0
 80027f2:	461a      	mov	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4413      	add	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
    break;
 80027fa:	e0c5      	b.n	8002988 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f240 3203 	movw	r2, #771	; 0x303
 8002804:	2105      	movs	r1, #5
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f9b8 	bl	8002b7c <CODEC_IO_Write>
 800280c:	4603      	mov	r3, r0
 800280e:	461a      	mov	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4413      	add	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2201      	movs	r2, #1
 800281c:	f240 6101 	movw	r1, #1537	; 0x601
 8002820:	4618      	mov	r0, r3
 8002822:	f000 f9ab 	bl	8002b7c <CODEC_IO_Write>
 8002826:	4603      	mov	r3, r0
 8002828:	461a      	mov	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	4413      	add	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2201      	movs	r2, #1
 8002836:	f240 6102 	movw	r1, #1538	; 0x602
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f99e 	bl	8002b7c <CODEC_IO_Write>
 8002840:	4603      	mov	r3, r0
 8002842:	461a      	mov	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4413      	add	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2200      	movs	r2, #0
 8002850:	f240 6104 	movw	r1, #1540	; 0x604
 8002854:	4618      	mov	r0, r3
 8002856:	f000 f991 	bl	8002b7c <CODEC_IO_Write>
 800285a:	4603      	mov	r3, r0
 800285c:	461a      	mov	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4413      	add	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002864:	88fb      	ldrh	r3, [r7, #6]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2200      	movs	r2, #0
 800286a:	f240 6105 	movw	r1, #1541	; 0x605
 800286e:	4618      	mov	r0, r3
 8002870:	f000 f984 	bl	8002b7c <CODEC_IO_Write>
 8002874:	4603      	mov	r3, r0
 8002876:	461a      	mov	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4413      	add	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
    break;
 800287e:	e083      	b.n	8002988 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f640 720f 	movw	r2, #3855	; 0xf0f
 8002888:	2105      	movs	r1, #5
 800288a:	4618      	mov	r0, r3
 800288c:	f000 f976 	bl	8002b7c <CODEC_IO_Write>
 8002890:	4603      	mov	r3, r0
 8002892:	461a      	mov	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4413      	add	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2201      	movs	r2, #1
 80028a0:	f240 6101 	movw	r1, #1537	; 0x601
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 f969 	bl	8002b7c <CODEC_IO_Write>
 80028aa:	4603      	mov	r3, r0
 80028ac:	461a      	mov	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4413      	add	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80028b4:	88fb      	ldrh	r3, [r7, #6]
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2201      	movs	r2, #1
 80028ba:	f240 6102 	movw	r1, #1538	; 0x602
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f95c 	bl	8002b7c <CODEC_IO_Write>
 80028c4:	4603      	mov	r3, r0
 80028c6:	461a      	mov	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4413      	add	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2202      	movs	r2, #2
 80028d4:	f240 6104 	movw	r1, #1540	; 0x604
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 f94f 	bl	8002b7c <CODEC_IO_Write>
 80028de:	4603      	mov	r3, r0
 80028e0:	461a      	mov	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	4413      	add	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2202      	movs	r2, #2
 80028ee:	f240 6105 	movw	r1, #1541	; 0x605
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 f942 	bl	8002b7c <CODEC_IO_Write>
 80028f8:	4603      	mov	r3, r0
 80028fa:	461a      	mov	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4413      	add	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
    break;
 8002902:	e041      	b.n	8002988 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f240 3203 	movw	r2, #771	; 0x303
 800290c:	2105      	movs	r1, #5
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f934 	bl	8002b7c <CODEC_IO_Write>
 8002914:	4603      	mov	r3, r0
 8002916:	461a      	mov	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4413      	add	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800291e:	88fb      	ldrh	r3, [r7, #6]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2201      	movs	r2, #1
 8002924:	f240 6101 	movw	r1, #1537	; 0x601
 8002928:	4618      	mov	r0, r3
 800292a:	f000 f927 	bl	8002b7c <CODEC_IO_Write>
 800292e:	4603      	mov	r3, r0
 8002930:	461a      	mov	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4413      	add	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002938:	88fb      	ldrh	r3, [r7, #6]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2201      	movs	r2, #1
 800293e:	f240 6102 	movw	r1, #1538	; 0x602
 8002942:	4618      	mov	r0, r3
 8002944:	f000 f91a 	bl	8002b7c <CODEC_IO_Write>
 8002948:	4603      	mov	r3, r0
 800294a:	461a      	mov	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2200      	movs	r2, #0
 8002958:	f240 6104 	movw	r1, #1540	; 0x604
 800295c:	4618      	mov	r0, r3
 800295e:	f000 f90d 	bl	8002b7c <CODEC_IO_Write>
 8002962:	4603      	mov	r3, r0
 8002964:	461a      	mov	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4413      	add	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2200      	movs	r2, #0
 8002972:	f240 6105 	movw	r1, #1541	; 0x605
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f900 	bl	8002b7c <CODEC_IO_Write>
 800297c:	4603      	mov	r3, r0
 800297e:	461a      	mov	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4413      	add	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
    break;    
 8002986:	bf00      	nop
  }  
  return counter;
 8002988:	68fb      	ldr	r3, [r7, #12]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	6039      	str	r1, [r7, #0]
 800299e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	4a64      	ldr	r2, [pc, #400]	; (8002b38 <wm8994_SetFrequency+0x1a4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d079      	beq.n	8002aa0 <wm8994_SetFrequency+0x10c>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	4a62      	ldr	r2, [pc, #392]	; (8002b38 <wm8994_SetFrequency+0x1a4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	f200 80ad 	bhi.w	8002b10 <wm8994_SetFrequency+0x17c>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80029bc:	4293      	cmp	r3, r2
 80029be:	d061      	beq.n	8002a84 <wm8994_SetFrequency+0xf0>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80029c6:	4293      	cmp	r3, r2
 80029c8:	f200 80a2 	bhi.w	8002b10 <wm8994_SetFrequency+0x17c>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	f64a 4244 	movw	r2, #44100	; 0xac44
 80029d2:	4293      	cmp	r3, r2
 80029d4:	f000 808e 	beq.w	8002af4 <wm8994_SetFrequency+0x160>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f64a 4244 	movw	r2, #44100	; 0xac44
 80029de:	4293      	cmp	r3, r2
 80029e0:	f200 8096 	bhi.w	8002b10 <wm8994_SetFrequency+0x17c>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80029ea:	d03d      	beq.n	8002a68 <wm8994_SetFrequency+0xd4>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80029f2:	f200 808d 	bhi.w	8002b10 <wm8994_SetFrequency+0x17c>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	f245 6222 	movw	r2, #22050	; 0x5622
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d06b      	beq.n	8002ad8 <wm8994_SetFrequency+0x144>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	f245 6222 	movw	r2, #22050	; 0x5622
 8002a06:	4293      	cmp	r3, r2
 8002a08:	f200 8082 	bhi.w	8002b10 <wm8994_SetFrequency+0x17c>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002a12:	d01b      	beq.n	8002a4c <wm8994_SetFrequency+0xb8>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002a1a:	d879      	bhi.n	8002b10 <wm8994_SetFrequency+0x17c>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002a22:	d005      	beq.n	8002a30 <wm8994_SetFrequency+0x9c>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	f642 3211 	movw	r2, #11025	; 0x2b11
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d046      	beq.n	8002abc <wm8994_SetFrequency+0x128>
 8002a2e:	e06f      	b.n	8002b10 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2203      	movs	r2, #3
 8002a36:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f89e 	bl	8002b7c <CODEC_IO_Write>
 8002a40:	4603      	mov	r3, r0
 8002a42:	461a      	mov	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4413      	add	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
    break;
 8002a4a:	e06f      	b.n	8002b2c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2233      	movs	r2, #51	; 0x33
 8002a52:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 f890 	bl	8002b7c <CODEC_IO_Write>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4413      	add	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
    break;
 8002a66:	e061      	b.n	8002b2c <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8002a68:	88fb      	ldrh	r3, [r7, #6]
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2263      	movs	r2, #99	; 0x63
 8002a6e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 f882 	bl	8002b7c <CODEC_IO_Write>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4413      	add	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]
    break;
 8002a82:	e053      	b.n	8002b2c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2283      	movs	r2, #131	; 0x83
 8002a8a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 f874 	bl	8002b7c <CODEC_IO_Write>
 8002a94:	4603      	mov	r3, r0
 8002a96:	461a      	mov	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]
    break;
 8002a9e:	e045      	b.n	8002b2c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	22a3      	movs	r2, #163	; 0xa3
 8002aa6:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f866 	bl	8002b7c <CODEC_IO_Write>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
    break;
 8002aba:	e037      	b.n	8002b2c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2213      	movs	r2, #19
 8002ac2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f858 	bl	8002b7c <CODEC_IO_Write>
 8002acc:	4603      	mov	r3, r0
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]
    break;
 8002ad6:	e029      	b.n	8002b2c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2243      	movs	r2, #67	; 0x43
 8002ade:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 f84a 	bl	8002b7c <CODEC_IO_Write>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	461a      	mov	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4413      	add	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
    break;
 8002af2:	e01b      	b.n	8002b2c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2273      	movs	r2, #115	; 0x73
 8002afa:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f83c 	bl	8002b7c <CODEC_IO_Write>
 8002b04:	4603      	mov	r3, r0
 8002b06:	461a      	mov	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
    break; 
 8002b0e:	e00d      	b.n	8002b2c <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002b10:	88fb      	ldrh	r3, [r7, #6]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2283      	movs	r2, #131	; 0x83
 8002b16:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f82e 	bl	8002b7c <CODEC_IO_Write>
 8002b20:	4603      	mov	r3, r0
 8002b22:	461a      	mov	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4413      	add	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
    break; 
 8002b2a:	bf00      	nop
  }
  return counter;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	00017700 	.word	0x00017700

08002b3c <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8002b4a:	88fb      	ldrh	r3, [r7, #6]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f812 	bl	8002b7c <CODEC_IO_Write>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <wm8994_Reset+0x38>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8002b62:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <wm8994_Reset+0x3c>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]

  return counter;
 8002b68:	68fb      	ldr	r3, [r7, #12]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	200003bc 	.word	0x200003bc
 8002b78:	200003c0 	.word	0x200003c0

08002b7c <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	71fb      	strb	r3, [r7, #7]
 8002b86:	460b      	mov	r3, r1
 8002b88:	80bb      	strh	r3, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8002b92:	887a      	ldrh	r2, [r7, #2]
 8002b94:	88b9      	ldrh	r1, [r7, #4]
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 f96f 	bl	8002e7c <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	b2db      	uxtb	r3, r3
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08c      	sub	sp, #48	; 0x30
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a51      	ldr	r2, [pc, #324]	; (8002cfc <I2Cx_MspInit+0x150>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d14d      	bne.n	8002c58 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002bbc:	4b50      	ldr	r3, [pc, #320]	; (8002d00 <I2Cx_MspInit+0x154>)
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	4a4f      	ldr	r2, [pc, #316]	; (8002d00 <I2Cx_MspInit+0x154>)
 8002bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc8:	4b4d      	ldr	r3, [pc, #308]	; (8002d00 <I2Cx_MspInit+0x154>)
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002bd8:	2312      	movs	r3, #18
 8002bda:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002be0:	2302      	movs	r3, #2
 8002be2:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002be4:	2304      	movs	r3, #4
 8002be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002be8:	f107 031c 	add.w	r3, r7, #28
 8002bec:	4619      	mov	r1, r3
 8002bee:	4845      	ldr	r0, [pc, #276]	; (8002d04 <I2Cx_MspInit+0x158>)
 8002bf0:	f001 fb24 	bl	800423c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002bfa:	f107 031c 	add.w	r3, r7, #28
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4840      	ldr	r0, [pc, #256]	; (8002d04 <I2Cx_MspInit+0x158>)
 8002c02:	f001 fb1b 	bl	800423c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002c06:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <I2Cx_MspInit+0x154>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	4a3d      	ldr	r2, [pc, #244]	; (8002d00 <I2Cx_MspInit+0x154>)
 8002c0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c10:	6413      	str	r3, [r2, #64]	; 0x40
 8002c12:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <I2Cx_MspInit+0x154>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002c1e:	4b38      	ldr	r3, [pc, #224]	; (8002d00 <I2Cx_MspInit+0x154>)
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	4a37      	ldr	r2, [pc, #220]	; (8002d00 <I2Cx_MspInit+0x154>)
 8002c24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c28:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002c2a:	4b35      	ldr	r3, [pc, #212]	; (8002d00 <I2Cx_MspInit+0x154>)
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	4a34      	ldr	r2, [pc, #208]	; (8002d00 <I2Cx_MspInit+0x154>)
 8002c30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c34:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002c36:	2200      	movs	r2, #0
 8002c38:	210f      	movs	r1, #15
 8002c3a:	2048      	movs	r0, #72	; 0x48
 8002c3c:	f000 fe22 	bl	8003884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002c40:	2048      	movs	r0, #72	; 0x48
 8002c42:	f000 fe3b 	bl	80038bc <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002c46:	2200      	movs	r2, #0
 8002c48:	210f      	movs	r1, #15
 8002c4a:	2049      	movs	r0, #73	; 0x49
 8002c4c:	f000 fe1a 	bl	8003884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002c50:	2049      	movs	r0, #73	; 0x49
 8002c52:	f000 fe33 	bl	80038bc <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002c56:	e04d      	b.n	8002cf4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002c58:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <I2Cx_MspInit+0x154>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	4a28      	ldr	r2, [pc, #160]	; (8002d00 <I2Cx_MspInit+0x154>)
 8002c5e:	f043 0302 	orr.w	r3, r3, #2
 8002c62:	6313      	str	r3, [r2, #48]	; 0x30
 8002c64:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <I2Cx_MspInit+0x154>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c74:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002c76:	2312      	movs	r3, #18
 8002c78:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002c82:	2304      	movs	r3, #4
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002c86:	f107 031c 	add.w	r3, r7, #28
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	481e      	ldr	r0, [pc, #120]	; (8002d08 <I2Cx_MspInit+0x15c>)
 8002c8e:	f001 fad5 	bl	800423c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002c98:	f107 031c 	add.w	r3, r7, #28
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	481a      	ldr	r0, [pc, #104]	; (8002d08 <I2Cx_MspInit+0x15c>)
 8002ca0:	f001 facc 	bl	800423c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002ca4:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <I2Cx_MspInit+0x154>)
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	4a15      	ldr	r2, [pc, #84]	; (8002d00 <I2Cx_MspInit+0x154>)
 8002caa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cae:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb0:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <I2Cx_MspInit+0x154>)
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002cbc:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <I2Cx_MspInit+0x154>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	4a0f      	ldr	r2, [pc, #60]	; (8002d00 <I2Cx_MspInit+0x154>)
 8002cc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cc6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002cc8:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <I2Cx_MspInit+0x154>)
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	4a0c      	ldr	r2, [pc, #48]	; (8002d00 <I2Cx_MspInit+0x154>)
 8002cce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cd2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	210f      	movs	r1, #15
 8002cd8:	201f      	movs	r0, #31
 8002cda:	f000 fdd3 	bl	8003884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002cde:	201f      	movs	r0, #31
 8002ce0:	f000 fdec 	bl	80038bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	210f      	movs	r1, #15
 8002ce8:	2020      	movs	r0, #32
 8002cea:	f000 fdcb 	bl	8003884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002cee:	2020      	movs	r0, #32
 8002cf0:	f000 fde4 	bl	80038bc <HAL_NVIC_EnableIRQ>
}
 8002cf4:	bf00      	nop
 8002cf6:	3730      	adds	r7, #48	; 0x30
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	200003c4 	.word	0x200003c4
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40021c00 	.word	0x40021c00
 8002d08:	40020400 	.word	0x40020400

08002d0c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f002 f84b 	bl	8004db0 <HAL_I2C_GetState>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d125      	bne.n	8002d6c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a14      	ldr	r2, [pc, #80]	; (8002d74 <I2Cx_Init+0x68>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d103      	bne.n	8002d30 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a13      	ldr	r2, [pc, #76]	; (8002d78 <I2Cx_Init+0x6c>)
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	e002      	b.n	8002d36 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a12      	ldr	r2, [pc, #72]	; (8002d7c <I2Cx_Init+0x70>)
 8002d34:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a11      	ldr	r2, [pc, #68]	; (8002d80 <I2Cx_Init+0x74>)
 8002d3a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff ff23 	bl	8002bac <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f001 fd20 	bl	80047ac <HAL_I2C_Init>
  }
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	200003c4 	.word	0x200003c4
 8002d78:	40005c00 	.word	0x40005c00
 8002d7c:	40005400 	.word	0x40005400
 8002d80:	40912732 	.word	0x40912732

08002d84 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08a      	sub	sp, #40	; 0x28
 8002d88:	af04      	add	r7, sp, #16
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	4608      	mov	r0, r1
 8002d8e:	4611      	mov	r1, r2
 8002d90:	461a      	mov	r2, r3
 8002d92:	4603      	mov	r3, r0
 8002d94:	72fb      	strb	r3, [r7, #11]
 8002d96:	460b      	mov	r3, r1
 8002d98:	813b      	strh	r3, [r7, #8]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002da2:	7afb      	ldrb	r3, [r7, #11]
 8002da4:	b299      	uxth	r1, r3
 8002da6:	88f8      	ldrh	r0, [r7, #6]
 8002da8:	893a      	ldrh	r2, [r7, #8]
 8002daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dae:	9302      	str	r3, [sp, #8]
 8002db0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002db2:	9301      	str	r3, [sp, #4]
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	4603      	mov	r3, r0
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f001 fede 	bl	8004b7c <HAL_I2C_Mem_Read>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002dca:	7afb      	ldrb	r3, [r7, #11]
 8002dcc:	4619      	mov	r1, r3
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 f832 	bl	8002e38 <I2Cx_Error>
  }
  return status;    
 8002dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b08a      	sub	sp, #40	; 0x28
 8002de2:	af04      	add	r7, sp, #16
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	4608      	mov	r0, r1
 8002de8:	4611      	mov	r1, r2
 8002dea:	461a      	mov	r2, r3
 8002dec:	4603      	mov	r3, r0
 8002dee:	72fb      	strb	r3, [r7, #11]
 8002df0:	460b      	mov	r3, r1
 8002df2:	813b      	strh	r3, [r7, #8]
 8002df4:	4613      	mov	r3, r2
 8002df6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002dfc:	7afb      	ldrb	r3, [r7, #11]
 8002dfe:	b299      	uxth	r1, r3
 8002e00:	88f8      	ldrh	r0, [r7, #6]
 8002e02:	893a      	ldrh	r2, [r7, #8]
 8002e04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e08:	9302      	str	r3, [sp, #8]
 8002e0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	4603      	mov	r3, r0
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f001 fd9d 	bl	8004954 <HAL_I2C_Mem_Write>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002e1e:	7dfb      	ldrb	r3, [r7, #23]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d004      	beq.n	8002e2e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002e24:	7afb      	ldrb	r3, [r7, #11]
 8002e26:	4619      	mov	r1, r3
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f805 	bl	8002e38 <I2Cx_Error>
  }
  return status;
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	460b      	mov	r3, r1
 8002e42:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f001 fd41 	bl	80048cc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff ff5e 	bl	8002d0c <I2Cx_Init>
}
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002e5c:	4802      	ldr	r0, [pc, #8]	; (8002e68 <AUDIO_IO_Init+0x10>)
 8002e5e:	f7ff ff55 	bl	8002d0c <I2Cx_Init>
}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200003c4 	.word	0x200003c4

08002e6c <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
	...

08002e7c <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
 8002e86:	460b      	mov	r3, r1
 8002e88:	80bb      	strh	r3, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8002e8e:	887b      	ldrh	r3, [r7, #2]
 8002e90:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8002e92:	89fb      	ldrh	r3, [r7, #14]
 8002e94:	0a1b      	lsrs	r3, r3, #8
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8002e9a:	89fb      	ldrh	r3, [r7, #14]
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	b21a      	sxth	r2, r3
 8002ea2:	887b      	ldrh	r3, [r7, #2]
 8002ea4:	b21b      	sxth	r3, r3
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	b21b      	sxth	r3, r3
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8002eae:	88ba      	ldrh	r2, [r7, #4]
 8002eb0:	79f9      	ldrb	r1, [r7, #7]
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	9301      	str	r3, [sp, #4]
 8002eb6:	1cbb      	adds	r3, r7, #2
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	2302      	movs	r3, #2
 8002ebc:	4803      	ldr	r0, [pc, #12]	; (8002ecc <AUDIO_IO_Write+0x50>)
 8002ebe:	f7ff ff8e 	bl	8002dde <I2Cx_WriteMultiple>
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	200003c4 	.word	0x200003c4

08002ed0 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	460a      	mov	r2, r1
 8002eda:	71fb      	strb	r3, [r7, #7]
 8002edc:	4613      	mov	r3, r2
 8002ede:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	81bb      	strh	r3, [r7, #12]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8002ee8:	88ba      	ldrh	r2, [r7, #4]
 8002eea:	79f9      	ldrb	r1, [r7, #7]
 8002eec:	2302      	movs	r3, #2
 8002eee:	9301      	str	r3, [sp, #4]
 8002ef0:	f107 030c 	add.w	r3, r7, #12
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	480a      	ldr	r0, [pc, #40]	; (8002f24 <AUDIO_IO_Read+0x54>)
 8002efa:	f7ff ff43 	bl	8002d84 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8002efe:	89bb      	ldrh	r3, [r7, #12]
 8002f00:	0a1b      	lsrs	r3, r3, #8
 8002f02:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8002f04:	89bb      	ldrh	r3, [r7, #12]
 8002f06:	021b      	lsls	r3, r3, #8
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	b21a      	sxth	r2, r3
 8002f0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	b21b      	sxth	r3, r3
 8002f14:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8002f16:	89fb      	ldrh	r3, [r7, #14]
 8002f18:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8002f1a:	89bb      	ldrh	r3, [r7, #12]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	200003c4 	.word	0x200003c4

08002f28 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 fbcb 	bl	80036cc <HAL_Delay>
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8002f48:	480e      	ldr	r0, [pc, #56]	; (8002f84 <HAL_SAI_ErrorCallback+0x44>)
 8002f4a:	f004 fa0b 	bl	8007364 <HAL_SAI_GetState>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8002f52:	480d      	ldr	r0, [pc, #52]	; (8002f88 <HAL_SAI_ErrorCallback+0x48>)
 8002f54:	f004 fa06 	bl	8007364 <HAL_SAI_GetState>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d002      	beq.n	8002f68 <HAL_SAI_ErrorCallback+0x28>
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	2b12      	cmp	r3, #18
 8002f66:	d101      	bne.n	8002f6c <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8002f68:	f000 f810 	bl	8002f8c <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8002f6c:	7bbb      	ldrb	r3, [r7, #14]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d002      	beq.n	8002f78 <HAL_SAI_ErrorCallback+0x38>
 8002f72:	7bbb      	ldrb	r3, [r7, #14]
 8002f74:	2b22      	cmp	r3, #34	; 0x22
 8002f76:	d101      	bne.n	8002f7c <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8002f78:	f000 f9f4 	bl	8003364 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	2000041c 	.word	0x2000041c
 8002f88:	200004a0 	.word	0x200004a0

08002f8c <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
	...

08002f9c <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08c      	sub	sp, #48	; 0x30
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8002fa6:	4b63      	ldr	r3, [pc, #396]	; (8003134 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002faa:	4a62      	ldr	r2, [pc, #392]	; (8003134 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002fac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb2:	4b60      	ldr	r3, [pc, #384]	; (8003134 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8002fbe:	4b5d      	ldr	r3, [pc, #372]	; (8003134 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	4a5c      	ldr	r2, [pc, #368]	; (8003134 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fca:	4b5a      	ldr	r3, [pc, #360]	; (8003134 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8002fd6:	4b57      	ldr	r3, [pc, #348]	; (8003134 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	4a56      	ldr	r2, [pc, #344]	; (8003134 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe2:	4b54      	ldr	r3, [pc, #336]	; (8003134 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8002fee:	4b51      	ldr	r3, [pc, #324]	; (8003134 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	4a50      	ldr	r2, [pc, #320]	; (8003134 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffa:	4b4e      	ldr	r3, [pc, #312]	; (8003134 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8003006:	2380      	movs	r3, #128	; 0x80
 8003008:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800300a:	2302      	movs	r3, #2
 800300c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800300e:	2300      	movs	r3, #0
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003012:	2303      	movs	r3, #3
 8003014:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003016:	230a      	movs	r3, #10
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 800301a:	f107 031c 	add.w	r3, r7, #28
 800301e:	4619      	mov	r1, r3
 8003020:	4845      	ldr	r0, [pc, #276]	; (8003138 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003022:	f001 f90b 	bl	800423c <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8003026:	2320      	movs	r3, #32
 8003028:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800302a:	2302      	movs	r3, #2
 800302c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800302e:	2300      	movs	r3, #0
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003032:	2303      	movs	r3, #3
 8003034:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8003036:	230a      	movs	r3, #10
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800303a:	f107 031c 	add.w	r3, r7, #28
 800303e:	4619      	mov	r1, r3
 8003040:	483d      	ldr	r0, [pc, #244]	; (8003138 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003042:	f001 f8fb 	bl	800423c <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8003046:	2340      	movs	r3, #64	; 0x40
 8003048:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800304a:	2302      	movs	r3, #2
 800304c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800304e:	2300      	movs	r3, #0
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003052:	2303      	movs	r3, #3
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003056:	230a      	movs	r3, #10
 8003058:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800305a:	f107 031c 	add.w	r3, r7, #28
 800305e:	4619      	mov	r1, r3
 8003060:	4835      	ldr	r0, [pc, #212]	; (8003138 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003062:	f001 f8eb 	bl	800423c <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8003066:	2310      	movs	r3, #16
 8003068:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800306a:	2302      	movs	r3, #2
 800306c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800306e:	2300      	movs	r3, #0
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003072:	2303      	movs	r3, #3
 8003074:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003076:	230a      	movs	r3, #10
 8003078:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800307a:	f107 031c 	add.w	r3, r7, #28
 800307e:	4619      	mov	r1, r3
 8003080:	482d      	ldr	r0, [pc, #180]	; (8003138 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003082:	f001 f8db 	bl	800423c <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8003086:	4b2b      	ldr	r3, [pc, #172]	; (8003134 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	4a2a      	ldr	r2, [pc, #168]	; (8003134 <BSP_AUDIO_OUT_MspInit+0x198>)
 800308c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003090:	6313      	str	r3, [r2, #48]	; 0x30
 8003092:	4b28      	ldr	r3, [pc, #160]	; (8003134 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a26      	ldr	r2, [pc, #152]	; (800313c <BSP_AUDIO_OUT_MspInit+0x1a0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d138      	bne.n	800311a <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 80030a8:	4b25      	ldr	r3, [pc, #148]	; (8003140 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80030aa:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80030ae:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80030b0:	4b23      	ldr	r3, [pc, #140]	; (8003140 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80030b2:	2240      	movs	r2, #64	; 0x40
 80030b4:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80030b6:	4b22      	ldr	r3, [pc, #136]	; (8003140 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80030bc:	4b20      	ldr	r3, [pc, #128]	; (8003140 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80030be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030c2:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 80030c4:	4b1e      	ldr	r3, [pc, #120]	; (8003140 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80030c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030ca:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 80030cc:	4b1c      	ldr	r3, [pc, #112]	; (8003140 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80030ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030d2:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 80030d4:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80030d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030da:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 80030dc:	4b18      	ldr	r3, [pc, #96]	; (8003140 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80030de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030e2:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80030e4:	4b16      	ldr	r3, [pc, #88]	; (8003140 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80030e6:	2204      	movs	r2, #4
 80030e8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80030ea:	4b15      	ldr	r3, [pc, #84]	; (8003140 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80030ec:	2203      	movs	r2, #3
 80030ee:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80030f0:	4b13      	ldr	r3, [pc, #76]	; (8003140 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80030f6:	4b12      	ldr	r3, [pc, #72]	; (8003140 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80030fc:	4b10      	ldr	r3, [pc, #64]	; (8003140 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80030fe:	4a11      	ldr	r2, [pc, #68]	; (8003144 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8003100:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a0e      	ldr	r2, [pc, #56]	; (8003140 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003106:	66da      	str	r2, [r3, #108]	; 0x6c
 8003108:	4a0d      	ldr	r2, [pc, #52]	; (8003140 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 800310e:	480c      	ldr	r0, [pc, #48]	; (8003140 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003110:	f000 fc90 	bl	8003a34 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8003114:	480a      	ldr	r0, [pc, #40]	; (8003140 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003116:	f000 fbdf 	bl	80038d8 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800311a:	2200      	movs	r2, #0
 800311c:	210e      	movs	r1, #14
 800311e:	203c      	movs	r0, #60	; 0x3c
 8003120:	f000 fbb0 	bl	8003884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8003124:	203c      	movs	r0, #60	; 0x3c
 8003126:	f000 fbc9 	bl	80038bc <HAL_NVIC_EnableIRQ>
}
 800312a:	bf00      	nop
 800312c:	3730      	adds	r7, #48	; 0x30
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800
 8003138:	40022000 	.word	0x40022000
 800313c:	40015c04 	.word	0x40015c04
 8003140:	20000524 	.word	0x20000524
 8003144:	40026470 	.word	0x40026470

08003148 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8003148:	b580      	push	{r7, lr}
 800314a:	b0a6      	sub	sp, #152	; 0x98
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	4618      	mov	r0, r3
 800315a:	f003 fc75 	bl	8006a48 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f642 3211 	movw	r2, #11025	; 0x2b11
 8003164:	4293      	cmp	r3, r2
 8003166:	d009      	beq.n	800317c <BSP_AUDIO_OUT_ClockConfig+0x34>
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f245 6222 	movw	r2, #22050	; 0x5622
 800316e:	4293      	cmp	r3, r2
 8003170:	d004      	beq.n	800317c <BSP_AUDIO_OUT_ClockConfig+0x34>
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003178:	4293      	cmp	r3, r2
 800317a:	d112      	bne.n	80031a2 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800317c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003180:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8003182:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003186:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8003188:	f240 13ad 	movw	r3, #429	; 0x1ad
 800318c:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 800318e:	2302      	movs	r3, #2
 8003190:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8003192:	2313      	movs	r3, #19
 8003194:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003196:	f107 0314 	add.w	r3, r7, #20
 800319a:	4618      	mov	r0, r3
 800319c:	f003 f864 	bl	8006268 <HAL_RCCEx_PeriphCLKConfig>
 80031a0:	e012      	b.n	80031c8 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80031a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031a6:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80031a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031ac:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 80031ae:	f44f 73ac 	mov.w	r3, #344	; 0x158
 80031b2:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 80031b4:	2307      	movs	r3, #7
 80031b6:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 80031b8:	2301      	movs	r3, #1
 80031ba:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80031bc:	f107 0314 	add.w	r3, r7, #20
 80031c0:	4618      	mov	r0, r3
 80031c2:	f003 f851 	bl	8006268 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 80031c6:	bf00      	nop
 80031c8:	bf00      	nop
 80031ca:	3798      	adds	r7, #152	; 0x98
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80031d4:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <SAIx_Out_DeInit+0x24>)
 80031d6:	4a08      	ldr	r2, [pc, #32]	; (80031f8 <SAIx_Out_DeInit+0x28>)
 80031d8:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80031da:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <SAIx_Out_DeInit+0x24>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <SAIx_Out_DeInit+0x24>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80031e8:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 80031ea:	4802      	ldr	r0, [pc, #8]	; (80031f4 <SAIx_Out_DeInit+0x24>)
 80031ec:	f003 fff6 	bl	80071dc <HAL_SAI_DeInit>
}
 80031f0:	bf00      	nop
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	2000041c 	.word	0x2000041c
 80031f8:	40015c04 	.word	0x40015c04

080031fc <BSP_AUDIO_IN_OUT_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_OUT_Init(uint16_t InputDevice, uint16_t OutputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b089      	sub	sp, #36	; 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60ba      	str	r2, [r7, #8]
 8003204:	607b      	str	r3, [r7, #4]
 8003206:	4603      	mov	r3, r0
 8003208:	81fb      	strh	r3, [r7, #14]
 800320a:	460b      	mov	r3, r1
 800320c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = AUDIO_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)  /* Only MICROPHONE_2 input supported */
 8003216:	89fb      	ldrh	r3, [r7, #14]
 8003218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800321c:	d002      	beq.n	8003224 <BSP_AUDIO_IN_OUT_Init+0x28>
  {
    ret = AUDIO_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	77fb      	strb	r3, [r7, #31]
 8003222:	e054      	b.n	80032ce <BSP_AUDIO_IN_OUT_Init+0xd2>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8003224:	f000 fa0e 	bl	8003644 <SAIx_In_DeInit>
    SAIx_Out_DeInit();
 8003228:	f7ff ffd2 	bl	80031d0 <SAIx_Out_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 800322c:	2200      	movs	r2, #0
 800322e:	68b9      	ldr	r1, [r7, #8]
 8003230:	4829      	ldr	r0, [pc, #164]	; (80032d8 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 8003232:	f7ff ff89 	bl	8003148 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8003236:	4b28      	ldr	r3, [pc, #160]	; (80032d8 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 8003238:	4a28      	ldr	r2, [pc, #160]	; (80032dc <BSP_AUDIO_IN_OUT_Init+0xe0>)
 800323a:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 800323c:	4826      	ldr	r0, [pc, #152]	; (80032d8 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 800323e:	f004 f891 	bl	8007364 <HAL_SAI_GetState>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d103      	bne.n	8003250 <BSP_AUDIO_IN_OUT_Init+0x54>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8003248:	2100      	movs	r1, #0
 800324a:	4823      	ldr	r0, [pc, #140]	; (80032d8 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 800324c:	f000 f892 	bl	8003374 <BSP_AUDIO_IN_MspInit>
    }

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003250:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8003252:	4a24      	ldr	r2, [pc, #144]	; (80032e4 <BSP_AUDIO_IN_OUT_Init+0xe8>)
 8003254:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8003256:	4822      	ldr	r0, [pc, #136]	; (80032e0 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8003258:	f004 f884 	bl	8007364 <HAL_SAI_GetState>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <BSP_AUDIO_IN_OUT_Init+0x6e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8003262:	2100      	movs	r1, #0
 8003264:	481e      	ldr	r0, [pc, #120]	; (80032e0 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8003266:	f7ff fe99 	bl	8002f9c <BSP_AUDIO_OUT_MspInit>

    /* Configure SAI in master mode :
     *   - SAI2_block_A in master TX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 800326a:	89fb      	ldrh	r3, [r7, #14]
 800326c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003270:	d102      	bne.n	8003278 <BSP_AUDIO_IN_OUT_Init+0x7c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8003272:	230a      	movs	r3, #10
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	e001      	b.n	800327c <BSP_AUDIO_IN_OUT_Init+0x80>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8003278:	2305      	movs	r3, #5
 800327a:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	69b9      	ldr	r1, [r7, #24]
 8003280:	2000      	movs	r0, #0
 8003282:	f000 f929 	bl	80034d8 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8003286:	4b18      	ldr	r3, [pc, #96]	; (80032e8 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2034      	movs	r0, #52	; 0x34
 800328c:	4798      	blx	r3
 800328e:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f648 1294 	movw	r2, #35220	; 0x8994
 8003296:	4293      	cmp	r3, r2
 8003298:	d109      	bne.n	80032ae <BSP_AUDIO_IN_OUT_Init+0xb2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800329a:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <BSP_AUDIO_IN_OUT_Init+0xec>)
 800329c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329e:	2034      	movs	r0, #52	; 0x34
 80032a0:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 80032a2:	4b12      	ldr	r3, [pc, #72]	; (80032ec <BSP_AUDIO_IN_OUT_Init+0xf0>)
 80032a4:	4a10      	ldr	r2, [pc, #64]	; (80032e8 <BSP_AUDIO_IN_OUT_Init+0xec>)
 80032a6:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e001      	b.n	80032b2 <BSP_AUDIO_IN_OUT_Init+0xb6>
    }
    else
    {
      ret = AUDIO_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 80032b2:	7ffb      	ldrb	r3, [r7, #31]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10a      	bne.n	80032ce <BSP_AUDIO_IN_OUT_Init+0xd2>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, 100, AudioFreq);
 80032b8:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <BSP_AUDIO_IN_OUT_Init+0xf0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681c      	ldr	r4, [r3, #0]
 80032be:	89fa      	ldrh	r2, [r7, #14]
 80032c0:	89bb      	ldrh	r3, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	b299      	uxth	r1, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2264      	movs	r2, #100	; 0x64
 80032ca:	2034      	movs	r0, #52	; 0x34
 80032cc:	47a0      	blx	r4
    }
  }
  return ret;
 80032ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3724      	adds	r7, #36	; 0x24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd90      	pop	{r4, r7, pc}
 80032d8:	200004a0 	.word	0x200004a0
 80032dc:	40015c24 	.word	0x40015c24
 80032e0:	2000041c 	.word	0x2000041c
 80032e4:	40015c04 	.word	0x40015c04
 80032e8:	20000004 	.word	0x20000004
 80032ec:	20000418 	.word	0x20000418

080032f0 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	b29b      	uxth	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4805      	ldr	r0, [pc, #20]	; (800331c <BSP_AUDIO_IN_Record+0x2c>)
 8003308:	f003 ff9e 	bl	8007248 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	b2db      	uxtb	r3, r3
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	200004a0 	.word	0x200004a0

08003320 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8003328:	f000 f80e 	bl	8003348 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800332c:	bf00      	nop
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 800333c:	f000 f80b 	bl	8003356 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8003340:	bf00      	nop
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief  User callback when record buffer is filled.
  * @retval None
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{ 
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 800335a:	bf00      	nop
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8003368:	bf00      	nop
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08c      	sub	sp, #48	; 0x30
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 800337e:	4b50      	ldr	r3, [pc, #320]	; (80034c0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	4a4f      	ldr	r2, [pc, #316]	; (80034c0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003384:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003388:	6453      	str	r3, [r2, #68]	; 0x44
 800338a:	4b4d      	ldr	r3, [pc, #308]	; (80034c0 <BSP_AUDIO_IN_MspInit+0x14c>)
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003392:	61bb      	str	r3, [r7, #24]
 8003394:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8003396:	4b4a      	ldr	r3, [pc, #296]	; (80034c0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	4a49      	ldr	r2, [pc, #292]	; (80034c0 <BSP_AUDIO_IN_MspInit+0x14c>)
 800339c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033a0:	6313      	str	r3, [r2, #48]	; 0x30
 80033a2:	4b47      	ldr	r3, [pc, #284]	; (80034c0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 80033ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033b2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80033b4:	2302      	movs	r3, #2
 80033b6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80033bc:	2302      	movs	r3, #2
 80033be:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 80033c0:	230a      	movs	r3, #10
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80033c4:	f107 031c 	add.w	r3, r7, #28
 80033c8:	4619      	mov	r1, r3
 80033ca:	483e      	ldr	r0, [pc, #248]	; (80034c4 <BSP_AUDIO_IN_MspInit+0x150>)
 80033cc:	f000 ff36 	bl	800423c <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 80033d0:	4b3b      	ldr	r3, [pc, #236]	; (80034c0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80033d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d4:	4a3a      	ldr	r2, [pc, #232]	; (80034c0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80033d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033da:	6313      	str	r3, [r2, #48]	; 0x30
 80033dc:	4b38      	ldr	r3, [pc, #224]	; (80034c0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 80033e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ec:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80033ee:	2300      	movs	r3, #0
 80033f0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80033f6:	2302      	movs	r3, #2
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 80033fa:	f107 031c 	add.w	r3, r7, #28
 80033fe:	4619      	mov	r1, r3
 8003400:	4831      	ldr	r0, [pc, #196]	; (80034c8 <BSP_AUDIO_IN_MspInit+0x154>)
 8003402:	f000 ff1b 	bl	800423c <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8003406:	4b2e      	ldr	r3, [pc, #184]	; (80034c0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	4a2d      	ldr	r2, [pc, #180]	; (80034c0 <BSP_AUDIO_IN_MspInit+0x14c>)
 800340c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003410:	6313      	str	r3, [r2, #48]	; 0x30
 8003412:	4b2b      	ldr	r3, [pc, #172]	; (80034c0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a2a      	ldr	r2, [pc, #168]	; (80034cc <BSP_AUDIO_IN_MspInit+0x158>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d137      	bne.n	8003498 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8003428:	4b29      	ldr	r3, [pc, #164]	; (80034d0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800342a:	2200      	movs	r2, #0
 800342c:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800342e:	4b28      	ldr	r3, [pc, #160]	; (80034d0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003430:	2200      	movs	r2, #0
 8003432:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003434:	4b26      	ldr	r3, [pc, #152]	; (80034d0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003436:	2200      	movs	r2, #0
 8003438:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800343a:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800343c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003440:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8003442:	4b23      	ldr	r3, [pc, #140]	; (80034d0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003448:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 800344a:	4b21      	ldr	r3, [pc, #132]	; (80034d0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800344c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003450:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8003452:	4b1f      	ldr	r3, [pc, #124]	; (80034d0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003454:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003458:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800345a:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800345c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003460:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003462:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003464:	2200      	movs	r2, #0
 8003466:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800346a:	2203      	movs	r2, #3
 800346c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800346e:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003470:	2200      	movs	r2, #0
 8003472:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8003474:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003476:	2200      	movs	r2, #0
 8003478:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 800347a:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800347c:	4a15      	ldr	r2, [pc, #84]	; (80034d4 <BSP_AUDIO_IN_MspInit+0x160>)
 800347e:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a13      	ldr	r2, [pc, #76]	; (80034d0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003484:	671a      	str	r2, [r3, #112]	; 0x70
 8003486:	4a12      	ldr	r2, [pc, #72]	; (80034d0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 800348c:	4810      	ldr	r0, [pc, #64]	; (80034d0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800348e:	f000 fad1 	bl	8003a34 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8003492:	480f      	ldr	r0, [pc, #60]	; (80034d0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003494:	f000 fa20 	bl	80038d8 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8003498:	2200      	movs	r2, #0
 800349a:	210f      	movs	r1, #15
 800349c:	2046      	movs	r0, #70	; 0x46
 800349e:	f000 f9f1 	bl	8003884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 80034a2:	2046      	movs	r0, #70	; 0x46
 80034a4:	f000 fa0a 	bl	80038bc <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80034a8:	2200      	movs	r2, #0
 80034aa:	210f      	movs	r1, #15
 80034ac:	2028      	movs	r0, #40	; 0x28
 80034ae:	f000 f9e9 	bl	8003884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 80034b2:	2028      	movs	r0, #40	; 0x28
 80034b4:	f000 fa02 	bl	80038bc <HAL_NVIC_EnableIRQ>
}
 80034b8:	bf00      	nop
 80034ba:	3730      	adds	r7, #48	; 0x30
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40023800 	.word	0x40023800
 80034c4:	40021800 	.word	0x40021800
 80034c8:	40021c00 	.word	0x40021c00
 80034cc:	40015c24 	.word	0x40015c24
 80034d0:	20000584 	.word	0x20000584
 80034d4:	400264b8 	.word	0x400264b8

080034d8 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80034e4:	4b53      	ldr	r3, [pc, #332]	; (8003634 <SAIx_In_Init+0x15c>)
 80034e6:	4a54      	ldr	r2, [pc, #336]	; (8003638 <SAIx_In_Init+0x160>)
 80034e8:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80034ea:	4b52      	ldr	r3, [pc, #328]	; (8003634 <SAIx_In_Init+0x15c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	4b50      	ldr	r3, [pc, #320]	; (8003634 <SAIx_In_Init+0x15c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034f8:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80034fa:	4a4e      	ldr	r2, [pc, #312]	; (8003634 <SAIx_In_Init+0x15c>)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8003500:	4a4c      	ldr	r2, [pc, #304]	; (8003634 <SAIx_In_Init+0x15c>)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8003506:	4b4b      	ldr	r3, [pc, #300]	; (8003634 <SAIx_In_Init+0x15c>)
 8003508:	2200      	movs	r2, #0
 800350a:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800350c:	4b49      	ldr	r3, [pc, #292]	; (8003634 <SAIx_In_Init+0x15c>)
 800350e:	2200      	movs	r2, #0
 8003510:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8003512:	4b48      	ldr	r3, [pc, #288]	; (8003634 <SAIx_In_Init+0x15c>)
 8003514:	2280      	movs	r2, #128	; 0x80
 8003516:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003518:	4b46      	ldr	r3, [pc, #280]	; (8003634 <SAIx_In_Init+0x15c>)
 800351a:	2200      	movs	r2, #0
 800351c:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800351e:	4b45      	ldr	r3, [pc, #276]	; (8003634 <SAIx_In_Init+0x15c>)
 8003520:	2201      	movs	r2, #1
 8003522:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8003524:	4b43      	ldr	r3, [pc, #268]	; (8003634 <SAIx_In_Init+0x15c>)
 8003526:	2200      	movs	r2, #0
 8003528:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 800352a:	4b42      	ldr	r3, [pc, #264]	; (8003634 <SAIx_In_Init+0x15c>)
 800352c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003530:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8003532:	4b40      	ldr	r3, [pc, #256]	; (8003634 <SAIx_In_Init+0x15c>)
 8003534:	2201      	movs	r2, #1
 8003536:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8003538:	4b3e      	ldr	r3, [pc, #248]	; (8003634 <SAIx_In_Init+0x15c>)
 800353a:	2240      	movs	r2, #64	; 0x40
 800353c:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800353e:	4b3d      	ldr	r3, [pc, #244]	; (8003634 <SAIx_In_Init+0x15c>)
 8003540:	2220      	movs	r2, #32
 8003542:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8003544:	4b3b      	ldr	r3, [pc, #236]	; (8003634 <SAIx_In_Init+0x15c>)
 8003546:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800354a:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800354c:	4b39      	ldr	r3, [pc, #228]	; (8003634 <SAIx_In_Init+0x15c>)
 800354e:	2200      	movs	r2, #0
 8003550:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8003552:	4b38      	ldr	r3, [pc, #224]	; (8003634 <SAIx_In_Init+0x15c>)
 8003554:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003558:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 800355a:	4b36      	ldr	r3, [pc, #216]	; (8003634 <SAIx_In_Init+0x15c>)
 800355c:	2200      	movs	r2, #0
 800355e:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003560:	4b34      	ldr	r3, [pc, #208]	; (8003634 <SAIx_In_Init+0x15c>)
 8003562:	2200      	movs	r2, #0
 8003564:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8003566:	4b33      	ldr	r3, [pc, #204]	; (8003634 <SAIx_In_Init+0x15c>)
 8003568:	2204      	movs	r2, #4
 800356a:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 800356c:	4a31      	ldr	r2, [pc, #196]	; (8003634 <SAIx_In_Init+0x15c>)
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8003572:	4830      	ldr	r0, [pc, #192]	; (8003634 <SAIx_In_Init+0x15c>)
 8003574:	f003 fcb4 	bl	8006ee0 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8003578:	4b30      	ldr	r3, [pc, #192]	; (800363c <SAIx_In_Init+0x164>)
 800357a:	4a31      	ldr	r2, [pc, #196]	; (8003640 <SAIx_In_Init+0x168>)
 800357c:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800357e:	4b2f      	ldr	r3, [pc, #188]	; (800363c <SAIx_In_Init+0x164>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4b2d      	ldr	r3, [pc, #180]	; (800363c <SAIx_In_Init+0x164>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800358c:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 800358e:	4a2b      	ldr	r2, [pc, #172]	; (800363c <SAIx_In_Init+0x164>)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8003594:	4b29      	ldr	r3, [pc, #164]	; (800363c <SAIx_In_Init+0x164>)
 8003596:	2203      	movs	r2, #3
 8003598:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800359a:	4b28      	ldr	r3, [pc, #160]	; (800363c <SAIx_In_Init+0x164>)
 800359c:	2200      	movs	r2, #0
 800359e:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80035a0:	4b26      	ldr	r3, [pc, #152]	; (800363c <SAIx_In_Init+0x164>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 80035a6:	4b25      	ldr	r3, [pc, #148]	; (800363c <SAIx_In_Init+0x164>)
 80035a8:	2280      	movs	r2, #128	; 0x80
 80035aa:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80035ac:	4b23      	ldr	r3, [pc, #140]	; (800363c <SAIx_In_Init+0x164>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80035b2:	4b22      	ldr	r3, [pc, #136]	; (800363c <SAIx_In_Init+0x164>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 80035b8:	4b20      	ldr	r3, [pc, #128]	; (800363c <SAIx_In_Init+0x164>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 80035be:	4b1f      	ldr	r3, [pc, #124]	; (800363c <SAIx_In_Init+0x164>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80035c4:	4b1d      	ldr	r3, [pc, #116]	; (800363c <SAIx_In_Init+0x164>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 80035ca:	4b1c      	ldr	r3, [pc, #112]	; (800363c <SAIx_In_Init+0x164>)
 80035cc:	2240      	movs	r2, #64	; 0x40
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 80035d0:	4b1a      	ldr	r3, [pc, #104]	; (800363c <SAIx_In_Init+0x164>)
 80035d2:	2220      	movs	r2, #32
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80035d6:	4b19      	ldr	r3, [pc, #100]	; (800363c <SAIx_In_Init+0x164>)
 80035d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035dc:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80035de:	4b17      	ldr	r3, [pc, #92]	; (800363c <SAIx_In_Init+0x164>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80035e4:	4b15      	ldr	r3, [pc, #84]	; (800363c <SAIx_In_Init+0x164>)
 80035e6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80035ea:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 80035ec:	4b13      	ldr	r3, [pc, #76]	; (800363c <SAIx_In_Init+0x164>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80035f2:	4b12      	ldr	r3, [pc, #72]	; (800363c <SAIx_In_Init+0x164>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 80035f8:	4b10      	ldr	r3, [pc, #64]	; (800363c <SAIx_In_Init+0x164>)
 80035fa:	2204      	movs	r2, #4
 80035fc:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 80035fe:	4a0f      	ldr	r2, [pc, #60]	; (800363c <SAIx_In_Init+0x164>)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8003604:	480d      	ldr	r0, [pc, #52]	; (800363c <SAIx_In_Init+0x164>)
 8003606:	f003 fc6b 	bl	8006ee0 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800360a:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <SAIx_In_Init+0x15c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4b08      	ldr	r3, [pc, #32]	; (8003634 <SAIx_In_Init+0x15c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003618:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 800361a:	4b08      	ldr	r3, [pc, #32]	; (800363c <SAIx_In_Init+0x164>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <SAIx_In_Init+0x164>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003628:	601a      	str	r2, [r3, #0]
}
 800362a:	bf00      	nop
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	2000041c 	.word	0x2000041c
 8003638:	40015c04 	.word	0x40015c04
 800363c:	200004a0 	.word	0x200004a0
 8003640:	40015c24 	.word	0x40015c24

08003644 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8003648:	4b07      	ldr	r3, [pc, #28]	; (8003668 <SAIx_In_DeInit+0x24>)
 800364a:	4a08      	ldr	r2, [pc, #32]	; (800366c <SAIx_In_DeInit+0x28>)
 800364c:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800364e:	4b06      	ldr	r3, [pc, #24]	; (8003668 <SAIx_In_DeInit+0x24>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b04      	ldr	r3, [pc, #16]	; (8003668 <SAIx_In_DeInit+0x24>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800365c:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 800365e:	4802      	ldr	r0, [pc, #8]	; (8003668 <SAIx_In_DeInit+0x24>)
 8003660:	f003 fdbc 	bl	80071dc <HAL_SAI_DeInit>
}
 8003664:	bf00      	nop
 8003666:	bd80      	pop	{r7, pc}
 8003668:	200004a0 	.word	0x200004a0
 800366c:	40015c24 	.word	0x40015c24

08003670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003674:	2003      	movs	r0, #3
 8003676:	f000 f8fa 	bl	800386e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800367a:	200f      	movs	r0, #15
 800367c:	f7fd fe76 	bl	800136c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003680:	f7fd face 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <HAL_IncTick+0x20>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	461a      	mov	r2, r3
 8003696:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <HAL_IncTick+0x24>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4413      	add	r3, r2
 800369c:	4a04      	ldr	r2, [pc, #16]	; (80036b0 <HAL_IncTick+0x24>)
 800369e:	6013      	str	r3, [r2, #0]
}
 80036a0:	bf00      	nop
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	2000003c 	.word	0x2000003c
 80036b0:	200005e4 	.word	0x200005e4

080036b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  return uwTick;
 80036b8:	4b03      	ldr	r3, [pc, #12]	; (80036c8 <HAL_GetTick+0x14>)
 80036ba:	681b      	ldr	r3, [r3, #0]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	200005e4 	.word	0x200005e4

080036cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036d4:	f7ff ffee 	bl	80036b4 <HAL_GetTick>
 80036d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e4:	d005      	beq.n	80036f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036e6:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <HAL_Delay+0x44>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4413      	add	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036f2:	bf00      	nop
 80036f4:	f7ff ffde 	bl	80036b4 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	429a      	cmp	r2, r3
 8003702:	d8f7      	bhi.n	80036f4 <HAL_Delay+0x28>
  {
  }
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	2000003c 	.word	0x2000003c

08003714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <__NVIC_SetPriorityGrouping+0x40>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003730:	4013      	ands	r3, r2
 8003732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <__NVIC_SetPriorityGrouping+0x44>)
 800373e:	4313      	orrs	r3, r2
 8003740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003742:	4a04      	ldr	r2, [pc, #16]	; (8003754 <__NVIC_SetPriorityGrouping+0x40>)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	60d3      	str	r3, [r2, #12]
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	e000ed00 	.word	0xe000ed00
 8003758:	05fa0000 	.word	0x05fa0000

0800375c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003760:	4b04      	ldr	r3, [pc, #16]	; (8003774 <__NVIC_GetPriorityGrouping+0x18>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	0a1b      	lsrs	r3, r3, #8
 8003766:	f003 0307 	and.w	r3, r3, #7
}
 800376a:	4618      	mov	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	e000ed00 	.word	0xe000ed00

08003778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003786:	2b00      	cmp	r3, #0
 8003788:	db0b      	blt.n	80037a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800378a:	79fb      	ldrb	r3, [r7, #7]
 800378c:	f003 021f 	and.w	r2, r3, #31
 8003790:	4907      	ldr	r1, [pc, #28]	; (80037b0 <__NVIC_EnableIRQ+0x38>)
 8003792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003796:	095b      	lsrs	r3, r3, #5
 8003798:	2001      	movs	r0, #1
 800379a:	fa00 f202 	lsl.w	r2, r0, r2
 800379e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	e000e100 	.word	0xe000e100

080037b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	6039      	str	r1, [r7, #0]
 80037be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	db0a      	blt.n	80037de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	490c      	ldr	r1, [pc, #48]	; (8003800 <__NVIC_SetPriority+0x4c>)
 80037ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d2:	0112      	lsls	r2, r2, #4
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	440b      	add	r3, r1
 80037d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037dc:	e00a      	b.n	80037f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	4908      	ldr	r1, [pc, #32]	; (8003804 <__NVIC_SetPriority+0x50>)
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	3b04      	subs	r3, #4
 80037ec:	0112      	lsls	r2, r2, #4
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	440b      	add	r3, r1
 80037f2:	761a      	strb	r2, [r3, #24]
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	e000e100 	.word	0xe000e100
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003808:	b480      	push	{r7}
 800380a:	b089      	sub	sp, #36	; 0x24
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f1c3 0307 	rsb	r3, r3, #7
 8003822:	2b04      	cmp	r3, #4
 8003824:	bf28      	it	cs
 8003826:	2304      	movcs	r3, #4
 8003828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	3304      	adds	r3, #4
 800382e:	2b06      	cmp	r3, #6
 8003830:	d902      	bls.n	8003838 <NVIC_EncodePriority+0x30>
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	3b03      	subs	r3, #3
 8003836:	e000      	b.n	800383a <NVIC_EncodePriority+0x32>
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800383c:	f04f 32ff 	mov.w	r2, #4294967295
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43da      	mvns	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	401a      	ands	r2, r3
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003850:	f04f 31ff 	mov.w	r1, #4294967295
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	fa01 f303 	lsl.w	r3, r1, r3
 800385a:	43d9      	mvns	r1, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003860:	4313      	orrs	r3, r2
         );
}
 8003862:	4618      	mov	r0, r3
 8003864:	3724      	adds	r7, #36	; 0x24
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b082      	sub	sp, #8
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff ff4c 	bl	8003714 <__NVIC_SetPriorityGrouping>
}
 800387c:	bf00      	nop
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003896:	f7ff ff61 	bl	800375c <__NVIC_GetPriorityGrouping>
 800389a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	68b9      	ldr	r1, [r7, #8]
 80038a0:	6978      	ldr	r0, [r7, #20]
 80038a2:	f7ff ffb1 	bl	8003808 <NVIC_EncodePriority>
 80038a6:	4602      	mov	r2, r0
 80038a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ac:	4611      	mov	r1, r2
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff ff80 	bl	80037b4 <__NVIC_SetPriority>
}
 80038b4:	bf00      	nop
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff ff54 	bl	8003778 <__NVIC_EnableIRQ>
}
 80038d0:	bf00      	nop
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038e4:	f7ff fee6 	bl	80036b4 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e099      	b.n	8003a28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0201 	bic.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003914:	e00f      	b.n	8003936 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003916:	f7ff fecd 	bl	80036b4 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b05      	cmp	r3, #5
 8003922:	d908      	bls.n	8003936 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2203      	movs	r2, #3
 800392e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e078      	b.n	8003a28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1e8      	bne.n	8003916 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	4b38      	ldr	r3, [pc, #224]	; (8003a30 <HAL_DMA_Init+0x158>)
 8003950:	4013      	ands	r3, r2
 8003952:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003962:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800396e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800397a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	2b04      	cmp	r3, #4
 800398e:	d107      	bne.n	80039a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	4313      	orrs	r3, r2
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f023 0307 	bic.w	r3, r3, #7
 80039b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d117      	bne.n	80039fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00e      	beq.n	80039fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fad5 	bl	8003f8c <DMA_CheckFifoParam>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2240      	movs	r2, #64	; 0x40
 80039ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80039f6:	2301      	movs	r3, #1
 80039f8:	e016      	b.n	8003a28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 fa8c 	bl	8003f20 <DMA_CalcBaseAndBitshift>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a10:	223f      	movs	r2, #63	; 0x3f
 8003a12:	409a      	lsls	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	f010803f 	.word	0xf010803f

08003a34 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e050      	b.n	8003ae8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d101      	bne.n	8003a56 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003a52:	2302      	movs	r3, #2
 8003a54:	e048      	b.n	8003ae8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0201 	bic.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2200      	movs	r2, #0
 8003a74:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2200      	movs	r2, #0
 8003a84:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2221      	movs	r2, #33	; 0x21
 8003a94:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fa42 	bl	8003f20 <DMA_CalcBaseAndBitshift>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa4:	223f      	movs	r2, #63	; 0x3f
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_DMA_Start_IT+0x26>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e048      	b.n	8003ba8 <HAL_DMA_Start_IT+0xb8>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d137      	bne.n	8003b9a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f9c0 	bl	8003ec4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b48:	223f      	movs	r2, #63	; 0x3f
 8003b4a:	409a      	lsls	r2, r3
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0216 	orr.w	r2, r2, #22
 8003b5e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b6e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d007      	beq.n	8003b88 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0208 	orr.w	r2, r2, #8
 8003b86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	e005      	b.n	8003ba6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003bbc:	4b8e      	ldr	r3, [pc, #568]	; (8003df8 <HAL_DMA_IRQHandler+0x248>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a8e      	ldr	r2, [pc, #568]	; (8003dfc <HAL_DMA_IRQHandler+0x24c>)
 8003bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc6:	0a9b      	lsrs	r3, r3, #10
 8003bc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bda:	2208      	movs	r2, #8
 8003bdc:	409a      	lsls	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4013      	ands	r3, r2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d01a      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d013      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0204 	bic.w	r2, r2, #4
 8003c02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c08:	2208      	movs	r2, #8
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c14:	f043 0201 	orr.w	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c20:	2201      	movs	r2, #1
 8003c22:	409a      	lsls	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d012      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00b      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3e:	2201      	movs	r2, #1
 8003c40:	409a      	lsls	r2, r3
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4a:	f043 0202 	orr.w	r2, r3, #2
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c56:	2204      	movs	r2, #4
 8003c58:	409a      	lsls	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d012      	beq.n	8003c88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00b      	beq.n	8003c88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c74:	2204      	movs	r2, #4
 8003c76:	409a      	lsls	r2, r3
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c80:	f043 0204 	orr.w	r2, r3, #4
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8c:	2210      	movs	r2, #16
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d043      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d03c      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003caa:	2210      	movs	r2, #16
 8003cac:	409a      	lsls	r2, r3
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d018      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d108      	bne.n	8003ce0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d024      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	4798      	blx	r3
 8003cde:	e01f      	b.n	8003d20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01b      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	4798      	blx	r3
 8003cf0:	e016      	b.n	8003d20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d107      	bne.n	8003d10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0208 	bic.w	r2, r2, #8
 8003d0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d24:	2220      	movs	r2, #32
 8003d26:	409a      	lsls	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 808f 	beq.w	8003e50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 8087 	beq.w	8003e50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d46:	2220      	movs	r2, #32
 8003d48:	409a      	lsls	r2, r3
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b05      	cmp	r3, #5
 8003d58:	d136      	bne.n	8003dc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0216 	bic.w	r2, r2, #22
 8003d68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695a      	ldr	r2, [r3, #20]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d103      	bne.n	8003d8a <HAL_DMA_IRQHandler+0x1da>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d007      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0208 	bic.w	r2, r2, #8
 8003d98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9e:	223f      	movs	r2, #63	; 0x3f
 8003da0:	409a      	lsls	r2, r3
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d07e      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	4798      	blx	r3
        }
        return;
 8003dc6:	e079      	b.n	8003ebc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01d      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10d      	bne.n	8003e00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d031      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	4798      	blx	r3
 8003df4:	e02c      	b.n	8003e50 <HAL_DMA_IRQHandler+0x2a0>
 8003df6:	bf00      	nop
 8003df8:	20000000 	.word	0x20000000
 8003dfc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d023      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	4798      	blx	r3
 8003e10:	e01e      	b.n	8003e50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10f      	bne.n	8003e40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0210 	bic.w	r2, r2, #16
 8003e2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d032      	beq.n	8003ebe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d022      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2205      	movs	r2, #5
 8003e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0201 	bic.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	60bb      	str	r3, [r7, #8]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d307      	bcc.n	8003e98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f2      	bne.n	8003e7c <HAL_DMA_IRQHandler+0x2cc>
 8003e96:	e000      	b.n	8003e9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	4798      	blx	r3
 8003eba:	e000      	b.n	8003ebe <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ebc:	bf00      	nop
    }
  }
}
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ee0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2b40      	cmp	r3, #64	; 0x40
 8003ef0:	d108      	bne.n	8003f04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f02:	e007      	b.n	8003f14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	60da      	str	r2, [r3, #12]
}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	3b10      	subs	r3, #16
 8003f30:	4a13      	ldr	r2, [pc, #76]	; (8003f80 <DMA_CalcBaseAndBitshift+0x60>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f3a:	4a12      	ldr	r2, [pc, #72]	; (8003f84 <DMA_CalcBaseAndBitshift+0x64>)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d908      	bls.n	8003f60 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <DMA_CalcBaseAndBitshift+0x68>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	1d1a      	adds	r2, r3, #4
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	659a      	str	r2, [r3, #88]	; 0x58
 8003f5e:	e006      	b.n	8003f6e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	4b08      	ldr	r3, [pc, #32]	; (8003f88 <DMA_CalcBaseAndBitshift+0x68>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	aaaaaaab 	.word	0xaaaaaaab
 8003f84:	0800861c 	.word	0x0800861c
 8003f88:	fffffc00 	.word	0xfffffc00

08003f8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d11f      	bne.n	8003fe6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	d856      	bhi.n	800405a <DMA_CheckFifoParam+0xce>
 8003fac:	a201      	add	r2, pc, #4	; (adr r2, 8003fb4 <DMA_CheckFifoParam+0x28>)
 8003fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb2:	bf00      	nop
 8003fb4:	08003fc5 	.word	0x08003fc5
 8003fb8:	08003fd7 	.word	0x08003fd7
 8003fbc:	08003fc5 	.word	0x08003fc5
 8003fc0:	0800405b 	.word	0x0800405b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d046      	beq.n	800405e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fd4:	e043      	b.n	800405e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fde:	d140      	bne.n	8004062 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe4:	e03d      	b.n	8004062 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fee:	d121      	bne.n	8004034 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	d837      	bhi.n	8004066 <DMA_CheckFifoParam+0xda>
 8003ff6:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <DMA_CheckFifoParam+0x70>)
 8003ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffc:	0800400d 	.word	0x0800400d
 8004000:	08004013 	.word	0x08004013
 8004004:	0800400d 	.word	0x0800400d
 8004008:	08004025 	.word	0x08004025
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	73fb      	strb	r3, [r7, #15]
      break;
 8004010:	e030      	b.n	8004074 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d025      	beq.n	800406a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004022:	e022      	b.n	800406a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800402c:	d11f      	bne.n	800406e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004032:	e01c      	b.n	800406e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b02      	cmp	r3, #2
 8004038:	d903      	bls.n	8004042 <DMA_CheckFifoParam+0xb6>
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b03      	cmp	r3, #3
 800403e:	d003      	beq.n	8004048 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004040:	e018      	b.n	8004074 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	73fb      	strb	r3, [r7, #15]
      break;
 8004046:	e015      	b.n	8004074 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00e      	beq.n	8004072 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	73fb      	strb	r3, [r7, #15]
      break;
 8004058:	e00b      	b.n	8004072 <DMA_CheckFifoParam+0xe6>
      break;
 800405a:	bf00      	nop
 800405c:	e00a      	b.n	8004074 <DMA_CheckFifoParam+0xe8>
      break;
 800405e:	bf00      	nop
 8004060:	e008      	b.n	8004074 <DMA_CheckFifoParam+0xe8>
      break;
 8004062:	bf00      	nop
 8004064:	e006      	b.n	8004074 <DMA_CheckFifoParam+0xe8>
      break;
 8004066:	bf00      	nop
 8004068:	e004      	b.n	8004074 <DMA_CheckFifoParam+0xe8>
      break;
 800406a:	bf00      	nop
 800406c:	e002      	b.n	8004074 <DMA_CheckFifoParam+0xe8>
      break;   
 800406e:	bf00      	nop
 8004070:	e000      	b.n	8004074 <DMA_CheckFifoParam+0xe8>
      break;
 8004072:	bf00      	nop
    }
  } 
  
  return status; 
 8004074:	7bfb      	ldrb	r3, [r7, #15]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop

08004084 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e039      	b.n	800410a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fc fddc 	bl	8000c68 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d4:	f023 0107 	bic.w	r1, r3, #7
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ea:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <HAL_DMA2D_Init+0x90>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	68d1      	ldr	r1, [r2, #12]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	430b      	orrs	r3, r1
 80040f8:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	ffffc000 	.word	0xffffc000

08004118 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_DMA2D_ConfigLayer+0x20>
 8004134:	2302      	movs	r3, #2
 8004136:	e079      	b.n	800422c <HAL_DMA2D_ConfigLayer+0x114>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	3318      	adds	r3, #24
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	4413      	add	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	041b      	lsls	r3, r3, #16
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004162:	4b35      	ldr	r3, [pc, #212]	; (8004238 <HAL_DMA2D_ConfigLayer+0x120>)
 8004164:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b0a      	cmp	r3, #10
 800416c:	d003      	beq.n	8004176 <HAL_DMA2D_ConfigLayer+0x5e>
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b09      	cmp	r3, #9
 8004174:	d107      	bne.n	8004186 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	e005      	b.n	8004192 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	061b      	lsls	r3, r3, #24
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d120      	bne.n	80041da <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	43db      	mvns	r3, r3
 80041a2:	ea02 0103 	and.w	r1, r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	6812      	ldr	r2, [r2, #0]
 80041b8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b0a      	cmp	r3, #10
 80041c0:	d003      	beq.n	80041ca <HAL_DMA2D_ConfigLayer+0xb2>
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b09      	cmp	r3, #9
 80041c8:	d127      	bne.n	800421a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80041d6:	629a      	str	r2, [r3, #40]	; 0x28
 80041d8:	e01f      	b.n	800421a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69da      	ldr	r2, [r3, #28]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	43db      	mvns	r3, r3
 80041e4:	ea02 0103 	and.w	r1, r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b0a      	cmp	r3, #10
 8004202:	d003      	beq.n	800420c <HAL_DMA2D_ConfigLayer+0xf4>
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b09      	cmp	r3, #9
 800420a:	d106      	bne.n	800421a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004218:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	371c      	adds	r7, #28
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	ff03000f 	.word	0xff03000f

0800423c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800423c:	b480      	push	{r7}
 800423e:	b089      	sub	sp, #36	; 0x24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004246:	2300      	movs	r3, #0
 8004248:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800424e:	2300      	movs	r3, #0
 8004250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004252:	2300      	movs	r3, #0
 8004254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004256:	2300      	movs	r3, #0
 8004258:	61fb      	str	r3, [r7, #28]
 800425a:	e175      	b.n	8004548 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800425c:	2201      	movs	r2, #1
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4013      	ands	r3, r2
 800426e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	429a      	cmp	r2, r3
 8004276:	f040 8164 	bne.w	8004542 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	2b01      	cmp	r3, #1
 8004284:	d005      	beq.n	8004292 <HAL_GPIO_Init+0x56>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d130      	bne.n	80042f4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	2203      	movs	r2, #3
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	43db      	mvns	r3, r3
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	4013      	ands	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042c8:	2201      	movs	r2, #1
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	43db      	mvns	r3, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4013      	ands	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	f003 0201 	and.w	r2, r3, #1
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f003 0303 	and.w	r3, r3, #3
 80042fc:	2b03      	cmp	r3, #3
 80042fe:	d017      	beq.n	8004330 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	2203      	movs	r2, #3
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	43db      	mvns	r3, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4013      	ands	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4313      	orrs	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d123      	bne.n	8004384 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	08da      	lsrs	r2, r3, #3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3208      	adds	r2, #8
 8004344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	220f      	movs	r2, #15
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	43db      	mvns	r3, r3
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4013      	ands	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4313      	orrs	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	08da      	lsrs	r2, r3, #3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3208      	adds	r2, #8
 800437e:	69b9      	ldr	r1, [r7, #24]
 8004380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	2203      	movs	r2, #3
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4013      	ands	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 0203 	and.w	r2, r3, #3
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 80be 	beq.w	8004542 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043c6:	4b66      	ldr	r3, [pc, #408]	; (8004560 <HAL_GPIO_Init+0x324>)
 80043c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ca:	4a65      	ldr	r2, [pc, #404]	; (8004560 <HAL_GPIO_Init+0x324>)
 80043cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043d0:	6453      	str	r3, [r2, #68]	; 0x44
 80043d2:	4b63      	ldr	r3, [pc, #396]	; (8004560 <HAL_GPIO_Init+0x324>)
 80043d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80043de:	4a61      	ldr	r2, [pc, #388]	; (8004564 <HAL_GPIO_Init+0x328>)
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	089b      	lsrs	r3, r3, #2
 80043e4:	3302      	adds	r3, #2
 80043e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	220f      	movs	r2, #15
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	43db      	mvns	r3, r3
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4013      	ands	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a58      	ldr	r2, [pc, #352]	; (8004568 <HAL_GPIO_Init+0x32c>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d037      	beq.n	800447a <HAL_GPIO_Init+0x23e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a57      	ldr	r2, [pc, #348]	; (800456c <HAL_GPIO_Init+0x330>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d031      	beq.n	8004476 <HAL_GPIO_Init+0x23a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a56      	ldr	r2, [pc, #344]	; (8004570 <HAL_GPIO_Init+0x334>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d02b      	beq.n	8004472 <HAL_GPIO_Init+0x236>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a55      	ldr	r2, [pc, #340]	; (8004574 <HAL_GPIO_Init+0x338>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d025      	beq.n	800446e <HAL_GPIO_Init+0x232>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a54      	ldr	r2, [pc, #336]	; (8004578 <HAL_GPIO_Init+0x33c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d01f      	beq.n	800446a <HAL_GPIO_Init+0x22e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a53      	ldr	r2, [pc, #332]	; (800457c <HAL_GPIO_Init+0x340>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d019      	beq.n	8004466 <HAL_GPIO_Init+0x22a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a52      	ldr	r2, [pc, #328]	; (8004580 <HAL_GPIO_Init+0x344>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d013      	beq.n	8004462 <HAL_GPIO_Init+0x226>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a51      	ldr	r2, [pc, #324]	; (8004584 <HAL_GPIO_Init+0x348>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00d      	beq.n	800445e <HAL_GPIO_Init+0x222>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a50      	ldr	r2, [pc, #320]	; (8004588 <HAL_GPIO_Init+0x34c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d007      	beq.n	800445a <HAL_GPIO_Init+0x21e>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a4f      	ldr	r2, [pc, #316]	; (800458c <HAL_GPIO_Init+0x350>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d101      	bne.n	8004456 <HAL_GPIO_Init+0x21a>
 8004452:	2309      	movs	r3, #9
 8004454:	e012      	b.n	800447c <HAL_GPIO_Init+0x240>
 8004456:	230a      	movs	r3, #10
 8004458:	e010      	b.n	800447c <HAL_GPIO_Init+0x240>
 800445a:	2308      	movs	r3, #8
 800445c:	e00e      	b.n	800447c <HAL_GPIO_Init+0x240>
 800445e:	2307      	movs	r3, #7
 8004460:	e00c      	b.n	800447c <HAL_GPIO_Init+0x240>
 8004462:	2306      	movs	r3, #6
 8004464:	e00a      	b.n	800447c <HAL_GPIO_Init+0x240>
 8004466:	2305      	movs	r3, #5
 8004468:	e008      	b.n	800447c <HAL_GPIO_Init+0x240>
 800446a:	2304      	movs	r3, #4
 800446c:	e006      	b.n	800447c <HAL_GPIO_Init+0x240>
 800446e:	2303      	movs	r3, #3
 8004470:	e004      	b.n	800447c <HAL_GPIO_Init+0x240>
 8004472:	2302      	movs	r3, #2
 8004474:	e002      	b.n	800447c <HAL_GPIO_Init+0x240>
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <HAL_GPIO_Init+0x240>
 800447a:	2300      	movs	r3, #0
 800447c:	69fa      	ldr	r2, [r7, #28]
 800447e:	f002 0203 	and.w	r2, r2, #3
 8004482:	0092      	lsls	r2, r2, #2
 8004484:	4093      	lsls	r3, r2
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4313      	orrs	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800448c:	4935      	ldr	r1, [pc, #212]	; (8004564 <HAL_GPIO_Init+0x328>)
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	089b      	lsrs	r3, r3, #2
 8004492:	3302      	adds	r3, #2
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800449a:	4b3d      	ldr	r3, [pc, #244]	; (8004590 <HAL_GPIO_Init+0x354>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	43db      	mvns	r3, r3
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4013      	ands	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044be:	4a34      	ldr	r2, [pc, #208]	; (8004590 <HAL_GPIO_Init+0x354>)
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044c4:	4b32      	ldr	r3, [pc, #200]	; (8004590 <HAL_GPIO_Init+0x354>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	43db      	mvns	r3, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4013      	ands	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044e8:	4a29      	ldr	r2, [pc, #164]	; (8004590 <HAL_GPIO_Init+0x354>)
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044ee:	4b28      	ldr	r3, [pc, #160]	; (8004590 <HAL_GPIO_Init+0x354>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	43db      	mvns	r3, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4013      	ands	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004512:	4a1f      	ldr	r2, [pc, #124]	; (8004590 <HAL_GPIO_Init+0x354>)
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004518:	4b1d      	ldr	r3, [pc, #116]	; (8004590 <HAL_GPIO_Init+0x354>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	43db      	mvns	r3, r3
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	4013      	ands	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800453c:	4a14      	ldr	r2, [pc, #80]	; (8004590 <HAL_GPIO_Init+0x354>)
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	3301      	adds	r3, #1
 8004546:	61fb      	str	r3, [r7, #28]
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	2b0f      	cmp	r3, #15
 800454c:	f67f ae86 	bls.w	800425c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004550:	bf00      	nop
 8004552:	bf00      	nop
 8004554:	3724      	adds	r7, #36	; 0x24
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40023800 	.word	0x40023800
 8004564:	40013800 	.word	0x40013800
 8004568:	40020000 	.word	0x40020000
 800456c:	40020400 	.word	0x40020400
 8004570:	40020800 	.word	0x40020800
 8004574:	40020c00 	.word	0x40020c00
 8004578:	40021000 	.word	0x40021000
 800457c:	40021400 	.word	0x40021400
 8004580:	40021800 	.word	0x40021800
 8004584:	40021c00 	.word	0x40021c00
 8004588:	40022000 	.word	0x40022000
 800458c:	40022400 	.word	0x40022400
 8004590:	40013c00 	.word	0x40013c00

08004594 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800459e:	2300      	movs	r3, #0
 80045a0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80045aa:	2300      	movs	r3, #0
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	e0d9      	b.n	8004764 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80045b0:	2201      	movs	r2, #1
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	4013      	ands	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	f040 80c9 	bne.w	800475e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80045cc:	4a6b      	ldr	r2, [pc, #428]	; (800477c <HAL_GPIO_DeInit+0x1e8>)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	089b      	lsrs	r3, r3, #2
 80045d2:	3302      	adds	r3, #2
 80045d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	220f      	movs	r2, #15
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	4013      	ands	r3, r2
 80045ec:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a63      	ldr	r2, [pc, #396]	; (8004780 <HAL_GPIO_DeInit+0x1ec>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d037      	beq.n	8004666 <HAL_GPIO_DeInit+0xd2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a62      	ldr	r2, [pc, #392]	; (8004784 <HAL_GPIO_DeInit+0x1f0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d031      	beq.n	8004662 <HAL_GPIO_DeInit+0xce>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a61      	ldr	r2, [pc, #388]	; (8004788 <HAL_GPIO_DeInit+0x1f4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d02b      	beq.n	800465e <HAL_GPIO_DeInit+0xca>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a60      	ldr	r2, [pc, #384]	; (800478c <HAL_GPIO_DeInit+0x1f8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d025      	beq.n	800465a <HAL_GPIO_DeInit+0xc6>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a5f      	ldr	r2, [pc, #380]	; (8004790 <HAL_GPIO_DeInit+0x1fc>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d01f      	beq.n	8004656 <HAL_GPIO_DeInit+0xc2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a5e      	ldr	r2, [pc, #376]	; (8004794 <HAL_GPIO_DeInit+0x200>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d019      	beq.n	8004652 <HAL_GPIO_DeInit+0xbe>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a5d      	ldr	r2, [pc, #372]	; (8004798 <HAL_GPIO_DeInit+0x204>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d013      	beq.n	800464e <HAL_GPIO_DeInit+0xba>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a5c      	ldr	r2, [pc, #368]	; (800479c <HAL_GPIO_DeInit+0x208>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00d      	beq.n	800464a <HAL_GPIO_DeInit+0xb6>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a5b      	ldr	r2, [pc, #364]	; (80047a0 <HAL_GPIO_DeInit+0x20c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d007      	beq.n	8004646 <HAL_GPIO_DeInit+0xb2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a5a      	ldr	r2, [pc, #360]	; (80047a4 <HAL_GPIO_DeInit+0x210>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d101      	bne.n	8004642 <HAL_GPIO_DeInit+0xae>
 800463e:	2309      	movs	r3, #9
 8004640:	e012      	b.n	8004668 <HAL_GPIO_DeInit+0xd4>
 8004642:	230a      	movs	r3, #10
 8004644:	e010      	b.n	8004668 <HAL_GPIO_DeInit+0xd4>
 8004646:	2308      	movs	r3, #8
 8004648:	e00e      	b.n	8004668 <HAL_GPIO_DeInit+0xd4>
 800464a:	2307      	movs	r3, #7
 800464c:	e00c      	b.n	8004668 <HAL_GPIO_DeInit+0xd4>
 800464e:	2306      	movs	r3, #6
 8004650:	e00a      	b.n	8004668 <HAL_GPIO_DeInit+0xd4>
 8004652:	2305      	movs	r3, #5
 8004654:	e008      	b.n	8004668 <HAL_GPIO_DeInit+0xd4>
 8004656:	2304      	movs	r3, #4
 8004658:	e006      	b.n	8004668 <HAL_GPIO_DeInit+0xd4>
 800465a:	2303      	movs	r3, #3
 800465c:	e004      	b.n	8004668 <HAL_GPIO_DeInit+0xd4>
 800465e:	2302      	movs	r3, #2
 8004660:	e002      	b.n	8004668 <HAL_GPIO_DeInit+0xd4>
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <HAL_GPIO_DeInit+0xd4>
 8004666:	2300      	movs	r3, #0
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	f002 0203 	and.w	r2, r2, #3
 800466e:	0092      	lsls	r2, r2, #2
 8004670:	4093      	lsls	r3, r2
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	429a      	cmp	r2, r3
 8004676:	d132      	bne.n	80046de <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004678:	4b4b      	ldr	r3, [pc, #300]	; (80047a8 <HAL_GPIO_DeInit+0x214>)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	43db      	mvns	r3, r3
 8004680:	4949      	ldr	r1, [pc, #292]	; (80047a8 <HAL_GPIO_DeInit+0x214>)
 8004682:	4013      	ands	r3, r2
 8004684:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004686:	4b48      	ldr	r3, [pc, #288]	; (80047a8 <HAL_GPIO_DeInit+0x214>)
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	43db      	mvns	r3, r3
 800468e:	4946      	ldr	r1, [pc, #280]	; (80047a8 <HAL_GPIO_DeInit+0x214>)
 8004690:	4013      	ands	r3, r2
 8004692:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004694:	4b44      	ldr	r3, [pc, #272]	; (80047a8 <HAL_GPIO_DeInit+0x214>)
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	43db      	mvns	r3, r3
 800469c:	4942      	ldr	r1, [pc, #264]	; (80047a8 <HAL_GPIO_DeInit+0x214>)
 800469e:	4013      	ands	r3, r2
 80046a0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80046a2:	4b41      	ldr	r3, [pc, #260]	; (80047a8 <HAL_GPIO_DeInit+0x214>)
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	43db      	mvns	r3, r3
 80046aa:	493f      	ldr	r1, [pc, #252]	; (80047a8 <HAL_GPIO_DeInit+0x214>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	220f      	movs	r2, #15
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80046c0:	4a2e      	ldr	r2, [pc, #184]	; (800477c <HAL_GPIO_DeInit+0x1e8>)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	089b      	lsrs	r3, r3, #2
 80046c6:	3302      	adds	r3, #2
 80046c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	43da      	mvns	r2, r3
 80046d0:	482a      	ldr	r0, [pc, #168]	; (800477c <HAL_GPIO_DeInit+0x1e8>)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	089b      	lsrs	r3, r3, #2
 80046d6:	400a      	ands	r2, r1
 80046d8:	3302      	adds	r3, #2
 80046da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	2103      	movs	r1, #3
 80046e8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ec:	43db      	mvns	r3, r3
 80046ee:	401a      	ands	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	08da      	lsrs	r2, r3, #3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3208      	adds	r2, #8
 80046fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	220f      	movs	r2, #15
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	08d2      	lsrs	r2, r2, #3
 8004714:	4019      	ands	r1, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3208      	adds	r2, #8
 800471a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	2103      	movs	r1, #3
 8004728:	fa01 f303 	lsl.w	r3, r1, r3
 800472c:	43db      	mvns	r3, r3
 800472e:	401a      	ands	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	2101      	movs	r1, #1
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	fa01 f303 	lsl.w	r3, r1, r3
 8004740:	43db      	mvns	r3, r3
 8004742:	401a      	ands	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	2103      	movs	r1, #3
 8004752:	fa01 f303 	lsl.w	r3, r1, r3
 8004756:	43db      	mvns	r3, r3
 8004758:	401a      	ands	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	3301      	adds	r3, #1
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2b0f      	cmp	r3, #15
 8004768:	f67f af22 	bls.w	80045b0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800476c:	bf00      	nop
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40013800 	.word	0x40013800
 8004780:	40020000 	.word	0x40020000
 8004784:	40020400 	.word	0x40020400
 8004788:	40020800 	.word	0x40020800
 800478c:	40020c00 	.word	0x40020c00
 8004790:	40021000 	.word	0x40021000
 8004794:	40021400 	.word	0x40021400
 8004798:	40021800 	.word	0x40021800
 800479c:	40021c00 	.word	0x40021c00
 80047a0:	40022000 	.word	0x40022000
 80047a4:	40022400 	.word	0x40022400
 80047a8:	40013c00 	.word	0x40013c00

080047ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e07f      	b.n	80048be <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f8a9 	bl	800492a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2224      	movs	r2, #36	; 0x24
 80047dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0201 	bic.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800480c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d107      	bne.n	8004826 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004822:	609a      	str	r2, [r3, #8]
 8004824:	e006      	b.n	8004834 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689a      	ldr	r2, [r3, #8]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004832:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d104      	bne.n	8004846 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004844:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6859      	ldr	r1, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	4b1d      	ldr	r3, [pc, #116]	; (80048c8 <HAL_I2C_Init+0x11c>)
 8004852:	430b      	orrs	r3, r1
 8004854:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004864:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691a      	ldr	r2, [r3, #16]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69d9      	ldr	r1, [r3, #28]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1a      	ldr	r2, [r3, #32]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2220      	movs	r2, #32
 80048aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	02008000 	.word	0x02008000

080048cc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e021      	b.n	8004922 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2224      	movs	r2, #36	; 0x24
 80048e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0201 	bic.w	r2, r2, #1
 80048f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f821 	bl	800493e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af02      	add	r7, sp, #8
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	4608      	mov	r0, r1
 800495e:	4611      	mov	r1, r2
 8004960:	461a      	mov	r2, r3
 8004962:	4603      	mov	r3, r0
 8004964:	817b      	strh	r3, [r7, #10]
 8004966:	460b      	mov	r3, r1
 8004968:	813b      	strh	r3, [r7, #8]
 800496a:	4613      	mov	r3, r2
 800496c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b20      	cmp	r3, #32
 8004978:	f040 80f9 	bne.w	8004b6e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <HAL_I2C_Mem_Write+0x34>
 8004982:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004984:	2b00      	cmp	r3, #0
 8004986:	d105      	bne.n	8004994 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800498e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e0ed      	b.n	8004b70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_I2C_Mem_Write+0x4e>
 800499e:	2302      	movs	r3, #2
 80049a0:	e0e6      	b.n	8004b70 <HAL_I2C_Mem_Write+0x21c>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049aa:	f7fe fe83 	bl	80036b4 <HAL_GetTick>
 80049ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	2319      	movs	r3, #25
 80049b6:	2201      	movs	r2, #1
 80049b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 fad1 	bl	8004f64 <I2C_WaitOnFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0d1      	b.n	8004b70 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2221      	movs	r2, #33	; 0x21
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2240      	movs	r2, #64	; 0x40
 80049d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a3a      	ldr	r2, [r7, #32]
 80049e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049f4:	88f8      	ldrh	r0, [r7, #6]
 80049f6:	893a      	ldrh	r2, [r7, #8]
 80049f8:	8979      	ldrh	r1, [r7, #10]
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	9301      	str	r3, [sp, #4]
 80049fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	4603      	mov	r3, r0
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f9e1 	bl	8004dcc <I2C_RequestMemoryWrite>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e0a9      	b.n	8004b70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2bff      	cmp	r3, #255	; 0xff
 8004a24:	d90e      	bls.n	8004a44 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	22ff      	movs	r2, #255	; 0xff
 8004a2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	8979      	ldrh	r1, [r7, #10]
 8004a34:	2300      	movs	r3, #0
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 fc2d 	bl	800529c <I2C_TransferConfig>
 8004a42:	e00f      	b.n	8004a64 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	8979      	ldrh	r1, [r7, #10]
 8004a56:	2300      	movs	r3, #0
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 fc1c 	bl	800529c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 fabb 	bl	8004fe4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e07b      	b.n	8004b70 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	781a      	ldrb	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d034      	beq.n	8004b1c <HAL_I2C_Mem_Write+0x1c8>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d130      	bne.n	8004b1c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	2180      	movs	r1, #128	; 0x80
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 fa4d 	bl	8004f64 <I2C_WaitOnFlagUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e04d      	b.n	8004b70 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2bff      	cmp	r3, #255	; 0xff
 8004adc:	d90e      	bls.n	8004afc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	22ff      	movs	r2, #255	; 0xff
 8004ae2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	8979      	ldrh	r1, [r7, #10]
 8004aec:	2300      	movs	r3, #0
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 fbd1 	bl	800529c <I2C_TransferConfig>
 8004afa:	e00f      	b.n	8004b1c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	8979      	ldrh	r1, [r7, #10]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 fbc0 	bl	800529c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d19e      	bne.n	8004a64 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 fa9a 	bl	8005064 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e01a      	b.n	8004b70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6859      	ldr	r1, [r3, #4]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <HAL_I2C_Mem_Write+0x224>)
 8004b4e:	400b      	ands	r3, r1
 8004b50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2220      	movs	r2, #32
 8004b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	e000      	b.n	8004b70 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004b6e:	2302      	movs	r3, #2
  }
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	fe00e800 	.word	0xfe00e800

08004b7c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b088      	sub	sp, #32
 8004b80:	af02      	add	r7, sp, #8
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	4608      	mov	r0, r1
 8004b86:	4611      	mov	r1, r2
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	817b      	strh	r3, [r7, #10]
 8004b8e:	460b      	mov	r3, r1
 8004b90:	813b      	strh	r3, [r7, #8]
 8004b92:	4613      	mov	r3, r2
 8004b94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b20      	cmp	r3, #32
 8004ba0:	f040 80fd 	bne.w	8004d9e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_I2C_Mem_Read+0x34>
 8004baa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d105      	bne.n	8004bbc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bb6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0f1      	b.n	8004da0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_I2C_Mem_Read+0x4e>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e0ea      	b.n	8004da0 <HAL_I2C_Mem_Read+0x224>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bd2:	f7fe fd6f 	bl	80036b4 <HAL_GetTick>
 8004bd6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	2319      	movs	r3, #25
 8004bde:	2201      	movs	r2, #1
 8004be0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f9bd 	bl	8004f64 <I2C_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e0d5      	b.n	8004da0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2222      	movs	r2, #34	; 0x22
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2240      	movs	r2, #64	; 0x40
 8004c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6a3a      	ldr	r2, [r7, #32]
 8004c0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c1c:	88f8      	ldrh	r0, [r7, #6]
 8004c1e:	893a      	ldrh	r2, [r7, #8]
 8004c20:	8979      	ldrh	r1, [r7, #10]
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	9301      	str	r3, [sp, #4]
 8004c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f921 	bl	8004e74 <I2C_RequestMemoryRead>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0ad      	b.n	8004da0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2bff      	cmp	r3, #255	; 0xff
 8004c4c:	d90e      	bls.n	8004c6c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	22ff      	movs	r2, #255	; 0xff
 8004c52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	8979      	ldrh	r1, [r7, #10]
 8004c5c:	4b52      	ldr	r3, [pc, #328]	; (8004da8 <HAL_I2C_Mem_Read+0x22c>)
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 fb19 	bl	800529c <I2C_TransferConfig>
 8004c6a:	e00f      	b.n	8004c8c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	8979      	ldrh	r1, [r7, #10]
 8004c7e:	4b4a      	ldr	r3, [pc, #296]	; (8004da8 <HAL_I2C_Mem_Read+0x22c>)
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 fb08 	bl	800529c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c92:	2200      	movs	r2, #0
 8004c94:	2104      	movs	r1, #4
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f964 	bl	8004f64 <I2C_WaitOnFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e07c      	b.n	8004da0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d034      	beq.n	8004d4c <HAL_I2C_Mem_Read+0x1d0>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d130      	bne.n	8004d4c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2180      	movs	r1, #128	; 0x80
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 f935 	bl	8004f64 <I2C_WaitOnFlagUntilTimeout>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e04d      	b.n	8004da0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2bff      	cmp	r3, #255	; 0xff
 8004d0c:	d90e      	bls.n	8004d2c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	22ff      	movs	r2, #255	; 0xff
 8004d12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	8979      	ldrh	r1, [r7, #10]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 fab9 	bl	800529c <I2C_TransferConfig>
 8004d2a:	e00f      	b.n	8004d4c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	8979      	ldrh	r1, [r7, #10]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 faa8 	bl	800529c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d19a      	bne.n	8004c8c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 f982 	bl	8005064 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e01a      	b.n	8004da0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6859      	ldr	r1, [r3, #4]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <HAL_I2C_Mem_Read+0x230>)
 8004d7e:	400b      	ands	r3, r1
 8004d80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	e000      	b.n	8004da0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004d9e:	2302      	movs	r3, #2
  }
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	80002400 	.word	0x80002400
 8004dac:	fe00e800 	.word	0xfe00e800

08004db0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dbe:	b2db      	uxtb	r3, r3
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af02      	add	r7, sp, #8
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	4608      	mov	r0, r1
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4603      	mov	r3, r0
 8004ddc:	817b      	strh	r3, [r7, #10]
 8004dde:	460b      	mov	r3, r1
 8004de0:	813b      	strh	r3, [r7, #8]
 8004de2:	4613      	mov	r3, r2
 8004de4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004de6:	88fb      	ldrh	r3, [r7, #6]
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	8979      	ldrh	r1, [r7, #10]
 8004dec:	4b20      	ldr	r3, [pc, #128]	; (8004e70 <I2C_RequestMemoryWrite+0xa4>)
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fa51 	bl	800529c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dfa:	69fa      	ldr	r2, [r7, #28]
 8004dfc:	69b9      	ldr	r1, [r7, #24]
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 f8f0 	bl	8004fe4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e02c      	b.n	8004e68 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e0e:	88fb      	ldrh	r3, [r7, #6]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d105      	bne.n	8004e20 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e14:	893b      	ldrh	r3, [r7, #8]
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	629a      	str	r2, [r3, #40]	; 0x28
 8004e1e:	e015      	b.n	8004e4c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e20:	893b      	ldrh	r3, [r7, #8]
 8004e22:	0a1b      	lsrs	r3, r3, #8
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e2e:	69fa      	ldr	r2, [r7, #28]
 8004e30:	69b9      	ldr	r1, [r7, #24]
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 f8d6 	bl	8004fe4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e012      	b.n	8004e68 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e42:	893b      	ldrh	r3, [r7, #8]
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	2200      	movs	r2, #0
 8004e54:	2180      	movs	r1, #128	; 0x80
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 f884 	bl	8004f64 <I2C_WaitOnFlagUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e000      	b.n	8004e68 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	80002000 	.word	0x80002000

08004e74 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	4608      	mov	r0, r1
 8004e7e:	4611      	mov	r1, r2
 8004e80:	461a      	mov	r2, r3
 8004e82:	4603      	mov	r3, r0
 8004e84:	817b      	strh	r3, [r7, #10]
 8004e86:	460b      	mov	r3, r1
 8004e88:	813b      	strh	r3, [r7, #8]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004e8e:	88fb      	ldrh	r3, [r7, #6]
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	8979      	ldrh	r1, [r7, #10]
 8004e94:	4b20      	ldr	r3, [pc, #128]	; (8004f18 <I2C_RequestMemoryRead+0xa4>)
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 f9fe 	bl	800529c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ea0:	69fa      	ldr	r2, [r7, #28]
 8004ea2:	69b9      	ldr	r1, [r7, #24]
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 f89d 	bl	8004fe4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e02c      	b.n	8004f0e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004eb4:	88fb      	ldrh	r3, [r7, #6]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d105      	bne.n	8004ec6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004eba:	893b      	ldrh	r3, [r7, #8]
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ec4:	e015      	b.n	8004ef2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ec6:	893b      	ldrh	r3, [r7, #8]
 8004ec8:	0a1b      	lsrs	r3, r3, #8
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ed4:	69fa      	ldr	r2, [r7, #28]
 8004ed6:	69b9      	ldr	r1, [r7, #24]
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 f883 	bl	8004fe4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e012      	b.n	8004f0e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ee8:	893b      	ldrh	r3, [r7, #8]
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	2140      	movs	r1, #64	; 0x40
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 f831 	bl	8004f64 <I2C_WaitOnFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	80002000 	.word	0x80002000

08004f1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d103      	bne.n	8004f3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2200      	movs	r2, #0
 8004f38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d007      	beq.n	8004f58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699a      	ldr	r2, [r3, #24]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	619a      	str	r2, [r3, #24]
  }
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	603b      	str	r3, [r7, #0]
 8004f70:	4613      	mov	r3, r2
 8004f72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f74:	e022      	b.n	8004fbc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7c:	d01e      	beq.n	8004fbc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f7e:	f7fe fb99 	bl	80036b4 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d302      	bcc.n	8004f94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d113      	bne.n	8004fbc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f98:	f043 0220 	orr.w	r2, r3, #32
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e00f      	b.n	8004fdc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699a      	ldr	r2, [r3, #24]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	bf0c      	ite	eq
 8004fcc:	2301      	moveq	r3, #1
 8004fce:	2300      	movne	r3, #0
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	79fb      	ldrb	r3, [r7, #7]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d0cd      	beq.n	8004f76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ff0:	e02c      	b.n	800504c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	68b9      	ldr	r1, [r7, #8]
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 f870 	bl	80050dc <I2C_IsErrorOccurred>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e02a      	b.n	800505c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500c:	d01e      	beq.n	800504c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800500e:	f7fe fb51 	bl	80036b4 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	429a      	cmp	r2, r3
 800501c:	d302      	bcc.n	8005024 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d113      	bne.n	800504c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005028:	f043 0220 	orr.w	r2, r3, #32
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2220      	movs	r2, #32
 8005034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e007      	b.n	800505c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b02      	cmp	r3, #2
 8005058:	d1cb      	bne.n	8004ff2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005070:	e028      	b.n	80050c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	68b9      	ldr	r1, [r7, #8]
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 f830 	bl	80050dc <I2C_IsErrorOccurred>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e026      	b.n	80050d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005086:	f7fe fb15 	bl	80036b4 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	429a      	cmp	r2, r3
 8005094:	d302      	bcc.n	800509c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d113      	bne.n	80050c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a0:	f043 0220 	orr.w	r2, r3, #32
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e007      	b.n	80050d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	f003 0320 	and.w	r3, r3, #32
 80050ce:	2b20      	cmp	r3, #32
 80050d0:	d1cf      	bne.n	8005072 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08a      	sub	sp, #40	; 0x28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050e8:	2300      	movs	r3, #0
 80050ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80050f6:	2300      	movs	r3, #0
 80050f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	2b00      	cmp	r3, #0
 8005106:	d068      	beq.n	80051da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2210      	movs	r2, #16
 800510e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005110:	e049      	b.n	80051a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005118:	d045      	beq.n	80051a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800511a:	f7fe facb 	bl	80036b4 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	429a      	cmp	r2, r3
 8005128:	d302      	bcc.n	8005130 <I2C_IsErrorOccurred+0x54>
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d13a      	bne.n	80051a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800513a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005142:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800514e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005152:	d121      	bne.n	8005198 <I2C_IsErrorOccurred+0xbc>
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800515a:	d01d      	beq.n	8005198 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800515c:	7cfb      	ldrb	r3, [r7, #19]
 800515e:	2b20      	cmp	r3, #32
 8005160:	d01a      	beq.n	8005198 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005170:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005172:	f7fe fa9f 	bl	80036b4 <HAL_GetTick>
 8005176:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005178:	e00e      	b.n	8005198 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800517a:	f7fe fa9b 	bl	80036b4 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b19      	cmp	r3, #25
 8005186:	d907      	bls.n	8005198 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	f043 0320 	orr.w	r3, r3, #32
 800518e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005196:	e006      	b.n	80051a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d1e9      	bne.n	800517a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d003      	beq.n	80051bc <I2C_IsErrorOccurred+0xe0>
 80051b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0aa      	beq.n	8005112 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80051bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d103      	bne.n	80051cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2220      	movs	r2, #32
 80051ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	f043 0304 	orr.w	r3, r3, #4
 80051d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00b      	beq.n	8005204 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	f043 0301 	orr.w	r3, r3, #1
 80051f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00b      	beq.n	8005226 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	f043 0308 	orr.w	r3, r3, #8
 8005214:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800521e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00b      	beq.n	8005248 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	f043 0302 	orr.w	r3, r3, #2
 8005236:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005240:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01c      	beq.n	800528a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f7ff fe63 	bl	8004f1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6859      	ldr	r1, [r3, #4]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <I2C_IsErrorOccurred+0x1bc>)
 8005262:	400b      	ands	r3, r1
 8005264:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	431a      	orrs	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2220      	movs	r2, #32
 8005276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800528a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800528e:	4618      	mov	r0, r3
 8005290:	3728      	adds	r7, #40	; 0x28
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	fe00e800 	.word	0xfe00e800

0800529c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	607b      	str	r3, [r7, #4]
 80052a6:	460b      	mov	r3, r1
 80052a8:	817b      	strh	r3, [r7, #10]
 80052aa:	4613      	mov	r3, r2
 80052ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052ae:	897b      	ldrh	r3, [r7, #10]
 80052b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052b4:	7a7b      	ldrb	r3, [r7, #9]
 80052b6:	041b      	lsls	r3, r3, #16
 80052b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	0d5b      	lsrs	r3, r3, #21
 80052d6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80052da:	4b08      	ldr	r3, [pc, #32]	; (80052fc <I2C_TransferConfig+0x60>)
 80052dc:	430b      	orrs	r3, r1
 80052de:	43db      	mvns	r3, r3
 80052e0:	ea02 0103 	and.w	r1, r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80052ee:	bf00      	nop
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	03ff63ff 	.word	0x03ff63ff

08005300 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e0bf      	b.n	8005492 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d106      	bne.n	800532c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7fb fcbe 	bl	8000ca8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005342:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6999      	ldr	r1, [r3, #24]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005358:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6899      	ldr	r1, [r3, #8]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	4b4a      	ldr	r3, [pc, #296]	; (800549c <HAL_LTDC_Init+0x19c>)
 8005374:	400b      	ands	r3, r1
 8005376:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	041b      	lsls	r3, r3, #16
 800537e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6899      	ldr	r1, [r3, #8]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68d9      	ldr	r1, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	4b3e      	ldr	r3, [pc, #248]	; (800549c <HAL_LTDC_Init+0x19c>)
 80053a2:	400b      	ands	r3, r1
 80053a4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	041b      	lsls	r3, r3, #16
 80053ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68d9      	ldr	r1, [r3, #12]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a1a      	ldr	r2, [r3, #32]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6919      	ldr	r1, [r3, #16]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	4b33      	ldr	r3, [pc, #204]	; (800549c <HAL_LTDC_Init+0x19c>)
 80053d0:	400b      	ands	r3, r1
 80053d2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	041b      	lsls	r3, r3, #16
 80053da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6919      	ldr	r1, [r3, #16]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6959      	ldr	r1, [r3, #20]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	4b27      	ldr	r3, [pc, #156]	; (800549c <HAL_LTDC_Init+0x19c>)
 80053fe:	400b      	ands	r3, r1
 8005400:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	041b      	lsls	r3, r3, #16
 8005408:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6959      	ldr	r1, [r3, #20]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005426:	021b      	lsls	r3, r3, #8
 8005428:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005430:	041b      	lsls	r3, r3, #16
 8005432:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005442:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005456:	431a      	orrs	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0206 	orr.w	r2, r2, #6
 800546e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	f000f800 	.word	0xf000f800

080054a0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80054a0:	b5b0      	push	{r4, r5, r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d101      	bne.n	80054ba <HAL_LTDC_ConfigLayer+0x1a>
 80054b6:	2302      	movs	r3, #2
 80054b8:	e02c      	b.n	8005514 <HAL_LTDC_ConfigLayer+0x74>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2202      	movs	r2, #2
 80054c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2134      	movs	r1, #52	; 0x34
 80054d0:	fb01 f303 	mul.w	r3, r1, r3
 80054d4:	4413      	add	r3, r2
 80054d6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4614      	mov	r4, r2
 80054de:	461d      	mov	r5, r3
 80054e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	68b9      	ldr	r1, [r7, #8]
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 f811 	bl	800551c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2201      	movs	r2, #1
 8005500:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bdb0      	pop	{r4, r5, r7, pc}

0800551c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800551c:	b480      	push	{r7}
 800551e:	b089      	sub	sp, #36	; 0x24
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	0c1b      	lsrs	r3, r3, #16
 8005534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005538:	4413      	add	r3, r2
 800553a:	041b      	lsls	r3, r3, #16
 800553c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	01db      	lsls	r3, r3, #7
 8005548:	4413      	add	r3, r2
 800554a:	3384      	adds	r3, #132	; 0x84
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	6812      	ldr	r2, [r2, #0]
 8005552:	4611      	mov	r1, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	01d2      	lsls	r2, r2, #7
 8005558:	440a      	add	r2, r1
 800555a:	3284      	adds	r2, #132	; 0x84
 800555c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005560:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	0c1b      	lsrs	r3, r3, #16
 800556e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005572:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005574:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4619      	mov	r1, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	01db      	lsls	r3, r3, #7
 8005580:	440b      	add	r3, r1
 8005582:	3384      	adds	r3, #132	; 0x84
 8005584:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800558a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800559a:	4413      	add	r3, r2
 800559c:	041b      	lsls	r3, r3, #16
 800559e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	01db      	lsls	r3, r3, #7
 80055aa:	4413      	add	r3, r2
 80055ac:	3384      	adds	r3, #132	; 0x84
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	6812      	ldr	r2, [r2, #0]
 80055b4:	4611      	mov	r1, r2
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	01d2      	lsls	r2, r2, #7
 80055ba:	440a      	add	r2, r1
 80055bc:	3284      	adds	r2, #132	; 0x84
 80055be:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80055c2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055d2:	4413      	add	r3, r2
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4619      	mov	r1, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	01db      	lsls	r3, r3, #7
 80055e0:	440b      	add	r3, r1
 80055e2:	3384      	adds	r3, #132	; 0x84
 80055e4:	4619      	mov	r1, r3
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	461a      	mov	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	01db      	lsls	r3, r3, #7
 80055f6:	4413      	add	r3, r2
 80055f8:	3384      	adds	r3, #132	; 0x84
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	6812      	ldr	r2, [r2, #0]
 8005600:	4611      	mov	r1, r2
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	01d2      	lsls	r2, r2, #7
 8005606:	440a      	add	r2, r1
 8005608:	3284      	adds	r2, #132	; 0x84
 800560a:	f023 0307 	bic.w	r3, r3, #7
 800560e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	01db      	lsls	r3, r3, #7
 800561a:	4413      	add	r3, r2
 800561c:	3384      	adds	r3, #132	; 0x84
 800561e:	461a      	mov	r2, r3
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800562c:	021b      	lsls	r3, r3, #8
 800562e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005636:	041b      	lsls	r3, r3, #16
 8005638:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	061b      	lsls	r3, r3, #24
 8005640:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	01db      	lsls	r3, r3, #7
 800564c:	4413      	add	r3, r2
 800564e:	3384      	adds	r3, #132	; 0x84
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	461a      	mov	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	01db      	lsls	r3, r3, #7
 800565c:	4413      	add	r3, r2
 800565e:	3384      	adds	r3, #132	; 0x84
 8005660:	461a      	mov	r2, r3
 8005662:	2300      	movs	r3, #0
 8005664:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800566c:	461a      	mov	r2, r3
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	431a      	orrs	r2, r3
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	431a      	orrs	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4619      	mov	r1, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	01db      	lsls	r3, r3, #7
 8005680:	440b      	add	r3, r1
 8005682:	3384      	adds	r3, #132	; 0x84
 8005684:	4619      	mov	r1, r3
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	4313      	orrs	r3, r2
 800568a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	461a      	mov	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	01db      	lsls	r3, r3, #7
 8005696:	4413      	add	r3, r2
 8005698:	3384      	adds	r3, #132	; 0x84
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	6812      	ldr	r2, [r2, #0]
 80056a0:	4611      	mov	r1, r2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	01d2      	lsls	r2, r2, #7
 80056a6:	440a      	add	r2, r1
 80056a8:	3284      	adds	r2, #132	; 0x84
 80056aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056ae:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	461a      	mov	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	01db      	lsls	r3, r3, #7
 80056ba:	4413      	add	r3, r2
 80056bc:	3384      	adds	r3, #132	; 0x84
 80056be:	461a      	mov	r2, r3
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	01db      	lsls	r3, r3, #7
 80056d0:	4413      	add	r3, r2
 80056d2:	3384      	adds	r3, #132	; 0x84
 80056d4:	69da      	ldr	r2, [r3, #28]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4619      	mov	r1, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	01db      	lsls	r3, r3, #7
 80056e0:	440b      	add	r3, r1
 80056e2:	3384      	adds	r3, #132	; 0x84
 80056e4:	4619      	mov	r1, r3
 80056e6:	4b58      	ldr	r3, [pc, #352]	; (8005848 <LTDC_SetConfig+0x32c>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	69da      	ldr	r2, [r3, #28]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	68f9      	ldr	r1, [r7, #12]
 80056f6:	6809      	ldr	r1, [r1, #0]
 80056f8:	4608      	mov	r0, r1
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	01c9      	lsls	r1, r1, #7
 80056fe:	4401      	add	r1, r0
 8005700:	3184      	adds	r1, #132	; 0x84
 8005702:	4313      	orrs	r3, r2
 8005704:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	01db      	lsls	r3, r3, #7
 8005710:	4413      	add	r3, r2
 8005712:	3384      	adds	r3, #132	; 0x84
 8005714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	461a      	mov	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	01db      	lsls	r3, r3, #7
 8005720:	4413      	add	r3, r2
 8005722:	3384      	adds	r3, #132	; 0x84
 8005724:	461a      	mov	r2, r3
 8005726:	2300      	movs	r3, #0
 8005728:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	01db      	lsls	r3, r3, #7
 8005734:	4413      	add	r3, r2
 8005736:	3384      	adds	r3, #132	; 0x84
 8005738:	461a      	mov	r2, r3
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d102      	bne.n	800574e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005748:	2304      	movs	r3, #4
 800574a:	61fb      	str	r3, [r7, #28]
 800574c:	e01b      	b.n	8005786 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d102      	bne.n	800575c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005756:	2303      	movs	r3, #3
 8005758:	61fb      	str	r3, [r7, #28]
 800575a:	e014      	b.n	8005786 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	2b04      	cmp	r3, #4
 8005762:	d00b      	beq.n	800577c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005768:	2b02      	cmp	r3, #2
 800576a:	d007      	beq.n	800577c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005770:	2b03      	cmp	r3, #3
 8005772:	d003      	beq.n	800577c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005778:	2b07      	cmp	r3, #7
 800577a:	d102      	bne.n	8005782 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800577c:	2302      	movs	r3, #2
 800577e:	61fb      	str	r3, [r7, #28]
 8005780:	e001      	b.n	8005786 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005782:	2301      	movs	r3, #1
 8005784:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	01db      	lsls	r3, r3, #7
 8005790:	4413      	add	r3, r2
 8005792:	3384      	adds	r3, #132	; 0x84
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	6812      	ldr	r2, [r2, #0]
 800579a:	4611      	mov	r1, r2
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	01d2      	lsls	r2, r2, #7
 80057a0:	440a      	add	r2, r1
 80057a2:	3284      	adds	r2, #132	; 0x84
 80057a4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80057a8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	fb02 f303 	mul.w	r3, r2, r3
 80057b4:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	6859      	ldr	r1, [r3, #4]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	1acb      	subs	r3, r1, r3
 80057c0:	69f9      	ldr	r1, [r7, #28]
 80057c2:	fb01 f303 	mul.w	r3, r1, r3
 80057c6:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80057c8:	68f9      	ldr	r1, [r7, #12]
 80057ca:	6809      	ldr	r1, [r1, #0]
 80057cc:	4608      	mov	r0, r1
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	01c9      	lsls	r1, r1, #7
 80057d2:	4401      	add	r1, r0
 80057d4:	3184      	adds	r1, #132	; 0x84
 80057d6:	4313      	orrs	r3, r2
 80057d8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	01db      	lsls	r3, r3, #7
 80057e4:	4413      	add	r3, r2
 80057e6:	3384      	adds	r3, #132	; 0x84
 80057e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4619      	mov	r1, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	01db      	lsls	r3, r3, #7
 80057f4:	440b      	add	r3, r1
 80057f6:	3384      	adds	r3, #132	; 0x84
 80057f8:	4619      	mov	r1, r3
 80057fa:	4b14      	ldr	r3, [pc, #80]	; (800584c <LTDC_SetConfig+0x330>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	461a      	mov	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	01db      	lsls	r3, r3, #7
 800580a:	4413      	add	r3, r2
 800580c:	3384      	adds	r3, #132	; 0x84
 800580e:	461a      	mov	r2, r3
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	01db      	lsls	r3, r3, #7
 8005820:	4413      	add	r3, r2
 8005822:	3384      	adds	r3, #132	; 0x84
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	6812      	ldr	r2, [r2, #0]
 800582a:	4611      	mov	r1, r2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	01d2      	lsls	r2, r2, #7
 8005830:	440a      	add	r2, r1
 8005832:	3284      	adds	r2, #132	; 0x84
 8005834:	f043 0301 	orr.w	r3, r3, #1
 8005838:	6013      	str	r3, [r2, #0]
}
 800583a:	bf00      	nop
 800583c:	3724      	adds	r7, #36	; 0x24
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	fffff8f8 	.word	0xfffff8f8
 800584c:	fffff800 	.word	0xfffff800

08005850 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005856:	2300      	movs	r3, #0
 8005858:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800585a:	4b23      	ldr	r3, [pc, #140]	; (80058e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	4a22      	ldr	r2, [pc, #136]	; (80058e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005864:	6413      	str	r3, [r2, #64]	; 0x40
 8005866:	4b20      	ldr	r3, [pc, #128]	; (80058e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800586e:	603b      	str	r3, [r7, #0]
 8005870:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005872:	4b1e      	ldr	r3, [pc, #120]	; (80058ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a1d      	ldr	r2, [pc, #116]	; (80058ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8005878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800587c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800587e:	f7fd ff19 	bl	80036b4 <HAL_GetTick>
 8005882:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005884:	e009      	b.n	800589a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005886:	f7fd ff15 	bl	80036b4 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005894:	d901      	bls.n	800589a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e022      	b.n	80058e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800589a:	4b14      	ldr	r3, [pc, #80]	; (80058ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a6:	d1ee      	bne.n	8005886 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80058a8:	4b10      	ldr	r3, [pc, #64]	; (80058ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a0f      	ldr	r2, [pc, #60]	; (80058ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80058ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058b4:	f7fd fefe 	bl	80036b4 <HAL_GetTick>
 80058b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80058ba:	e009      	b.n	80058d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80058bc:	f7fd fefa 	bl	80036b4 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058ca:	d901      	bls.n	80058d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e007      	b.n	80058e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80058d0:	4b06      	ldr	r3, [pc, #24]	; (80058ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058dc:	d1ee      	bne.n	80058bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	40023800 	.word	0x40023800
 80058ec:	40007000 	.word	0x40007000

080058f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80058f8:	2300      	movs	r3, #0
 80058fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e291      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 8087 	beq.w	8005a22 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005914:	4b96      	ldr	r3, [pc, #600]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 030c 	and.w	r3, r3, #12
 800591c:	2b04      	cmp	r3, #4
 800591e:	d00c      	beq.n	800593a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005920:	4b93      	ldr	r3, [pc, #588]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 030c 	and.w	r3, r3, #12
 8005928:	2b08      	cmp	r3, #8
 800592a:	d112      	bne.n	8005952 <HAL_RCC_OscConfig+0x62>
 800592c:	4b90      	ldr	r3, [pc, #576]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005934:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005938:	d10b      	bne.n	8005952 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800593a:	4b8d      	ldr	r3, [pc, #564]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d06c      	beq.n	8005a20 <HAL_RCC_OscConfig+0x130>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d168      	bne.n	8005a20 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e26b      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800595a:	d106      	bne.n	800596a <HAL_RCC_OscConfig+0x7a>
 800595c:	4b84      	ldr	r3, [pc, #528]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a83      	ldr	r2, [pc, #524]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005966:	6013      	str	r3, [r2, #0]
 8005968:	e02e      	b.n	80059c8 <HAL_RCC_OscConfig+0xd8>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10c      	bne.n	800598c <HAL_RCC_OscConfig+0x9c>
 8005972:	4b7f      	ldr	r3, [pc, #508]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a7e      	ldr	r2, [pc, #504]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	4b7c      	ldr	r3, [pc, #496]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a7b      	ldr	r2, [pc, #492]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	e01d      	b.n	80059c8 <HAL_RCC_OscConfig+0xd8>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005994:	d10c      	bne.n	80059b0 <HAL_RCC_OscConfig+0xc0>
 8005996:	4b76      	ldr	r3, [pc, #472]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a75      	ldr	r2, [pc, #468]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 800599c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	4b73      	ldr	r3, [pc, #460]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a72      	ldr	r2, [pc, #456]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 80059a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	e00b      	b.n	80059c8 <HAL_RCC_OscConfig+0xd8>
 80059b0:	4b6f      	ldr	r3, [pc, #444]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a6e      	ldr	r2, [pc, #440]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 80059b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	4b6c      	ldr	r3, [pc, #432]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a6b      	ldr	r2, [pc, #428]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 80059c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d013      	beq.n	80059f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d0:	f7fd fe70 	bl	80036b4 <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059d8:	f7fd fe6c 	bl	80036b4 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b64      	cmp	r3, #100	; 0x64
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e21f      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ea:	4b61      	ldr	r3, [pc, #388]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f0      	beq.n	80059d8 <HAL_RCC_OscConfig+0xe8>
 80059f6:	e014      	b.n	8005a22 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f8:	f7fd fe5c 	bl	80036b4 <HAL_GetTick>
 80059fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a00:	f7fd fe58 	bl	80036b4 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b64      	cmp	r3, #100	; 0x64
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e20b      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a12:	4b57      	ldr	r3, [pc, #348]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1f0      	bne.n	8005a00 <HAL_RCC_OscConfig+0x110>
 8005a1e:	e000      	b.n	8005a22 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d069      	beq.n	8005b02 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a2e:	4b50      	ldr	r3, [pc, #320]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 030c 	and.w	r3, r3, #12
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00b      	beq.n	8005a52 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a3a:	4b4d      	ldr	r3, [pc, #308]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 030c 	and.w	r3, r3, #12
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d11c      	bne.n	8005a80 <HAL_RCC_OscConfig+0x190>
 8005a46:	4b4a      	ldr	r3, [pc, #296]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d116      	bne.n	8005a80 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a52:	4b47      	ldr	r3, [pc, #284]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d005      	beq.n	8005a6a <HAL_RCC_OscConfig+0x17a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d001      	beq.n	8005a6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e1df      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a6a:	4b41      	ldr	r3, [pc, #260]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	493d      	ldr	r1, [pc, #244]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a7e:	e040      	b.n	8005b02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d023      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a88:	4b39      	ldr	r3, [pc, #228]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a38      	ldr	r2, [pc, #224]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a94:	f7fd fe0e 	bl	80036b4 <HAL_GetTick>
 8005a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a9a:	e008      	b.n	8005aae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a9c:	f7fd fe0a 	bl	80036b4 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e1bd      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aae:	4b30      	ldr	r3, [pc, #192]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0f0      	beq.n	8005a9c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aba:	4b2d      	ldr	r3, [pc, #180]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	4929      	ldr	r1, [pc, #164]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	600b      	str	r3, [r1, #0]
 8005ace:	e018      	b.n	8005b02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ad0:	4b27      	ldr	r3, [pc, #156]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a26      	ldr	r2, [pc, #152]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005ad6:	f023 0301 	bic.w	r3, r3, #1
 8005ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005adc:	f7fd fdea 	bl	80036b4 <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ae4:	f7fd fde6 	bl	80036b4 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e199      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005af6:	4b1e      	ldr	r3, [pc, #120]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1f0      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0308 	and.w	r3, r3, #8
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d038      	beq.n	8005b80 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d019      	beq.n	8005b4a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b16:	4b16      	ldr	r3, [pc, #88]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b1a:	4a15      	ldr	r2, [pc, #84]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005b1c:	f043 0301 	orr.w	r3, r3, #1
 8005b20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b22:	f7fd fdc7 	bl	80036b4 <HAL_GetTick>
 8005b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b2a:	f7fd fdc3 	bl	80036b4 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e176      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b3c:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0f0      	beq.n	8005b2a <HAL_RCC_OscConfig+0x23a>
 8005b48:	e01a      	b.n	8005b80 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b4a:	4b09      	ldr	r3, [pc, #36]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b4e:	4a08      	ldr	r2, [pc, #32]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005b50:	f023 0301 	bic.w	r3, r3, #1
 8005b54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b56:	f7fd fdad 	bl	80036b4 <HAL_GetTick>
 8005b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b5c:	e00a      	b.n	8005b74 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b5e:	f7fd fda9 	bl	80036b4 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d903      	bls.n	8005b74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e15c      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
 8005b70:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b74:	4b91      	ldr	r3, [pc, #580]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1ee      	bne.n	8005b5e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0304 	and.w	r3, r3, #4
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 80a4 	beq.w	8005cd6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b8e:	4b8b      	ldr	r3, [pc, #556]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10d      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b9a:	4b88      	ldr	r3, [pc, #544]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	4a87      	ldr	r2, [pc, #540]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ba6:	4b85      	ldr	r3, [pc, #532]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bae:	60bb      	str	r3, [r7, #8]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bb6:	4b82      	ldr	r3, [pc, #520]	; (8005dc0 <HAL_RCC_OscConfig+0x4d0>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d118      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005bc2:	4b7f      	ldr	r3, [pc, #508]	; (8005dc0 <HAL_RCC_OscConfig+0x4d0>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a7e      	ldr	r2, [pc, #504]	; (8005dc0 <HAL_RCC_OscConfig+0x4d0>)
 8005bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bce:	f7fd fd71 	bl	80036b4 <HAL_GetTick>
 8005bd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bd4:	e008      	b.n	8005be8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bd6:	f7fd fd6d 	bl	80036b4 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b64      	cmp	r3, #100	; 0x64
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e120      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005be8:	4b75      	ldr	r3, [pc, #468]	; (8005dc0 <HAL_RCC_OscConfig+0x4d0>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0f0      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d106      	bne.n	8005c0a <HAL_RCC_OscConfig+0x31a>
 8005bfc:	4b6f      	ldr	r3, [pc, #444]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c00:	4a6e      	ldr	r2, [pc, #440]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c02:	f043 0301 	orr.w	r3, r3, #1
 8005c06:	6713      	str	r3, [r2, #112]	; 0x70
 8005c08:	e02d      	b.n	8005c66 <HAL_RCC_OscConfig+0x376>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10c      	bne.n	8005c2c <HAL_RCC_OscConfig+0x33c>
 8005c12:	4b6a      	ldr	r3, [pc, #424]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c16:	4a69      	ldr	r2, [pc, #420]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c18:	f023 0301 	bic.w	r3, r3, #1
 8005c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c1e:	4b67      	ldr	r3, [pc, #412]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c22:	4a66      	ldr	r2, [pc, #408]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c24:	f023 0304 	bic.w	r3, r3, #4
 8005c28:	6713      	str	r3, [r2, #112]	; 0x70
 8005c2a:	e01c      	b.n	8005c66 <HAL_RCC_OscConfig+0x376>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	2b05      	cmp	r3, #5
 8005c32:	d10c      	bne.n	8005c4e <HAL_RCC_OscConfig+0x35e>
 8005c34:	4b61      	ldr	r3, [pc, #388]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c38:	4a60      	ldr	r2, [pc, #384]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c3a:	f043 0304 	orr.w	r3, r3, #4
 8005c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c40:	4b5e      	ldr	r3, [pc, #376]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c44:	4a5d      	ldr	r2, [pc, #372]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c46:	f043 0301 	orr.w	r3, r3, #1
 8005c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c4c:	e00b      	b.n	8005c66 <HAL_RCC_OscConfig+0x376>
 8005c4e:	4b5b      	ldr	r3, [pc, #364]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c52:	4a5a      	ldr	r2, [pc, #360]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c54:	f023 0301 	bic.w	r3, r3, #1
 8005c58:	6713      	str	r3, [r2, #112]	; 0x70
 8005c5a:	4b58      	ldr	r3, [pc, #352]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5e:	4a57      	ldr	r2, [pc, #348]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c60:	f023 0304 	bic.w	r3, r3, #4
 8005c64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d015      	beq.n	8005c9a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c6e:	f7fd fd21 	bl	80036b4 <HAL_GetTick>
 8005c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c74:	e00a      	b.n	8005c8c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c76:	f7fd fd1d 	bl	80036b4 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e0ce      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c8c:	4b4b      	ldr	r3, [pc, #300]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d0ee      	beq.n	8005c76 <HAL_RCC_OscConfig+0x386>
 8005c98:	e014      	b.n	8005cc4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c9a:	f7fd fd0b 	bl	80036b4 <HAL_GetTick>
 8005c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ca0:	e00a      	b.n	8005cb8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ca2:	f7fd fd07 	bl	80036b4 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e0b8      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cb8:	4b40      	ldr	r3, [pc, #256]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1ee      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d105      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cca:	4b3c      	ldr	r3, [pc, #240]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	4a3b      	ldr	r2, [pc, #236]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 80a4 	beq.w	8005e28 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ce0:	4b36      	ldr	r3, [pc, #216]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f003 030c 	and.w	r3, r3, #12
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	d06b      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d149      	bne.n	8005d88 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cf4:	4b31      	ldr	r3, [pc, #196]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a30      	ldr	r2, [pc, #192]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005cfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d00:	f7fd fcd8 	bl	80036b4 <HAL_GetTick>
 8005d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d06:	e008      	b.n	8005d1a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d08:	f7fd fcd4 	bl	80036b4 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e087      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d1a:	4b28      	ldr	r3, [pc, #160]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1f0      	bne.n	8005d08 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	69da      	ldr	r2, [r3, #28]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	019b      	lsls	r3, r3, #6
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3c:	085b      	lsrs	r3, r3, #1
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	041b      	lsls	r3, r3, #16
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	061b      	lsls	r3, r3, #24
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	4a1b      	ldr	r2, [pc, #108]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005d4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d52:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d54:	4b19      	ldr	r3, [pc, #100]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a18      	ldr	r2, [pc, #96]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d60:	f7fd fca8 	bl	80036b4 <HAL_GetTick>
 8005d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d66:	e008      	b.n	8005d7a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d68:	f7fd fca4 	bl	80036b4 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e057      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d7a:	4b10      	ldr	r3, [pc, #64]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d0f0      	beq.n	8005d68 <HAL_RCC_OscConfig+0x478>
 8005d86:	e04f      	b.n	8005e28 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d88:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a0b      	ldr	r2, [pc, #44]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d94:	f7fd fc8e 	bl	80036b4 <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d9c:	f7fd fc8a 	bl	80036b4 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e03d      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dae:	4b03      	ldr	r3, [pc, #12]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f0      	bne.n	8005d9c <HAL_RCC_OscConfig+0x4ac>
 8005dba:	e035      	b.n	8005e28 <HAL_RCC_OscConfig+0x538>
 8005dbc:	40023800 	.word	0x40023800
 8005dc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005dc4:	4b1b      	ldr	r3, [pc, #108]	; (8005e34 <HAL_RCC_OscConfig+0x544>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d028      	beq.n	8005e24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d121      	bne.n	8005e24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d11a      	bne.n	8005e24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005df4:	4013      	ands	r3, r2
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005dfa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d111      	bne.n	8005e24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0a:	085b      	lsrs	r3, r3, #1
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d107      	bne.n	8005e24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d001      	beq.n	8005e28 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e000      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	40023800 	.word	0x40023800

08005e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e0d0      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e50:	4b6a      	ldr	r3, [pc, #424]	; (8005ffc <HAL_RCC_ClockConfig+0x1c4>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 030f 	and.w	r3, r3, #15
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d910      	bls.n	8005e80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e5e:	4b67      	ldr	r3, [pc, #412]	; (8005ffc <HAL_RCC_ClockConfig+0x1c4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f023 020f 	bic.w	r2, r3, #15
 8005e66:	4965      	ldr	r1, [pc, #404]	; (8005ffc <HAL_RCC_ClockConfig+0x1c4>)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e6e:	4b63      	ldr	r3, [pc, #396]	; (8005ffc <HAL_RCC_ClockConfig+0x1c4>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d001      	beq.n	8005e80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e0b8      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d020      	beq.n	8005ece <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0304 	and.w	r3, r3, #4
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d005      	beq.n	8005ea4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e98:	4b59      	ldr	r3, [pc, #356]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	4a58      	ldr	r2, [pc, #352]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005e9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ea2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0308 	and.w	r3, r3, #8
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005eb0:	4b53      	ldr	r3, [pc, #332]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	4a52      	ldr	r2, [pc, #328]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005eb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005eba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ebc:	4b50      	ldr	r3, [pc, #320]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	494d      	ldr	r1, [pc, #308]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d040      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d107      	bne.n	8005ef2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ee2:	4b47      	ldr	r3, [pc, #284]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d115      	bne.n	8005f1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e07f      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d107      	bne.n	8005f0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005efa:	4b41      	ldr	r3, [pc, #260]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d109      	bne.n	8005f1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e073      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f0a:	4b3d      	ldr	r3, [pc, #244]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e06b      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f1a:	4b39      	ldr	r3, [pc, #228]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f023 0203 	bic.w	r2, r3, #3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	4936      	ldr	r1, [pc, #216]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f2c:	f7fd fbc2 	bl	80036b4 <HAL_GetTick>
 8005f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f32:	e00a      	b.n	8005f4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f34:	f7fd fbbe 	bl	80036b4 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e053      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f4a:	4b2d      	ldr	r3, [pc, #180]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 020c 	and.w	r2, r3, #12
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d1eb      	bne.n	8005f34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f5c:	4b27      	ldr	r3, [pc, #156]	; (8005ffc <HAL_RCC_ClockConfig+0x1c4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 030f 	and.w	r3, r3, #15
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d210      	bcs.n	8005f8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f6a:	4b24      	ldr	r3, [pc, #144]	; (8005ffc <HAL_RCC_ClockConfig+0x1c4>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f023 020f 	bic.w	r2, r3, #15
 8005f72:	4922      	ldr	r1, [pc, #136]	; (8005ffc <HAL_RCC_ClockConfig+0x1c4>)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f7a:	4b20      	ldr	r3, [pc, #128]	; (8005ffc <HAL_RCC_ClockConfig+0x1c4>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 030f 	and.w	r3, r3, #15
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d001      	beq.n	8005f8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e032      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d008      	beq.n	8005faa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f98:	4b19      	ldr	r3, [pc, #100]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	4916      	ldr	r1, [pc, #88]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d009      	beq.n	8005fca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005fb6:	4b12      	ldr	r3, [pc, #72]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	490e      	ldr	r1, [pc, #56]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005fca:	f000 f821 	bl	8006010 <HAL_RCC_GetSysClockFreq>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	091b      	lsrs	r3, r3, #4
 8005fd6:	f003 030f 	and.w	r3, r3, #15
 8005fda:	490a      	ldr	r1, [pc, #40]	; (8006004 <HAL_RCC_ClockConfig+0x1cc>)
 8005fdc:	5ccb      	ldrb	r3, [r1, r3]
 8005fde:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe2:	4a09      	ldr	r2, [pc, #36]	; (8006008 <HAL_RCC_ClockConfig+0x1d0>)
 8005fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005fe6:	4b09      	ldr	r3, [pc, #36]	; (800600c <HAL_RCC_ClockConfig+0x1d4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fb f9be 	bl	800136c <HAL_InitTick>

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	40023c00 	.word	0x40023c00
 8006000:	40023800 	.word	0x40023800
 8006004:	08008604 	.word	0x08008604
 8006008:	20000000 	.word	0x20000000
 800600c:	20000038 	.word	0x20000038

08006010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006014:	b090      	sub	sp, #64	; 0x40
 8006016:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006018:	2300      	movs	r3, #0
 800601a:	637b      	str	r3, [r7, #52]	; 0x34
 800601c:	2300      	movs	r3, #0
 800601e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006020:	2300      	movs	r3, #0
 8006022:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8006024:	2300      	movs	r3, #0
 8006026:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006028:	4b59      	ldr	r3, [pc, #356]	; (8006190 <HAL_RCC_GetSysClockFreq+0x180>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f003 030c 	and.w	r3, r3, #12
 8006030:	2b08      	cmp	r3, #8
 8006032:	d00d      	beq.n	8006050 <HAL_RCC_GetSysClockFreq+0x40>
 8006034:	2b08      	cmp	r3, #8
 8006036:	f200 80a1 	bhi.w	800617c <HAL_RCC_GetSysClockFreq+0x16c>
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <HAL_RCC_GetSysClockFreq+0x34>
 800603e:	2b04      	cmp	r3, #4
 8006040:	d003      	beq.n	800604a <HAL_RCC_GetSysClockFreq+0x3a>
 8006042:	e09b      	b.n	800617c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006044:	4b53      	ldr	r3, [pc, #332]	; (8006194 <HAL_RCC_GetSysClockFreq+0x184>)
 8006046:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006048:	e09b      	b.n	8006182 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800604a:	4b53      	ldr	r3, [pc, #332]	; (8006198 <HAL_RCC_GetSysClockFreq+0x188>)
 800604c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800604e:	e098      	b.n	8006182 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006050:	4b4f      	ldr	r3, [pc, #316]	; (8006190 <HAL_RCC_GetSysClockFreq+0x180>)
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006058:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800605a:	4b4d      	ldr	r3, [pc, #308]	; (8006190 <HAL_RCC_GetSysClockFreq+0x180>)
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d028      	beq.n	80060b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006066:	4b4a      	ldr	r3, [pc, #296]	; (8006190 <HAL_RCC_GetSysClockFreq+0x180>)
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	099b      	lsrs	r3, r3, #6
 800606c:	2200      	movs	r2, #0
 800606e:	623b      	str	r3, [r7, #32]
 8006070:	627a      	str	r2, [r7, #36]	; 0x24
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006078:	2100      	movs	r1, #0
 800607a:	4b47      	ldr	r3, [pc, #284]	; (8006198 <HAL_RCC_GetSysClockFreq+0x188>)
 800607c:	fb03 f201 	mul.w	r2, r3, r1
 8006080:	2300      	movs	r3, #0
 8006082:	fb00 f303 	mul.w	r3, r0, r3
 8006086:	4413      	add	r3, r2
 8006088:	4a43      	ldr	r2, [pc, #268]	; (8006198 <HAL_RCC_GetSysClockFreq+0x188>)
 800608a:	fba0 1202 	umull	r1, r2, r0, r2
 800608e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006090:	460a      	mov	r2, r1
 8006092:	62ba      	str	r2, [r7, #40]	; 0x28
 8006094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006096:	4413      	add	r3, r2
 8006098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800609a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800609c:	2200      	movs	r2, #0
 800609e:	61bb      	str	r3, [r7, #24]
 80060a0:	61fa      	str	r2, [r7, #28]
 80060a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80060aa:	f7fa f8ad 	bl	8000208 <__aeabi_uldivmod>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	4613      	mov	r3, r2
 80060b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060b6:	e053      	b.n	8006160 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060b8:	4b35      	ldr	r3, [pc, #212]	; (8006190 <HAL_RCC_GetSysClockFreq+0x180>)
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	099b      	lsrs	r3, r3, #6
 80060be:	2200      	movs	r2, #0
 80060c0:	613b      	str	r3, [r7, #16]
 80060c2:	617a      	str	r2, [r7, #20]
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80060ca:	f04f 0b00 	mov.w	fp, #0
 80060ce:	4652      	mov	r2, sl
 80060d0:	465b      	mov	r3, fp
 80060d2:	f04f 0000 	mov.w	r0, #0
 80060d6:	f04f 0100 	mov.w	r1, #0
 80060da:	0159      	lsls	r1, r3, #5
 80060dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060e0:	0150      	lsls	r0, r2, #5
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	ebb2 080a 	subs.w	r8, r2, sl
 80060ea:	eb63 090b 	sbc.w	r9, r3, fp
 80060ee:	f04f 0200 	mov.w	r2, #0
 80060f2:	f04f 0300 	mov.w	r3, #0
 80060f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80060fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80060fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006102:	ebb2 0408 	subs.w	r4, r2, r8
 8006106:	eb63 0509 	sbc.w	r5, r3, r9
 800610a:	f04f 0200 	mov.w	r2, #0
 800610e:	f04f 0300 	mov.w	r3, #0
 8006112:	00eb      	lsls	r3, r5, #3
 8006114:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006118:	00e2      	lsls	r2, r4, #3
 800611a:	4614      	mov	r4, r2
 800611c:	461d      	mov	r5, r3
 800611e:	eb14 030a 	adds.w	r3, r4, sl
 8006122:	603b      	str	r3, [r7, #0]
 8006124:	eb45 030b 	adc.w	r3, r5, fp
 8006128:	607b      	str	r3, [r7, #4]
 800612a:	f04f 0200 	mov.w	r2, #0
 800612e:	f04f 0300 	mov.w	r3, #0
 8006132:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006136:	4629      	mov	r1, r5
 8006138:	028b      	lsls	r3, r1, #10
 800613a:	4621      	mov	r1, r4
 800613c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006140:	4621      	mov	r1, r4
 8006142:	028a      	lsls	r2, r1, #10
 8006144:	4610      	mov	r0, r2
 8006146:	4619      	mov	r1, r3
 8006148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614a:	2200      	movs	r2, #0
 800614c:	60bb      	str	r3, [r7, #8]
 800614e:	60fa      	str	r2, [r7, #12]
 8006150:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006154:	f7fa f858 	bl	8000208 <__aeabi_uldivmod>
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4613      	mov	r3, r2
 800615e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006160:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <HAL_RCC_GetSysClockFreq+0x180>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	0c1b      	lsrs	r3, r3, #16
 8006166:	f003 0303 	and.w	r3, r3, #3
 800616a:	3301      	adds	r3, #1
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8006170:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	fbb2 f3f3 	udiv	r3, r2, r3
 8006178:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800617a:	e002      	b.n	8006182 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800617c:	4b05      	ldr	r3, [pc, #20]	; (8006194 <HAL_RCC_GetSysClockFreq+0x184>)
 800617e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006184:	4618      	mov	r0, r3
 8006186:	3740      	adds	r7, #64	; 0x40
 8006188:	46bd      	mov	sp, r7
 800618a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800618e:	bf00      	nop
 8006190:	40023800 	.word	0x40023800
 8006194:	00f42400 	.word	0x00f42400
 8006198:	017d7840 	.word	0x017d7840

0800619c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800619c:	b480      	push	{r7}
 800619e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061a0:	4b03      	ldr	r3, [pc, #12]	; (80061b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80061a2:	681b      	ldr	r3, [r3, #0]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	20000000 	.word	0x20000000

080061b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061b8:	f7ff fff0 	bl	800619c <HAL_RCC_GetHCLKFreq>
 80061bc:	4602      	mov	r2, r0
 80061be:	4b05      	ldr	r3, [pc, #20]	; (80061d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	0a9b      	lsrs	r3, r3, #10
 80061c4:	f003 0307 	and.w	r3, r3, #7
 80061c8:	4903      	ldr	r1, [pc, #12]	; (80061d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061ca:	5ccb      	ldrb	r3, [r1, r3]
 80061cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	40023800 	.word	0x40023800
 80061d8:	08008614 	.word	0x08008614

080061dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061e0:	f7ff ffdc 	bl	800619c <HAL_RCC_GetHCLKFreq>
 80061e4:	4602      	mov	r2, r0
 80061e6:	4b05      	ldr	r3, [pc, #20]	; (80061fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	0b5b      	lsrs	r3, r3, #13
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	4903      	ldr	r1, [pc, #12]	; (8006200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061f2:	5ccb      	ldrb	r3, [r1, r3]
 80061f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	40023800 	.word	0x40023800
 8006200:	08008614 	.word	0x08008614

08006204 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	220f      	movs	r2, #15
 8006212:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006214:	4b12      	ldr	r3, [pc, #72]	; (8006260 <HAL_RCC_GetClockConfig+0x5c>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f003 0203 	and.w	r2, r3, #3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006220:	4b0f      	ldr	r3, [pc, #60]	; (8006260 <HAL_RCC_GetClockConfig+0x5c>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800622c:	4b0c      	ldr	r3, [pc, #48]	; (8006260 <HAL_RCC_GetClockConfig+0x5c>)
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006238:	4b09      	ldr	r3, [pc, #36]	; (8006260 <HAL_RCC_GetClockConfig+0x5c>)
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	08db      	lsrs	r3, r3, #3
 800623e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006246:	4b07      	ldr	r3, [pc, #28]	; (8006264 <HAL_RCC_GetClockConfig+0x60>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 020f 	and.w	r2, r3, #15
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	601a      	str	r2, [r3, #0]
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	40023800 	.word	0x40023800
 8006264:	40023c00 	.word	0x40023c00

08006268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b088      	sub	sp, #32
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006270:	2300      	movs	r3, #0
 8006272:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006274:	2300      	movs	r3, #0
 8006276:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006278:	2300      	movs	r3, #0
 800627a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800627c:	2300      	movs	r3, #0
 800627e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006280:	2300      	movs	r3, #0
 8006282:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	d012      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006290:	4b69      	ldr	r3, [pc, #420]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	4a68      	ldr	r2, [pc, #416]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006296:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800629a:	6093      	str	r3, [r2, #8]
 800629c:	4b66      	ldr	r3, [pc, #408]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a4:	4964      	ldr	r1, [pc, #400]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80062b2:	2301      	movs	r3, #1
 80062b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d017      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062c2:	4b5d      	ldr	r3, [pc, #372]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d0:	4959      	ldr	r1, [pc, #356]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062e0:	d101      	bne.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80062e2:	2301      	movs	r3, #1
 80062e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80062ee:	2301      	movs	r3, #1
 80062f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d017      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80062fe:	4b4e      	ldr	r3, [pc, #312]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006304:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630c:	494a      	ldr	r1, [pc, #296]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800630e:	4313      	orrs	r3, r2
 8006310:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800631c:	d101      	bne.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800631e:	2301      	movs	r3, #1
 8006320:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800632a:	2301      	movs	r3, #1
 800632c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800633a:	2301      	movs	r3, #1
 800633c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0320 	and.w	r3, r3, #32
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 808b 	beq.w	8006462 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800634c:	4b3a      	ldr	r3, [pc, #232]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800634e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006350:	4a39      	ldr	r2, [pc, #228]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006356:	6413      	str	r3, [r2, #64]	; 0x40
 8006358:	4b37      	ldr	r3, [pc, #220]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006360:	60bb      	str	r3, [r7, #8]
 8006362:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006364:	4b35      	ldr	r3, [pc, #212]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a34      	ldr	r2, [pc, #208]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800636a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800636e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006370:	f7fd f9a0 	bl	80036b4 <HAL_GetTick>
 8006374:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006376:	e008      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006378:	f7fd f99c 	bl	80036b4 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b64      	cmp	r3, #100	; 0x64
 8006384:	d901      	bls.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e357      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800638a:	4b2c      	ldr	r3, [pc, #176]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0f0      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006396:	4b28      	ldr	r3, [pc, #160]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800639e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d035      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d02e      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063b4:	4b20      	ldr	r3, [pc, #128]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063be:	4b1e      	ldr	r3, [pc, #120]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c2:	4a1d      	ldr	r2, [pc, #116]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063c8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063ca:	4b1b      	ldr	r3, [pc, #108]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ce:	4a1a      	ldr	r2, [pc, #104]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80063d6:	4a18      	ldr	r2, [pc, #96]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80063dc:	4b16      	ldr	r3, [pc, #88]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d114      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e8:	f7fd f964 	bl	80036b4 <HAL_GetTick>
 80063ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063ee:	e00a      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063f0:	f7fd f960 	bl	80036b4 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80063fe:	4293      	cmp	r3, r2
 8006400:	d901      	bls.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e319      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006406:	4b0c      	ldr	r3, [pc, #48]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0ee      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800641a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800641e:	d111      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006420:	4b05      	ldr	r3, [pc, #20]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800642c:	4b04      	ldr	r3, [pc, #16]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800642e:	400b      	ands	r3, r1
 8006430:	4901      	ldr	r1, [pc, #4]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006432:	4313      	orrs	r3, r2
 8006434:	608b      	str	r3, [r1, #8]
 8006436:	e00b      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006438:	40023800 	.word	0x40023800
 800643c:	40007000 	.word	0x40007000
 8006440:	0ffffcff 	.word	0x0ffffcff
 8006444:	4baa      	ldr	r3, [pc, #680]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	4aa9      	ldr	r2, [pc, #676]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800644a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800644e:	6093      	str	r3, [r2, #8]
 8006450:	4ba7      	ldr	r3, [pc, #668]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006452:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800645c:	49a4      	ldr	r1, [pc, #656]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800645e:	4313      	orrs	r3, r2
 8006460:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0310 	and.w	r3, r3, #16
 800646a:	2b00      	cmp	r3, #0
 800646c:	d010      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800646e:	4ba0      	ldr	r3, [pc, #640]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006474:	4a9e      	ldr	r2, [pc, #632]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800647a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800647e:	4b9c      	ldr	r3, [pc, #624]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006480:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006488:	4999      	ldr	r1, [pc, #612]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800648a:	4313      	orrs	r3, r2
 800648c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00a      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800649c:	4b94      	ldr	r3, [pc, #592]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800649e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064aa:	4991      	ldr	r1, [pc, #580]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80064be:	4b8c      	ldr	r3, [pc, #560]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064cc:	4988      	ldr	r1, [pc, #544]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00a      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064e0:	4b83      	ldr	r3, [pc, #524]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ee:	4980      	ldr	r1, [pc, #512]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00a      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006502:	4b7b      	ldr	r3, [pc, #492]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006508:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006510:	4977      	ldr	r1, [pc, #476]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006512:	4313      	orrs	r3, r2
 8006514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00a      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006524:	4b72      	ldr	r3, [pc, #456]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800652a:	f023 0203 	bic.w	r2, r3, #3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006532:	496f      	ldr	r1, [pc, #444]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006534:	4313      	orrs	r3, r2
 8006536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006546:	4b6a      	ldr	r3, [pc, #424]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654c:	f023 020c 	bic.w	r2, r3, #12
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006554:	4966      	ldr	r1, [pc, #408]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006556:	4313      	orrs	r3, r2
 8006558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00a      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006568:	4b61      	ldr	r3, [pc, #388]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800656a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800656e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006576:	495e      	ldr	r1, [pc, #376]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006578:	4313      	orrs	r3, r2
 800657a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00a      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800658a:	4b59      	ldr	r3, [pc, #356]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800658c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006590:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006598:	4955      	ldr	r1, [pc, #340]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800659a:	4313      	orrs	r3, r2
 800659c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00a      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80065ac:	4b50      	ldr	r3, [pc, #320]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ba:	494d      	ldr	r1, [pc, #308]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00a      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80065ce:	4b48      	ldr	r3, [pc, #288]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065dc:	4944      	ldr	r1, [pc, #272]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00a      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80065f0:	4b3f      	ldr	r3, [pc, #252]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fe:	493c      	ldr	r1, [pc, #240]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006600:	4313      	orrs	r3, r2
 8006602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00a      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006612:	4b37      	ldr	r3, [pc, #220]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006618:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006620:	4933      	ldr	r1, [pc, #204]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006622:	4313      	orrs	r3, r2
 8006624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00a      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006634:	4b2e      	ldr	r3, [pc, #184]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800663a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006642:	492b      	ldr	r1, [pc, #172]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006644:	4313      	orrs	r3, r2
 8006646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d011      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006656:	4b26      	ldr	r3, [pc, #152]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800665c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006664:	4922      	ldr	r1, [pc, #136]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006666:	4313      	orrs	r3, r2
 8006668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006670:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006674:	d101      	bne.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006676:	2301      	movs	r3, #1
 8006678:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0308 	and.w	r3, r3, #8
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006686:	2301      	movs	r3, #1
 8006688:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00a      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006696:	4b16      	ldr	r3, [pc, #88]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800669c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066a4:	4912      	ldr	r1, [pc, #72]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00b      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80066b8:	4b0d      	ldr	r3, [pc, #52]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066c8:	4909      	ldr	r1, [pc, #36]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d006      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 80d9 	beq.w	8006896 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80066e4:	4b02      	ldr	r3, [pc, #8]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a01      	ldr	r2, [pc, #4]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066ee:	e001      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80066f0:	40023800 	.word	0x40023800
 80066f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066f6:	f7fc ffdd 	bl	80036b4 <HAL_GetTick>
 80066fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066fc:	e008      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066fe:	f7fc ffd9 	bl	80036b4 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	2b64      	cmp	r3, #100	; 0x64
 800670a:	d901      	bls.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e194      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006710:	4b6c      	ldr	r3, [pc, #432]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1f0      	bne.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	2b00      	cmp	r3, #0
 8006726:	d021      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800672c:	2b00      	cmp	r3, #0
 800672e:	d11d      	bne.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006730:	4b64      	ldr	r3, [pc, #400]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006736:	0c1b      	lsrs	r3, r3, #16
 8006738:	f003 0303 	and.w	r3, r3, #3
 800673c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800673e:	4b61      	ldr	r3, [pc, #388]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006744:	0e1b      	lsrs	r3, r3, #24
 8006746:	f003 030f 	and.w	r3, r3, #15
 800674a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	019a      	lsls	r2, r3, #6
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	041b      	lsls	r3, r3, #16
 8006756:	431a      	orrs	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	061b      	lsls	r3, r3, #24
 800675c:	431a      	orrs	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	071b      	lsls	r3, r3, #28
 8006764:	4957      	ldr	r1, [pc, #348]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006766:	4313      	orrs	r3, r2
 8006768:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d004      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006780:	d00a      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800678a:	2b00      	cmp	r3, #0
 800678c:	d02e      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006796:	d129      	bne.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006798:	4b4a      	ldr	r3, [pc, #296]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800679a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800679e:	0c1b      	lsrs	r3, r3, #16
 80067a0:	f003 0303 	and.w	r3, r3, #3
 80067a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80067a6:	4b47      	ldr	r3, [pc, #284]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067ac:	0f1b      	lsrs	r3, r3, #28
 80067ae:	f003 0307 	and.w	r3, r3, #7
 80067b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	019a      	lsls	r2, r3, #6
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	041b      	lsls	r3, r3, #16
 80067be:	431a      	orrs	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	061b      	lsls	r3, r3, #24
 80067c6:	431a      	orrs	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	071b      	lsls	r3, r3, #28
 80067cc:	493d      	ldr	r1, [pc, #244]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80067d4:	4b3b      	ldr	r3, [pc, #236]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067da:	f023 021f 	bic.w	r2, r3, #31
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e2:	3b01      	subs	r3, #1
 80067e4:	4937      	ldr	r1, [pc, #220]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d01d      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80067f8:	4b32      	ldr	r3, [pc, #200]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067fe:	0e1b      	lsrs	r3, r3, #24
 8006800:	f003 030f 	and.w	r3, r3, #15
 8006804:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006806:	4b2f      	ldr	r3, [pc, #188]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800680c:	0f1b      	lsrs	r3, r3, #28
 800680e:	f003 0307 	and.w	r3, r3, #7
 8006812:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	019a      	lsls	r2, r3, #6
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	041b      	lsls	r3, r3, #16
 8006820:	431a      	orrs	r2, r3
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	061b      	lsls	r3, r3, #24
 8006826:	431a      	orrs	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	071b      	lsls	r3, r3, #28
 800682c:	4925      	ldr	r1, [pc, #148]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800682e:	4313      	orrs	r3, r2
 8006830:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d011      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	019a      	lsls	r2, r3, #6
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	041b      	lsls	r3, r3, #16
 800684c:	431a      	orrs	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	061b      	lsls	r3, r3, #24
 8006854:	431a      	orrs	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	071b      	lsls	r3, r3, #28
 800685c:	4919      	ldr	r1, [pc, #100]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800685e:	4313      	orrs	r3, r2
 8006860:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006864:	4b17      	ldr	r3, [pc, #92]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a16      	ldr	r2, [pc, #88]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800686a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800686e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006870:	f7fc ff20 	bl	80036b4 <HAL_GetTick>
 8006874:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006876:	e008      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006878:	f7fc ff1c 	bl	80036b4 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b64      	cmp	r3, #100	; 0x64
 8006884:	d901      	bls.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e0d7      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800688a:	4b0e      	ldr	r3, [pc, #56]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0f0      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	2b01      	cmp	r3, #1
 800689a:	f040 80cd 	bne.w	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800689e:	4b09      	ldr	r3, [pc, #36]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a08      	ldr	r2, [pc, #32]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068aa:	f7fc ff03 	bl	80036b4 <HAL_GetTick>
 80068ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068b0:	e00a      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80068b2:	f7fc feff 	bl	80036b4 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b64      	cmp	r3, #100	; 0x64
 80068be:	d903      	bls.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e0ba      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80068c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068c8:	4b5e      	ldr	r3, [pc, #376]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068d4:	d0ed      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x682>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d009      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d02e      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d12a      	bne.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80068fe:	4b51      	ldr	r3, [pc, #324]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006904:	0c1b      	lsrs	r3, r3, #16
 8006906:	f003 0303 	and.w	r3, r3, #3
 800690a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800690c:	4b4d      	ldr	r3, [pc, #308]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800690e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006912:	0f1b      	lsrs	r3, r3, #28
 8006914:	f003 0307 	and.w	r3, r3, #7
 8006918:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	019a      	lsls	r2, r3, #6
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	041b      	lsls	r3, r3, #16
 8006924:	431a      	orrs	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	061b      	lsls	r3, r3, #24
 800692c:	431a      	orrs	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	071b      	lsls	r3, r3, #28
 8006932:	4944      	ldr	r1, [pc, #272]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006934:	4313      	orrs	r3, r2
 8006936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800693a:	4b42      	ldr	r3, [pc, #264]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800693c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006940:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006948:	3b01      	subs	r3, #1
 800694a:	021b      	lsls	r3, r3, #8
 800694c:	493d      	ldr	r1, [pc, #244]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800694e:	4313      	orrs	r3, r2
 8006950:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d022      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006964:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006968:	d11d      	bne.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800696a:	4b36      	ldr	r3, [pc, #216]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800696c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006970:	0e1b      	lsrs	r3, r3, #24
 8006972:	f003 030f 	and.w	r3, r3, #15
 8006976:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006978:	4b32      	ldr	r3, [pc, #200]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800697a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697e:	0f1b      	lsrs	r3, r3, #28
 8006980:	f003 0307 	and.w	r3, r3, #7
 8006984:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	019a      	lsls	r2, r3, #6
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	041b      	lsls	r3, r3, #16
 8006992:	431a      	orrs	r2, r3
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	061b      	lsls	r3, r3, #24
 8006998:	431a      	orrs	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	071b      	lsls	r3, r3, #28
 800699e:	4929      	ldr	r1, [pc, #164]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0308 	and.w	r3, r3, #8
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d028      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80069b2:	4b24      	ldr	r3, [pc, #144]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80069b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b8:	0e1b      	lsrs	r3, r3, #24
 80069ba:	f003 030f 	and.w	r3, r3, #15
 80069be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80069c0:	4b20      	ldr	r3, [pc, #128]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80069c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c6:	0c1b      	lsrs	r3, r3, #16
 80069c8:	f003 0303 	and.w	r3, r3, #3
 80069cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	019a      	lsls	r2, r3, #6
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	041b      	lsls	r3, r3, #16
 80069d8:	431a      	orrs	r2, r3
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	061b      	lsls	r3, r3, #24
 80069de:	431a      	orrs	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	071b      	lsls	r3, r3, #28
 80069e6:	4917      	ldr	r1, [pc, #92]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80069ee:	4b15      	ldr	r3, [pc, #84]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80069f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fc:	4911      	ldr	r1, [pc, #68]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006a04:	4b0f      	ldr	r3, [pc, #60]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a0e      	ldr	r2, [pc, #56]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a10:	f7fc fe50 	bl	80036b4 <HAL_GetTick>
 8006a14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006a16:	e008      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a18:	f7fc fe4c 	bl	80036b4 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b64      	cmp	r3, #100	; 0x64
 8006a24:	d901      	bls.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e007      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006a2a:	4b06      	ldr	r3, [pc, #24]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a36:	d1ef      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3720      	adds	r7, #32
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	40023800 	.word	0x40023800

08006a48 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8006a50:	2300      	movs	r3, #0
 8006a52:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a80      	ldr	r2, [pc, #512]	; (8006c58 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 8006a58:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8006a5a:	4b80      	ldr	r3, [pc, #512]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a60:	099b      	lsrs	r3, r3, #6
 8006a62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006a6a:	4b7c      	ldr	r3, [pc, #496]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a70:	0c1b      	lsrs	r3, r3, #16
 8006a72:	f003 0203 	and.w	r2, r3, #3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a7a:	4b78      	ldr	r3, [pc, #480]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a80:	0e1b      	lsrs	r3, r3, #24
 8006a82:	f003 020f 	and.w	r2, r3, #15
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a8a:	4b74      	ldr	r3, [pc, #464]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a90:	0f1b      	lsrs	r3, r3, #28
 8006a92:	f003 0207 	and.w	r2, r3, #7
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8006a9a:	4b70      	ldr	r3, [pc, #448]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa0:	099b      	lsrs	r3, r3, #6
 8006aa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006aaa:	4b6c      	ldr	r3, [pc, #432]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab0:	0c1b      	lsrs	r3, r3, #16
 8006ab2:	f003 0203 	and.w	r2, r3, #3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006aba:	4b68      	ldr	r3, [pc, #416]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac0:	0e1b      	lsrs	r3, r3, #24
 8006ac2:	f003 020f 	and.w	r2, r3, #15
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006aca:	4b64      	ldr	r3, [pc, #400]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad0:	0f1b      	lsrs	r3, r3, #28
 8006ad2:	f003 0207 	and.w	r2, r3, #7
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8006ada:	4b60      	ldr	r3, [pc, #384]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ae0:	f003 021f 	and.w	r2, r3, #31
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8006ae8:	4b5c      	ldr	r3, [pc, #368]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aee:	0a1b      	lsrs	r3, r3, #8
 8006af0:	f003 021f 	and.w	r2, r3, #31
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8006af8:	4b58      	ldr	r3, [pc, #352]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006afe:	0c1b      	lsrs	r3, r3, #16
 8006b00:	f003 0203 	and.w	r2, r3, #3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8006b08:	4b54      	ldr	r3, [pc, #336]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b0e:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8006b16:	4b51      	ldr	r3, [pc, #324]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b1c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8006b24:	4b4d      	ldr	r3, [pc, #308]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8006b30:	4b4a      	ldr	r3, [pc, #296]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8006b3e:	4b47      	ldr	r3, [pc, #284]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b44:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8006b4c:	4b43      	ldr	r3, [pc, #268]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b52:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8006b5a:	4b40      	ldr	r3, [pc, #256]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b60:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8006b68:	4b3c      	ldr	r3, [pc, #240]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b6e:	f003 0203 	and.w	r2, r3, #3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8006b76:	4b39      	ldr	r3, [pc, #228]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b7c:	f003 020c 	and.w	r2, r3, #12
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8006b84:	4b35      	ldr	r3, [pc, #212]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b8a:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8006b92:	4b32      	ldr	r3, [pc, #200]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b98:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8006ba0:	4b2e      	ldr	r3, [pc, #184]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8006bae:	4b2b      	ldr	r3, [pc, #172]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb4:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8006bbc:	4b27      	ldr	r3, [pc, #156]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc2:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8006bca:	4b24      	ldr	r3, [pc, #144]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd0:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006bd8:	4b20      	ldr	r3, [pc, #128]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bde:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8006be6:	4b1d      	ldr	r3, [pc, #116]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bec:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8006bf4:	4b19      	ldr	r3, [pc, #100]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfa:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006c02:	4b16      	ldr	r3, [pc, #88]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c08:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006c12:	4b12      	ldr	r3, [pc, #72]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006c1a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006c1c:	4b0f      	ldr	r3, [pc, #60]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c20:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	431a      	orrs	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8006c2c:	4b0b      	ldr	r3, [pc, #44]	; (8006c5c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d103      	bne.n	8006c42 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8006c40:	e003      	b.n	8006c4a <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c48:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006c4a:	bf00      	nop
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	00fffff1 	.word	0x00fffff1
 8006c5c:	40023800 	.word	0x40023800

08006c60 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8006c70:	2300      	movs	r3, #0
 8006c72:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8006c74:	2300      	movs	r3, #0
 8006c76:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c7e:	f040 808d 	bne.w	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006c82:	4b93      	ldr	r3, [pc, #588]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c88:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006c90:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c98:	d07c      	beq.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ca0:	d87b      	bhi.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d004      	beq.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cae:	d039      	beq.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006cb0:	e073      	b.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006cb2:	4b87      	ldr	r3, [pc, #540]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d108      	bne.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006cbe:	4b84      	ldr	r3, [pc, #528]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cc6:	4a83      	ldr	r2, [pc, #524]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ccc:	613b      	str	r3, [r7, #16]
 8006cce:	e007      	b.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006cd0:	4b7f      	ldr	r3, [pc, #508]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cd8:	4a7f      	ldr	r2, [pc, #508]	; (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cde:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006ce0:	4b7b      	ldr	r3, [pc, #492]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce6:	0e1b      	lsrs	r3, r3, #24
 8006ce8:	f003 030f 	and.w	r3, r3, #15
 8006cec:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006cee:	4b78      	ldr	r3, [pc, #480]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf4:	099b      	lsrs	r3, r3, #6
 8006cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	fb03 f202 	mul.w	r2, r3, r2
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d06:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006d08:	4b71      	ldr	r3, [pc, #452]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d0e:	0a1b      	lsrs	r3, r3, #8
 8006d10:	f003 031f 	and.w	r3, r3, #31
 8006d14:	3301      	adds	r3, #1
 8006d16:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d20:	617b      	str	r3, [r7, #20]
        break;
 8006d22:	e03b      	b.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006d24:	4b6a      	ldr	r3, [pc, #424]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d108      	bne.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d30:	4b67      	ldr	r3, [pc, #412]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d38:	4a66      	ldr	r2, [pc, #408]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3e:	613b      	str	r3, [r7, #16]
 8006d40:	e007      	b.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006d42:	4b63      	ldr	r3, [pc, #396]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d4a:	4a63      	ldr	r2, [pc, #396]	; (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d50:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006d52:	4b5f      	ldr	r3, [pc, #380]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d58:	0e1b      	lsrs	r3, r3, #24
 8006d5a:	f003 030f 	and.w	r3, r3, #15
 8006d5e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006d60:	4b5b      	ldr	r3, [pc, #364]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d66:	099b      	lsrs	r3, r3, #6
 8006d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	fb03 f202 	mul.w	r2, r3, r2
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d78:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006d7a:	4b55      	ldr	r3, [pc, #340]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d80:	f003 031f 	and.w	r3, r3, #31
 8006d84:	3301      	adds	r3, #1
 8006d86:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d90:	617b      	str	r3, [r7, #20]
        break;
 8006d92:	e003      	b.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d94:	4b51      	ldr	r3, [pc, #324]	; (8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006d96:	617b      	str	r3, [r7, #20]
        break;
 8006d98:	e000      	b.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8006d9a:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006da2:	f040 808d 	bne.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006da6:	4b4a      	ldr	r3, [pc, #296]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dac:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006db4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006dbc:	d07c      	beq.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006dc4:	d87b      	bhi.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d004      	beq.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dd2:	d039      	beq.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006dd4:	e073      	b.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006dd6:	4b3e      	ldr	r3, [pc, #248]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d108      	bne.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006de2:	4b3b      	ldr	r3, [pc, #236]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dea:	4a3a      	ldr	r2, [pc, #232]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df0:	613b      	str	r3, [r7, #16]
 8006df2:	e007      	b.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006df4:	4b36      	ldr	r3, [pc, #216]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dfc:	4a36      	ldr	r2, [pc, #216]	; (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e02:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006e04:	4b32      	ldr	r3, [pc, #200]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e0a:	0e1b      	lsrs	r3, r3, #24
 8006e0c:	f003 030f 	and.w	r3, r3, #15
 8006e10:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006e12:	4b2f      	ldr	r3, [pc, #188]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e18:	099b      	lsrs	r3, r3, #6
 8006e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	fb03 f202 	mul.w	r2, r3, r2
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006e2c:	4b28      	ldr	r3, [pc, #160]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e32:	0a1b      	lsrs	r3, r3, #8
 8006e34:	f003 031f 	and.w	r3, r3, #31
 8006e38:	3301      	adds	r3, #1
 8006e3a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e44:	617b      	str	r3, [r7, #20]
        break;
 8006e46:	e03b      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006e48:	4b21      	ldr	r3, [pc, #132]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d108      	bne.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e54:	4b1e      	ldr	r3, [pc, #120]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e5c:	4a1d      	ldr	r2, [pc, #116]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e62:	613b      	str	r3, [r7, #16]
 8006e64:	e007      	b.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006e66:	4b1a      	ldr	r3, [pc, #104]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e6e:	4a1a      	ldr	r2, [pc, #104]	; (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e74:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006e76:	4b16      	ldr	r3, [pc, #88]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e7c:	0e1b      	lsrs	r3, r3, #24
 8006e7e:	f003 030f 	and.w	r3, r3, #15
 8006e82:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006e84:	4b12      	ldr	r3, [pc, #72]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e8a:	099b      	lsrs	r3, r3, #6
 8006e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	fb03 f202 	mul.w	r2, r3, r2
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e9c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006e9e:	4b0c      	ldr	r3, [pc, #48]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ea4:	f003 031f 	and.w	r3, r3, #31
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb4:	617b      	str	r3, [r7, #20]
        break;
 8006eb6:	e003      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006eb8:	4b08      	ldr	r3, [pc, #32]	; (8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006eba:	617b      	str	r3, [r7, #20]
        break;
 8006ebc:	e000      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8006ebe:	bf00      	nop
      }
    }
  }

  return frequency;
 8006ec0:	697b      	ldr	r3, [r7, #20]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	371c      	adds	r7, #28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	40023800 	.word	0x40023800
 8006ed4:	00f42400 	.word	0x00f42400
 8006ed8:	017d7840 	.word	0x017d7840
 8006edc:	00bb8000 	.word	0x00bb8000

08006ee0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b088      	sub	sp, #32
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8006eec:	2300      	movs	r3, #0
 8006eee:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e156      	b.n	80071ac <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d106      	bne.n	8006f18 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7fa f91e 	bl	8001154 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fa63 	bl	80073ec <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d00c      	beq.n	8006f48 <HAL_SAI_Init+0x68>
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d80d      	bhi.n	8006f4e <HAL_SAI_Init+0x6e>
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <HAL_SAI_Init+0x5c>
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d003      	beq.n	8006f42 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8006f3a:	e008      	b.n	8006f4e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	61fb      	str	r3, [r7, #28]
      break;
 8006f40:	e006      	b.n	8006f50 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006f42:	2310      	movs	r3, #16
 8006f44:	61fb      	str	r3, [r7, #28]
      break;
 8006f46:	e003      	b.n	8006f50 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006f48:	2320      	movs	r3, #32
 8006f4a:	61fb      	str	r3, [r7, #28]
      break;
 8006f4c:	e000      	b.n	8006f50 <HAL_SAI_Init+0x70>
      break;
 8006f4e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	2b03      	cmp	r3, #3
 8006f56:	d81e      	bhi.n	8006f96 <HAL_SAI_Init+0xb6>
 8006f58:	a201      	add	r2, pc, #4	; (adr r2, 8006f60 <HAL_SAI_Init+0x80>)
 8006f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5e:	bf00      	nop
 8006f60:	08006f71 	.word	0x08006f71
 8006f64:	08006f77 	.word	0x08006f77
 8006f68:	08006f7f 	.word	0x08006f7f
 8006f6c:	08006f87 	.word	0x08006f87
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8006f70:	2300      	movs	r3, #0
 8006f72:	617b      	str	r3, [r7, #20]
    }
    break;
 8006f74:	e010      	b.n	8006f98 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f7a:	617b      	str	r3, [r7, #20]
    }
    break;
 8006f7c:	e00c      	b.n	8006f98 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006f7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f82:	617b      	str	r3, [r7, #20]
    }
    break;
 8006f84:	e008      	b.n	8006f98 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006f86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f8a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	f043 0301 	orr.w	r3, r3, #1
 8006f92:	61fb      	str	r3, [r7, #28]
    }
    break;
 8006f94:	e000      	b.n	8006f98 <HAL_SAI_Init+0xb8>
    default:
      break;
 8006f96:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a85      	ldr	r2, [pc, #532]	; (80071b4 <HAL_SAI_Init+0x2d4>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d004      	beq.n	8006fac <HAL_SAI_Init+0xcc>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a84      	ldr	r2, [pc, #528]	; (80071b8 <HAL_SAI_Init+0x2d8>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d103      	bne.n	8006fb4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8006fac:	4a83      	ldr	r2, [pc, #524]	; (80071bc <HAL_SAI_Init+0x2dc>)
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	e002      	b.n	8006fba <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006fb4:	4a82      	ldr	r2, [pc, #520]	; (80071c0 <HAL_SAI_Init+0x2e0>)
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d04c      	beq.n	800705c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a7a      	ldr	r2, [pc, #488]	; (80071b4 <HAL_SAI_Init+0x2d4>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d004      	beq.n	8006fda <HAL_SAI_Init+0xfa>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a78      	ldr	r2, [pc, #480]	; (80071b8 <HAL_SAI_Init+0x2d8>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d104      	bne.n	8006fe4 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006fda:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006fde:	f7ff fe3f 	bl	8006c60 <HAL_RCCEx_GetPeriphCLKFreq>
 8006fe2:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a76      	ldr	r2, [pc, #472]	; (80071c4 <HAL_SAI_Init+0x2e4>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d004      	beq.n	8006ff8 <HAL_SAI_Init+0x118>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a75      	ldr	r2, [pc, #468]	; (80071c8 <HAL_SAI_Init+0x2e8>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d104      	bne.n	8007002 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006ff8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006ffc:	f7ff fe30 	bl	8006c60 <HAL_RCCEx_GetPeriphCLKFreq>
 8007000:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	4613      	mov	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	461a      	mov	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	025b      	lsls	r3, r3, #9
 8007014:	fbb2 f3f3 	udiv	r3, r2, r3
 8007018:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	4a6b      	ldr	r2, [pc, #428]	; (80071cc <HAL_SAI_Init+0x2ec>)
 800701e:	fba2 2303 	umull	r2, r3, r2, r3
 8007022:	08da      	lsrs	r2, r3, #3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8007028:	68f9      	ldr	r1, [r7, #12]
 800702a:	4b68      	ldr	r3, [pc, #416]	; (80071cc <HAL_SAI_Init+0x2ec>)
 800702c:	fba3 2301 	umull	r2, r3, r3, r1
 8007030:	08da      	lsrs	r2, r3, #3
 8007032:	4613      	mov	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	1aca      	subs	r2, r1, r3
 800703c:	2a08      	cmp	r2, #8
 800703e:	d904      	bls.n	800704a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	1c5a      	adds	r2, r3, #1
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704e:	2b04      	cmp	r3, #4
 8007050:	d104      	bne.n	800705c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	085a      	lsrs	r2, r3, #1
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d003      	beq.n	800706c <HAL_SAI_Init+0x18c>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	2b02      	cmp	r3, #2
 800706a:	d109      	bne.n	8007080 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007070:	2b01      	cmp	r3, #1
 8007072:	d101      	bne.n	8007078 <HAL_SAI_Init+0x198>
 8007074:	2300      	movs	r3, #0
 8007076:	e001      	b.n	800707c <HAL_SAI_Init+0x19c>
 8007078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800707c:	61bb      	str	r3, [r7, #24]
 800707e:	e008      	b.n	8007092 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007084:	2b01      	cmp	r3, #1
 8007086:	d102      	bne.n	800708e <HAL_SAI_Init+0x1ae>
 8007088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800708c:	e000      	b.n	8007090 <HAL_SAI_Init+0x1b0>
 800708e:	2300      	movs	r3, #0
 8007090:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6819      	ldr	r1, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	4b4c      	ldr	r3, [pc, #304]	; (80071d0 <HAL_SAI_Init+0x2f0>)
 800709e:	400b      	ands	r3, r1
 80070a0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6819      	ldr	r1, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80070b6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070bc:	431a      	orrs	r2, r3
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 80070ca:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80070d6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a1b      	ldr	r3, [r3, #32]
 80070dc:	051b      	lsls	r3, r3, #20
 80070de:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	430a      	orrs	r2, r1
 80070e6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6859      	ldr	r1, [r3, #4]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	4b38      	ldr	r3, [pc, #224]	; (80071d4 <HAL_SAI_Init+0x2f4>)
 80070f4:	400b      	ands	r3, r1
 80070f6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6859      	ldr	r1, [r3, #4]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	699a      	ldr	r2, [r3, #24]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007106:	431a      	orrs	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710c:	431a      	orrs	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	430a      	orrs	r2, r1
 8007114:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6899      	ldr	r1, [r3, #8]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	4b2d      	ldr	r3, [pc, #180]	; (80071d8 <HAL_SAI_Init+0x2f8>)
 8007122:	400b      	ands	r3, r1
 8007124:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6899      	ldr	r1, [r3, #8]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007130:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007136:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800713c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8007142:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007148:	3b01      	subs	r3, #1
 800714a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800714c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68d9      	ldr	r1, [r3, #12]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007164:	400b      	ands	r3, r1
 8007166:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68d9      	ldr	r1, [r3, #12]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007176:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800717c:	041b      	lsls	r3, r3, #16
 800717e:	431a      	orrs	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007184:	3b01      	subs	r3, #1
 8007186:	021b      	lsls	r3, r3, #8
 8007188:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3720      	adds	r7, #32
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	40015804 	.word	0x40015804
 80071b8:	40015824 	.word	0x40015824
 80071bc:	40015800 	.word	0x40015800
 80071c0:	40015c00 	.word	0x40015c00
 80071c4:	40015c04 	.word	0x40015c04
 80071c8:	40015c24 	.word	0x40015c24
 80071cc:	cccccccd 	.word	0xcccccccd
 80071d0:	ff05c010 	.word	0xff05c010
 80071d4:	ffff1ff0 	.word	0xffff1ff0
 80071d8:	fff88000 	.word	0xfff88000

080071dc <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e027      	b.n	800723e <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2202      	movs	r2, #2
 80071f2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2200      	movs	r2, #0
 80071fc:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f04f 32ff 	mov.w	r2, #4294967295
 8007206:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f8ef 	bl	80073ec <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	685a      	ldr	r2, [r3, #4]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f042 0208 	orr.w	r2, r2, #8
 800721c:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7fa f84e 	bl	80012c0 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
	...

08007248 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	4613      	mov	r3, r2
 8007254:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <HAL_SAI_Receive_DMA+0x1a>
 800725c:	88fb      	ldrh	r3, [r7, #6]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e074      	b.n	8007350 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b01      	cmp	r3, #1
 8007270:	d16d      	bne.n	800734e <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007278:	2b01      	cmp	r3, #1
 800727a:	d101      	bne.n	8007280 <HAL_SAI_Receive_DMA+0x38>
 800727c:	2302      	movs	r3, #2
 800727e:	e067      	b.n	8007350 <HAL_SAI_Receive_DMA+0x108>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	88fa      	ldrh	r2, [r7, #6]
 8007292:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	88fa      	ldrh	r2, [r7, #6]
 800729a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2222      	movs	r2, #34	; 0x22
 80072aa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b2:	4a29      	ldr	r2, [pc, #164]	; (8007358 <HAL_SAI_Receive_DMA+0x110>)
 80072b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ba:	4a28      	ldr	r2, [pc, #160]	; (800735c <HAL_SAI_Receive_DMA+0x114>)
 80072bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c2:	4a27      	ldr	r2, [pc, #156]	; (8007360 <HAL_SAI_Receive_DMA+0x118>)
 80072c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ca:	2200      	movs	r2, #0
 80072cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	331c      	adds	r3, #28
 80072d8:	4619      	mov	r1, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072de:	461a      	mov	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80072e6:	f7fc fc03 	bl	8003af0 <HAL_DMA_Start_IT>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d005      	beq.n	80072fc <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e029      	b.n	8007350 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80072fc:	2100      	movs	r1, #0
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f000 f83e 	bl	8007380 <SAI_InterruptFlag>
 8007304:	4601      	mov	r1, r0
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	691a      	ldr	r2, [r3, #16]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	430a      	orrs	r2, r1
 8007312:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007322:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d107      	bne.n	8007342 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007340:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	e000      	b.n	8007350 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800734e:	2302      	movs	r3, #2
  }
}
 8007350:	4618      	mov	r0, r3
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	080074bd 	.word	0x080074bd
 800735c:	0800745d 	.word	0x0800745d
 8007360:	080074d9 	.word	0x080074d9

08007364 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007372:	b2db      	uxtb	r3, r3
}
 8007374:	4618      	mov	r0, r3
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800738a:	2301      	movs	r3, #1
 800738c:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d103      	bne.n	800739c <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f043 0308 	orr.w	r3, r3, #8
 800739a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a0:	2b08      	cmp	r3, #8
 80073a2:	d10b      	bne.n	80073bc <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d003      	beq.n	80073b4 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d103      	bne.n	80073bc <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f043 0310 	orr.w	r3, r3, #16
 80073ba:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	2b03      	cmp	r3, #3
 80073c2:	d003      	beq.n	80073cc <SAI_InterruptFlag+0x4c>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d104      	bne.n	80073d6 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	e003      	b.n	80073de <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f043 0304 	orr.w	r3, r3, #4
 80073dc:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80073de:	68fb      	ldr	r3, [r7, #12]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80073f4:	4b17      	ldr	r3, [pc, #92]	; (8007454 <SAI_Disable+0x68>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a17      	ldr	r2, [pc, #92]	; (8007458 <SAI_Disable+0x6c>)
 80073fa:	fba2 2303 	umull	r2, r3, r2, r3
 80073fe:	0b1b      	lsrs	r3, r3, #12
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007416:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	1e5a      	subs	r2, r3, #1
 800741c:	60fa      	str	r2, [r7, #12]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10a      	bne.n	8007438 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007428:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	72fb      	strb	r3, [r7, #11]
      break;
 8007436:	e006      	b.n	8007446 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1e8      	bne.n	8007418 <SAI_Disable+0x2c>

  return status;
 8007446:	7afb      	ldrb	r3, [r7, #11]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	20000000 	.word	0x20000000
 8007458:	95cbec1b 	.word	0x95cbec1b

0800745c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007468:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007472:	d01c      	beq.n	80074ae <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007482:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800748c:	2100      	movs	r1, #0
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f7ff ff76 	bl	8007380 <SAI_InterruptFlag>
 8007494:	4603      	mov	r3, r0
 8007496:	43d9      	mvns	r1, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	691a      	ldr	r2, [r3, #16]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	400a      	ands	r2, r1
 80074a4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f7fb ff36 	bl	8003320 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80074b4:	bf00      	nop
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f7fb ff32 	bl	8003334 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80074d0:	bf00      	nop
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e4:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d004      	beq.n	800750a <SAI_DMAError+0x32>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007506:	2b01      	cmp	r3, #1
 8007508:	d112      	bne.n	8007530 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007518:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f7ff ff66 	bl	80073ec <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f7fb fd05 	bl	8002f40 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007536:	bf00      	nop
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b082      	sub	sp, #8
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e025      	b.n	800759e <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d106      	bne.n	800756c <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7f9 fdea 	bl	8001140 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3304      	adds	r3, #4
 800757c:	4619      	mov	r1, r3
 800757e:	4610      	mov	r0, r2
 8007580:	f000 ff42 	bl	8008408 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6818      	ldr	r0, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	461a      	mov	r2, r3
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	f000 ff96 	bl	80084c0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e049      	b.n	800764c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d106      	bne.n	80075d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f841 	bl	8007654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2202      	movs	r2, #2
 80075d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	3304      	adds	r3, #4
 80075e2:	4619      	mov	r1, r3
 80075e4:	4610      	mov	r0, r2
 80075e6:	f000 f9ff 	bl	80079e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2201      	movs	r2, #1
 80075ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800765c:	bf00      	nop
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b01      	cmp	r3, #1
 800767a:	d001      	beq.n	8007680 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e054      	b.n	800772a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2202      	movs	r2, #2
 8007684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f042 0201 	orr.w	r2, r2, #1
 8007696:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a26      	ldr	r2, [pc, #152]	; (8007738 <HAL_TIM_Base_Start_IT+0xd0>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d022      	beq.n	80076e8 <HAL_TIM_Base_Start_IT+0x80>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076aa:	d01d      	beq.n	80076e8 <HAL_TIM_Base_Start_IT+0x80>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a22      	ldr	r2, [pc, #136]	; (800773c <HAL_TIM_Base_Start_IT+0xd4>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d018      	beq.n	80076e8 <HAL_TIM_Base_Start_IT+0x80>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a21      	ldr	r2, [pc, #132]	; (8007740 <HAL_TIM_Base_Start_IT+0xd8>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d013      	beq.n	80076e8 <HAL_TIM_Base_Start_IT+0x80>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a1f      	ldr	r2, [pc, #124]	; (8007744 <HAL_TIM_Base_Start_IT+0xdc>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d00e      	beq.n	80076e8 <HAL_TIM_Base_Start_IT+0x80>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a1e      	ldr	r2, [pc, #120]	; (8007748 <HAL_TIM_Base_Start_IT+0xe0>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d009      	beq.n	80076e8 <HAL_TIM_Base_Start_IT+0x80>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a1c      	ldr	r2, [pc, #112]	; (800774c <HAL_TIM_Base_Start_IT+0xe4>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d004      	beq.n	80076e8 <HAL_TIM_Base_Start_IT+0x80>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a1b      	ldr	r2, [pc, #108]	; (8007750 <HAL_TIM_Base_Start_IT+0xe8>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d115      	bne.n	8007714 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689a      	ldr	r2, [r3, #8]
 80076ee:	4b19      	ldr	r3, [pc, #100]	; (8007754 <HAL_TIM_Base_Start_IT+0xec>)
 80076f0:	4013      	ands	r3, r2
 80076f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2b06      	cmp	r3, #6
 80076f8:	d015      	beq.n	8007726 <HAL_TIM_Base_Start_IT+0xbe>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007700:	d011      	beq.n	8007726 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f042 0201 	orr.w	r2, r2, #1
 8007710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007712:	e008      	b.n	8007726 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0201 	orr.w	r2, r2, #1
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	e000      	b.n	8007728 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007726:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	40010000 	.word	0x40010000
 800773c:	40000400 	.word	0x40000400
 8007740:	40000800 	.word	0x40000800
 8007744:	40000c00 	.word	0x40000c00
 8007748:	40010400 	.word	0x40010400
 800774c:	40014000 	.word	0x40014000
 8007750:	40001800 	.word	0x40001800
 8007754:	00010007 	.word	0x00010007

08007758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b02      	cmp	r3, #2
 800776c:	d122      	bne.n	80077b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	f003 0302 	and.w	r3, r3, #2
 8007778:	2b02      	cmp	r3, #2
 800777a:	d11b      	bne.n	80077b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f06f 0202 	mvn.w	r2, #2
 8007784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f905 	bl	80079aa <HAL_TIM_IC_CaptureCallback>
 80077a0:	e005      	b.n	80077ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f8f7 	bl	8007996 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f908 	bl	80079be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	f003 0304 	and.w	r3, r3, #4
 80077be:	2b04      	cmp	r3, #4
 80077c0:	d122      	bne.n	8007808 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	d11b      	bne.n	8007808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f06f 0204 	mvn.w	r2, #4
 80077d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2202      	movs	r2, #2
 80077de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d003      	beq.n	80077f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f8db 	bl	80079aa <HAL_TIM_IC_CaptureCallback>
 80077f4:	e005      	b.n	8007802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f8cd 	bl	8007996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f8de 	bl	80079be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	f003 0308 	and.w	r3, r3, #8
 8007812:	2b08      	cmp	r3, #8
 8007814:	d122      	bne.n	800785c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	f003 0308 	and.w	r3, r3, #8
 8007820:	2b08      	cmp	r3, #8
 8007822:	d11b      	bne.n	800785c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f06f 0208 	mvn.w	r2, #8
 800782c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2204      	movs	r2, #4
 8007832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	f003 0303 	and.w	r3, r3, #3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d003      	beq.n	800784a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f8b1 	bl	80079aa <HAL_TIM_IC_CaptureCallback>
 8007848:	e005      	b.n	8007856 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f8a3 	bl	8007996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f8b4 	bl	80079be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f003 0310 	and.w	r3, r3, #16
 8007866:	2b10      	cmp	r3, #16
 8007868:	d122      	bne.n	80078b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f003 0310 	and.w	r3, r3, #16
 8007874:	2b10      	cmp	r3, #16
 8007876:	d11b      	bne.n	80078b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f06f 0210 	mvn.w	r2, #16
 8007880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2208      	movs	r2, #8
 8007886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f887 	bl	80079aa <HAL_TIM_IC_CaptureCallback>
 800789c:	e005      	b.n	80078aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f879 	bl	8007996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f88a 	bl	80079be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d10e      	bne.n	80078dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d107      	bne.n	80078dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f06f 0201 	mvn.w	r2, #1
 80078d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7f9 f98a 	bl	8000bf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078e6:	2b80      	cmp	r3, #128	; 0x80
 80078e8:	d10e      	bne.n	8007908 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f4:	2b80      	cmp	r3, #128	; 0x80
 80078f6:	d107      	bne.n	8007908 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f91a 	bl	8007b3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007916:	d10e      	bne.n	8007936 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007922:	2b80      	cmp	r3, #128	; 0x80
 8007924:	d107      	bne.n	8007936 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800792e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f90d 	bl	8007b50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007940:	2b40      	cmp	r3, #64	; 0x40
 8007942:	d10e      	bne.n	8007962 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800794e:	2b40      	cmp	r3, #64	; 0x40
 8007950:	d107      	bne.n	8007962 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800795a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f838 	bl	80079d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	f003 0320 	and.w	r3, r3, #32
 800796c:	2b20      	cmp	r3, #32
 800796e:	d10e      	bne.n	800798e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	f003 0320 	and.w	r3, r3, #32
 800797a:	2b20      	cmp	r3, #32
 800797c:	d107      	bne.n	800798e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f06f 0220 	mvn.w	r2, #32
 8007986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f8cd 	bl	8007b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800798e:	bf00      	nop
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007996:	b480      	push	{r7}
 8007998:	b083      	sub	sp, #12
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800799e:	bf00      	nop
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b083      	sub	sp, #12
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079b2:	bf00      	nop
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079c6:	bf00      	nop
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
	...

080079e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a40      	ldr	r2, [pc, #256]	; (8007afc <TIM_Base_SetConfig+0x114>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d013      	beq.n	8007a28 <TIM_Base_SetConfig+0x40>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a06:	d00f      	beq.n	8007a28 <TIM_Base_SetConfig+0x40>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a3d      	ldr	r2, [pc, #244]	; (8007b00 <TIM_Base_SetConfig+0x118>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d00b      	beq.n	8007a28 <TIM_Base_SetConfig+0x40>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a3c      	ldr	r2, [pc, #240]	; (8007b04 <TIM_Base_SetConfig+0x11c>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d007      	beq.n	8007a28 <TIM_Base_SetConfig+0x40>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a3b      	ldr	r2, [pc, #236]	; (8007b08 <TIM_Base_SetConfig+0x120>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d003      	beq.n	8007a28 <TIM_Base_SetConfig+0x40>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a3a      	ldr	r2, [pc, #232]	; (8007b0c <TIM_Base_SetConfig+0x124>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d108      	bne.n	8007a3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a2f      	ldr	r2, [pc, #188]	; (8007afc <TIM_Base_SetConfig+0x114>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d02b      	beq.n	8007a9a <TIM_Base_SetConfig+0xb2>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a48:	d027      	beq.n	8007a9a <TIM_Base_SetConfig+0xb2>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a2c      	ldr	r2, [pc, #176]	; (8007b00 <TIM_Base_SetConfig+0x118>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d023      	beq.n	8007a9a <TIM_Base_SetConfig+0xb2>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a2b      	ldr	r2, [pc, #172]	; (8007b04 <TIM_Base_SetConfig+0x11c>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d01f      	beq.n	8007a9a <TIM_Base_SetConfig+0xb2>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a2a      	ldr	r2, [pc, #168]	; (8007b08 <TIM_Base_SetConfig+0x120>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d01b      	beq.n	8007a9a <TIM_Base_SetConfig+0xb2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a29      	ldr	r2, [pc, #164]	; (8007b0c <TIM_Base_SetConfig+0x124>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d017      	beq.n	8007a9a <TIM_Base_SetConfig+0xb2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a28      	ldr	r2, [pc, #160]	; (8007b10 <TIM_Base_SetConfig+0x128>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d013      	beq.n	8007a9a <TIM_Base_SetConfig+0xb2>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a27      	ldr	r2, [pc, #156]	; (8007b14 <TIM_Base_SetConfig+0x12c>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d00f      	beq.n	8007a9a <TIM_Base_SetConfig+0xb2>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a26      	ldr	r2, [pc, #152]	; (8007b18 <TIM_Base_SetConfig+0x130>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d00b      	beq.n	8007a9a <TIM_Base_SetConfig+0xb2>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a25      	ldr	r2, [pc, #148]	; (8007b1c <TIM_Base_SetConfig+0x134>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d007      	beq.n	8007a9a <TIM_Base_SetConfig+0xb2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a24      	ldr	r2, [pc, #144]	; (8007b20 <TIM_Base_SetConfig+0x138>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d003      	beq.n	8007a9a <TIM_Base_SetConfig+0xb2>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a23      	ldr	r2, [pc, #140]	; (8007b24 <TIM_Base_SetConfig+0x13c>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d108      	bne.n	8007aac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	689a      	ldr	r2, [r3, #8]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a0a      	ldr	r2, [pc, #40]	; (8007afc <TIM_Base_SetConfig+0x114>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d003      	beq.n	8007ae0 <TIM_Base_SetConfig+0xf8>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a0c      	ldr	r2, [pc, #48]	; (8007b0c <TIM_Base_SetConfig+0x124>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d103      	bne.n	8007ae8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	691a      	ldr	r2, [r3, #16]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	615a      	str	r2, [r3, #20]
}
 8007aee:	bf00      	nop
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	40010000 	.word	0x40010000
 8007b00:	40000400 	.word	0x40000400
 8007b04:	40000800 	.word	0x40000800
 8007b08:	40000c00 	.word	0x40000c00
 8007b0c:	40010400 	.word	0x40010400
 8007b10:	40014000 	.word	0x40014000
 8007b14:	40014400 	.word	0x40014400
 8007b18:	40014800 	.word	0x40014800
 8007b1c:	40001800 	.word	0x40001800
 8007b20:	40001c00 	.word	0x40001c00
 8007b24:	40002000 	.word	0x40002000

08007b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e040      	b.n	8007bf8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d106      	bne.n	8007b8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7f9 f9c8 	bl	8000f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2224      	movs	r2, #36	; 0x24
 8007b90:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f022 0201 	bic.w	r2, r2, #1
 8007ba0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f82c 	bl	8007c00 <UART_SetConfig>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d101      	bne.n	8007bb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e022      	b.n	8007bf8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d002      	beq.n	8007bc0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fa84 	bl	80080c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007bce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689a      	ldr	r2, [r3, #8]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f042 0201 	orr.w	r2, r2, #1
 8007bee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fb0b 	bl	800820c <UART_CheckIdleState>
 8007bf6:	4603      	mov	r3, r0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b088      	sub	sp, #32
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	689a      	ldr	r2, [r3, #8]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	431a      	orrs	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	4ba6      	ldr	r3, [pc, #664]	; (8007ec4 <UART_SetConfig+0x2c4>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	6812      	ldr	r2, [r2, #0]
 8007c32:	6979      	ldr	r1, [r7, #20]
 8007c34:	430b      	orrs	r3, r1
 8007c36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a1b      	ldr	r3, [r3, #32]
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a94      	ldr	r2, [pc, #592]	; (8007ec8 <UART_SetConfig+0x2c8>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d120      	bne.n	8007cbe <UART_SetConfig+0xbe>
 8007c7c:	4b93      	ldr	r3, [pc, #588]	; (8007ecc <UART_SetConfig+0x2cc>)
 8007c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c82:	f003 0303 	and.w	r3, r3, #3
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	d816      	bhi.n	8007cb8 <UART_SetConfig+0xb8>
 8007c8a:	a201      	add	r2, pc, #4	; (adr r2, 8007c90 <UART_SetConfig+0x90>)
 8007c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c90:	08007ca1 	.word	0x08007ca1
 8007c94:	08007cad 	.word	0x08007cad
 8007c98:	08007ca7 	.word	0x08007ca7
 8007c9c:	08007cb3 	.word	0x08007cb3
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	77fb      	strb	r3, [r7, #31]
 8007ca4:	e150      	b.n	8007f48 <UART_SetConfig+0x348>
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	77fb      	strb	r3, [r7, #31]
 8007caa:	e14d      	b.n	8007f48 <UART_SetConfig+0x348>
 8007cac:	2304      	movs	r3, #4
 8007cae:	77fb      	strb	r3, [r7, #31]
 8007cb0:	e14a      	b.n	8007f48 <UART_SetConfig+0x348>
 8007cb2:	2308      	movs	r3, #8
 8007cb4:	77fb      	strb	r3, [r7, #31]
 8007cb6:	e147      	b.n	8007f48 <UART_SetConfig+0x348>
 8007cb8:	2310      	movs	r3, #16
 8007cba:	77fb      	strb	r3, [r7, #31]
 8007cbc:	e144      	b.n	8007f48 <UART_SetConfig+0x348>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a83      	ldr	r2, [pc, #524]	; (8007ed0 <UART_SetConfig+0x2d0>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d132      	bne.n	8007d2e <UART_SetConfig+0x12e>
 8007cc8:	4b80      	ldr	r3, [pc, #512]	; (8007ecc <UART_SetConfig+0x2cc>)
 8007cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cce:	f003 030c 	and.w	r3, r3, #12
 8007cd2:	2b0c      	cmp	r3, #12
 8007cd4:	d828      	bhi.n	8007d28 <UART_SetConfig+0x128>
 8007cd6:	a201      	add	r2, pc, #4	; (adr r2, 8007cdc <UART_SetConfig+0xdc>)
 8007cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cdc:	08007d11 	.word	0x08007d11
 8007ce0:	08007d29 	.word	0x08007d29
 8007ce4:	08007d29 	.word	0x08007d29
 8007ce8:	08007d29 	.word	0x08007d29
 8007cec:	08007d1d 	.word	0x08007d1d
 8007cf0:	08007d29 	.word	0x08007d29
 8007cf4:	08007d29 	.word	0x08007d29
 8007cf8:	08007d29 	.word	0x08007d29
 8007cfc:	08007d17 	.word	0x08007d17
 8007d00:	08007d29 	.word	0x08007d29
 8007d04:	08007d29 	.word	0x08007d29
 8007d08:	08007d29 	.word	0x08007d29
 8007d0c:	08007d23 	.word	0x08007d23
 8007d10:	2300      	movs	r3, #0
 8007d12:	77fb      	strb	r3, [r7, #31]
 8007d14:	e118      	b.n	8007f48 <UART_SetConfig+0x348>
 8007d16:	2302      	movs	r3, #2
 8007d18:	77fb      	strb	r3, [r7, #31]
 8007d1a:	e115      	b.n	8007f48 <UART_SetConfig+0x348>
 8007d1c:	2304      	movs	r3, #4
 8007d1e:	77fb      	strb	r3, [r7, #31]
 8007d20:	e112      	b.n	8007f48 <UART_SetConfig+0x348>
 8007d22:	2308      	movs	r3, #8
 8007d24:	77fb      	strb	r3, [r7, #31]
 8007d26:	e10f      	b.n	8007f48 <UART_SetConfig+0x348>
 8007d28:	2310      	movs	r3, #16
 8007d2a:	77fb      	strb	r3, [r7, #31]
 8007d2c:	e10c      	b.n	8007f48 <UART_SetConfig+0x348>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a68      	ldr	r2, [pc, #416]	; (8007ed4 <UART_SetConfig+0x2d4>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d120      	bne.n	8007d7a <UART_SetConfig+0x17a>
 8007d38:	4b64      	ldr	r3, [pc, #400]	; (8007ecc <UART_SetConfig+0x2cc>)
 8007d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007d42:	2b30      	cmp	r3, #48	; 0x30
 8007d44:	d013      	beq.n	8007d6e <UART_SetConfig+0x16e>
 8007d46:	2b30      	cmp	r3, #48	; 0x30
 8007d48:	d814      	bhi.n	8007d74 <UART_SetConfig+0x174>
 8007d4a:	2b20      	cmp	r3, #32
 8007d4c:	d009      	beq.n	8007d62 <UART_SetConfig+0x162>
 8007d4e:	2b20      	cmp	r3, #32
 8007d50:	d810      	bhi.n	8007d74 <UART_SetConfig+0x174>
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d002      	beq.n	8007d5c <UART_SetConfig+0x15c>
 8007d56:	2b10      	cmp	r3, #16
 8007d58:	d006      	beq.n	8007d68 <UART_SetConfig+0x168>
 8007d5a:	e00b      	b.n	8007d74 <UART_SetConfig+0x174>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	77fb      	strb	r3, [r7, #31]
 8007d60:	e0f2      	b.n	8007f48 <UART_SetConfig+0x348>
 8007d62:	2302      	movs	r3, #2
 8007d64:	77fb      	strb	r3, [r7, #31]
 8007d66:	e0ef      	b.n	8007f48 <UART_SetConfig+0x348>
 8007d68:	2304      	movs	r3, #4
 8007d6a:	77fb      	strb	r3, [r7, #31]
 8007d6c:	e0ec      	b.n	8007f48 <UART_SetConfig+0x348>
 8007d6e:	2308      	movs	r3, #8
 8007d70:	77fb      	strb	r3, [r7, #31]
 8007d72:	e0e9      	b.n	8007f48 <UART_SetConfig+0x348>
 8007d74:	2310      	movs	r3, #16
 8007d76:	77fb      	strb	r3, [r7, #31]
 8007d78:	e0e6      	b.n	8007f48 <UART_SetConfig+0x348>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a56      	ldr	r2, [pc, #344]	; (8007ed8 <UART_SetConfig+0x2d8>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d120      	bne.n	8007dc6 <UART_SetConfig+0x1c6>
 8007d84:	4b51      	ldr	r3, [pc, #324]	; (8007ecc <UART_SetConfig+0x2cc>)
 8007d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d8e:	2bc0      	cmp	r3, #192	; 0xc0
 8007d90:	d013      	beq.n	8007dba <UART_SetConfig+0x1ba>
 8007d92:	2bc0      	cmp	r3, #192	; 0xc0
 8007d94:	d814      	bhi.n	8007dc0 <UART_SetConfig+0x1c0>
 8007d96:	2b80      	cmp	r3, #128	; 0x80
 8007d98:	d009      	beq.n	8007dae <UART_SetConfig+0x1ae>
 8007d9a:	2b80      	cmp	r3, #128	; 0x80
 8007d9c:	d810      	bhi.n	8007dc0 <UART_SetConfig+0x1c0>
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <UART_SetConfig+0x1a8>
 8007da2:	2b40      	cmp	r3, #64	; 0x40
 8007da4:	d006      	beq.n	8007db4 <UART_SetConfig+0x1b4>
 8007da6:	e00b      	b.n	8007dc0 <UART_SetConfig+0x1c0>
 8007da8:	2300      	movs	r3, #0
 8007daa:	77fb      	strb	r3, [r7, #31]
 8007dac:	e0cc      	b.n	8007f48 <UART_SetConfig+0x348>
 8007dae:	2302      	movs	r3, #2
 8007db0:	77fb      	strb	r3, [r7, #31]
 8007db2:	e0c9      	b.n	8007f48 <UART_SetConfig+0x348>
 8007db4:	2304      	movs	r3, #4
 8007db6:	77fb      	strb	r3, [r7, #31]
 8007db8:	e0c6      	b.n	8007f48 <UART_SetConfig+0x348>
 8007dba:	2308      	movs	r3, #8
 8007dbc:	77fb      	strb	r3, [r7, #31]
 8007dbe:	e0c3      	b.n	8007f48 <UART_SetConfig+0x348>
 8007dc0:	2310      	movs	r3, #16
 8007dc2:	77fb      	strb	r3, [r7, #31]
 8007dc4:	e0c0      	b.n	8007f48 <UART_SetConfig+0x348>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a44      	ldr	r2, [pc, #272]	; (8007edc <UART_SetConfig+0x2dc>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d125      	bne.n	8007e1c <UART_SetConfig+0x21c>
 8007dd0:	4b3e      	ldr	r3, [pc, #248]	; (8007ecc <UART_SetConfig+0x2cc>)
 8007dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dde:	d017      	beq.n	8007e10 <UART_SetConfig+0x210>
 8007de0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007de4:	d817      	bhi.n	8007e16 <UART_SetConfig+0x216>
 8007de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dea:	d00b      	beq.n	8007e04 <UART_SetConfig+0x204>
 8007dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007df0:	d811      	bhi.n	8007e16 <UART_SetConfig+0x216>
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d003      	beq.n	8007dfe <UART_SetConfig+0x1fe>
 8007df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dfa:	d006      	beq.n	8007e0a <UART_SetConfig+0x20a>
 8007dfc:	e00b      	b.n	8007e16 <UART_SetConfig+0x216>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	77fb      	strb	r3, [r7, #31]
 8007e02:	e0a1      	b.n	8007f48 <UART_SetConfig+0x348>
 8007e04:	2302      	movs	r3, #2
 8007e06:	77fb      	strb	r3, [r7, #31]
 8007e08:	e09e      	b.n	8007f48 <UART_SetConfig+0x348>
 8007e0a:	2304      	movs	r3, #4
 8007e0c:	77fb      	strb	r3, [r7, #31]
 8007e0e:	e09b      	b.n	8007f48 <UART_SetConfig+0x348>
 8007e10:	2308      	movs	r3, #8
 8007e12:	77fb      	strb	r3, [r7, #31]
 8007e14:	e098      	b.n	8007f48 <UART_SetConfig+0x348>
 8007e16:	2310      	movs	r3, #16
 8007e18:	77fb      	strb	r3, [r7, #31]
 8007e1a:	e095      	b.n	8007f48 <UART_SetConfig+0x348>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a2f      	ldr	r2, [pc, #188]	; (8007ee0 <UART_SetConfig+0x2e0>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d125      	bne.n	8007e72 <UART_SetConfig+0x272>
 8007e26:	4b29      	ldr	r3, [pc, #164]	; (8007ecc <UART_SetConfig+0x2cc>)
 8007e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e34:	d017      	beq.n	8007e66 <UART_SetConfig+0x266>
 8007e36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e3a:	d817      	bhi.n	8007e6c <UART_SetConfig+0x26c>
 8007e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e40:	d00b      	beq.n	8007e5a <UART_SetConfig+0x25a>
 8007e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e46:	d811      	bhi.n	8007e6c <UART_SetConfig+0x26c>
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <UART_SetConfig+0x254>
 8007e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e50:	d006      	beq.n	8007e60 <UART_SetConfig+0x260>
 8007e52:	e00b      	b.n	8007e6c <UART_SetConfig+0x26c>
 8007e54:	2301      	movs	r3, #1
 8007e56:	77fb      	strb	r3, [r7, #31]
 8007e58:	e076      	b.n	8007f48 <UART_SetConfig+0x348>
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	77fb      	strb	r3, [r7, #31]
 8007e5e:	e073      	b.n	8007f48 <UART_SetConfig+0x348>
 8007e60:	2304      	movs	r3, #4
 8007e62:	77fb      	strb	r3, [r7, #31]
 8007e64:	e070      	b.n	8007f48 <UART_SetConfig+0x348>
 8007e66:	2308      	movs	r3, #8
 8007e68:	77fb      	strb	r3, [r7, #31]
 8007e6a:	e06d      	b.n	8007f48 <UART_SetConfig+0x348>
 8007e6c:	2310      	movs	r3, #16
 8007e6e:	77fb      	strb	r3, [r7, #31]
 8007e70:	e06a      	b.n	8007f48 <UART_SetConfig+0x348>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a1b      	ldr	r2, [pc, #108]	; (8007ee4 <UART_SetConfig+0x2e4>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d138      	bne.n	8007eee <UART_SetConfig+0x2ee>
 8007e7c:	4b13      	ldr	r3, [pc, #76]	; (8007ecc <UART_SetConfig+0x2cc>)
 8007e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e82:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007e86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e8a:	d017      	beq.n	8007ebc <UART_SetConfig+0x2bc>
 8007e8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e90:	d82a      	bhi.n	8007ee8 <UART_SetConfig+0x2e8>
 8007e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e96:	d00b      	beq.n	8007eb0 <UART_SetConfig+0x2b0>
 8007e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e9c:	d824      	bhi.n	8007ee8 <UART_SetConfig+0x2e8>
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <UART_SetConfig+0x2aa>
 8007ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea6:	d006      	beq.n	8007eb6 <UART_SetConfig+0x2b6>
 8007ea8:	e01e      	b.n	8007ee8 <UART_SetConfig+0x2e8>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	77fb      	strb	r3, [r7, #31]
 8007eae:	e04b      	b.n	8007f48 <UART_SetConfig+0x348>
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	77fb      	strb	r3, [r7, #31]
 8007eb4:	e048      	b.n	8007f48 <UART_SetConfig+0x348>
 8007eb6:	2304      	movs	r3, #4
 8007eb8:	77fb      	strb	r3, [r7, #31]
 8007eba:	e045      	b.n	8007f48 <UART_SetConfig+0x348>
 8007ebc:	2308      	movs	r3, #8
 8007ebe:	77fb      	strb	r3, [r7, #31]
 8007ec0:	e042      	b.n	8007f48 <UART_SetConfig+0x348>
 8007ec2:	bf00      	nop
 8007ec4:	efff69f3 	.word	0xefff69f3
 8007ec8:	40011000 	.word	0x40011000
 8007ecc:	40023800 	.word	0x40023800
 8007ed0:	40004400 	.word	0x40004400
 8007ed4:	40004800 	.word	0x40004800
 8007ed8:	40004c00 	.word	0x40004c00
 8007edc:	40005000 	.word	0x40005000
 8007ee0:	40011400 	.word	0x40011400
 8007ee4:	40007800 	.word	0x40007800
 8007ee8:	2310      	movs	r3, #16
 8007eea:	77fb      	strb	r3, [r7, #31]
 8007eec:	e02c      	b.n	8007f48 <UART_SetConfig+0x348>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a72      	ldr	r2, [pc, #456]	; (80080bc <UART_SetConfig+0x4bc>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d125      	bne.n	8007f44 <UART_SetConfig+0x344>
 8007ef8:	4b71      	ldr	r3, [pc, #452]	; (80080c0 <UART_SetConfig+0x4c0>)
 8007efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007efe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007f02:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007f06:	d017      	beq.n	8007f38 <UART_SetConfig+0x338>
 8007f08:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007f0c:	d817      	bhi.n	8007f3e <UART_SetConfig+0x33e>
 8007f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f12:	d00b      	beq.n	8007f2c <UART_SetConfig+0x32c>
 8007f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f18:	d811      	bhi.n	8007f3e <UART_SetConfig+0x33e>
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <UART_SetConfig+0x326>
 8007f1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f22:	d006      	beq.n	8007f32 <UART_SetConfig+0x332>
 8007f24:	e00b      	b.n	8007f3e <UART_SetConfig+0x33e>
 8007f26:	2300      	movs	r3, #0
 8007f28:	77fb      	strb	r3, [r7, #31]
 8007f2a:	e00d      	b.n	8007f48 <UART_SetConfig+0x348>
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	77fb      	strb	r3, [r7, #31]
 8007f30:	e00a      	b.n	8007f48 <UART_SetConfig+0x348>
 8007f32:	2304      	movs	r3, #4
 8007f34:	77fb      	strb	r3, [r7, #31]
 8007f36:	e007      	b.n	8007f48 <UART_SetConfig+0x348>
 8007f38:	2308      	movs	r3, #8
 8007f3a:	77fb      	strb	r3, [r7, #31]
 8007f3c:	e004      	b.n	8007f48 <UART_SetConfig+0x348>
 8007f3e:	2310      	movs	r3, #16
 8007f40:	77fb      	strb	r3, [r7, #31]
 8007f42:	e001      	b.n	8007f48 <UART_SetConfig+0x348>
 8007f44:	2310      	movs	r3, #16
 8007f46:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	69db      	ldr	r3, [r3, #28]
 8007f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f50:	d15b      	bne.n	800800a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007f52:	7ffb      	ldrb	r3, [r7, #31]
 8007f54:	2b08      	cmp	r3, #8
 8007f56:	d828      	bhi.n	8007faa <UART_SetConfig+0x3aa>
 8007f58:	a201      	add	r2, pc, #4	; (adr r2, 8007f60 <UART_SetConfig+0x360>)
 8007f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5e:	bf00      	nop
 8007f60:	08007f85 	.word	0x08007f85
 8007f64:	08007f8d 	.word	0x08007f8d
 8007f68:	08007f95 	.word	0x08007f95
 8007f6c:	08007fab 	.word	0x08007fab
 8007f70:	08007f9b 	.word	0x08007f9b
 8007f74:	08007fab 	.word	0x08007fab
 8007f78:	08007fab 	.word	0x08007fab
 8007f7c:	08007fab 	.word	0x08007fab
 8007f80:	08007fa3 	.word	0x08007fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f84:	f7fe f916 	bl	80061b4 <HAL_RCC_GetPCLK1Freq>
 8007f88:	61b8      	str	r0, [r7, #24]
        break;
 8007f8a:	e013      	b.n	8007fb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f8c:	f7fe f926 	bl	80061dc <HAL_RCC_GetPCLK2Freq>
 8007f90:	61b8      	str	r0, [r7, #24]
        break;
 8007f92:	e00f      	b.n	8007fb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f94:	4b4b      	ldr	r3, [pc, #300]	; (80080c4 <UART_SetConfig+0x4c4>)
 8007f96:	61bb      	str	r3, [r7, #24]
        break;
 8007f98:	e00c      	b.n	8007fb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f9a:	f7fe f839 	bl	8006010 <HAL_RCC_GetSysClockFreq>
 8007f9e:	61b8      	str	r0, [r7, #24]
        break;
 8007fa0:	e008      	b.n	8007fb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fa6:	61bb      	str	r3, [r7, #24]
        break;
 8007fa8:	e004      	b.n	8007fb4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007faa:	2300      	movs	r3, #0
 8007fac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	77bb      	strb	r3, [r7, #30]
        break;
 8007fb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d074      	beq.n	80080a4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	005a      	lsls	r2, r3, #1
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	085b      	lsrs	r3, r3, #1
 8007fc4:	441a      	add	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	2b0f      	cmp	r3, #15
 8007fd4:	d916      	bls.n	8008004 <UART_SetConfig+0x404>
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fdc:	d212      	bcs.n	8008004 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	f023 030f 	bic.w	r3, r3, #15
 8007fe6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	085b      	lsrs	r3, r3, #1
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	f003 0307 	and.w	r3, r3, #7
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	89fb      	ldrh	r3, [r7, #14]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	89fa      	ldrh	r2, [r7, #14]
 8008000:	60da      	str	r2, [r3, #12]
 8008002:	e04f      	b.n	80080a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	77bb      	strb	r3, [r7, #30]
 8008008:	e04c      	b.n	80080a4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800800a:	7ffb      	ldrb	r3, [r7, #31]
 800800c:	2b08      	cmp	r3, #8
 800800e:	d828      	bhi.n	8008062 <UART_SetConfig+0x462>
 8008010:	a201      	add	r2, pc, #4	; (adr r2, 8008018 <UART_SetConfig+0x418>)
 8008012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008016:	bf00      	nop
 8008018:	0800803d 	.word	0x0800803d
 800801c:	08008045 	.word	0x08008045
 8008020:	0800804d 	.word	0x0800804d
 8008024:	08008063 	.word	0x08008063
 8008028:	08008053 	.word	0x08008053
 800802c:	08008063 	.word	0x08008063
 8008030:	08008063 	.word	0x08008063
 8008034:	08008063 	.word	0x08008063
 8008038:	0800805b 	.word	0x0800805b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800803c:	f7fe f8ba 	bl	80061b4 <HAL_RCC_GetPCLK1Freq>
 8008040:	61b8      	str	r0, [r7, #24]
        break;
 8008042:	e013      	b.n	800806c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008044:	f7fe f8ca 	bl	80061dc <HAL_RCC_GetPCLK2Freq>
 8008048:	61b8      	str	r0, [r7, #24]
        break;
 800804a:	e00f      	b.n	800806c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800804c:	4b1d      	ldr	r3, [pc, #116]	; (80080c4 <UART_SetConfig+0x4c4>)
 800804e:	61bb      	str	r3, [r7, #24]
        break;
 8008050:	e00c      	b.n	800806c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008052:	f7fd ffdd 	bl	8006010 <HAL_RCC_GetSysClockFreq>
 8008056:	61b8      	str	r0, [r7, #24]
        break;
 8008058:	e008      	b.n	800806c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800805a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800805e:	61bb      	str	r3, [r7, #24]
        break;
 8008060:	e004      	b.n	800806c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008062:	2300      	movs	r3, #0
 8008064:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	77bb      	strb	r3, [r7, #30]
        break;
 800806a:	bf00      	nop
    }

    if (pclk != 0U)
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d018      	beq.n	80080a4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	085a      	lsrs	r2, r3, #1
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	441a      	add	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	fbb2 f3f3 	udiv	r3, r2, r3
 8008084:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	2b0f      	cmp	r3, #15
 800808a:	d909      	bls.n	80080a0 <UART_SetConfig+0x4a0>
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008092:	d205      	bcs.n	80080a0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	b29a      	uxth	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	60da      	str	r2, [r3, #12]
 800809e:	e001      	b.n	80080a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80080b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3720      	adds	r7, #32
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	40007c00 	.word	0x40007c00
 80080c0:	40023800 	.word	0x40023800
 80080c4:	00f42400 	.word	0x00f42400

080080c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00a      	beq.n	80080f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00a      	beq.n	8008114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	430a      	orrs	r2, r1
 8008112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	f003 0304 	and.w	r3, r3, #4
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00a      	beq.n	8008136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	430a      	orrs	r2, r1
 8008134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813a:	f003 0308 	and.w	r3, r3, #8
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00a      	beq.n	8008158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	430a      	orrs	r2, r1
 8008156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815c:	f003 0310 	and.w	r3, r3, #16
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00a      	beq.n	800817a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	430a      	orrs	r2, r1
 8008178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817e:	f003 0320 	and.w	r3, r3, #32
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00a      	beq.n	800819c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	430a      	orrs	r2, r1
 800819a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d01a      	beq.n	80081de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	430a      	orrs	r2, r1
 80081bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081c6:	d10a      	bne.n	80081de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00a      	beq.n	8008200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	430a      	orrs	r2, r1
 80081fe:	605a      	str	r2, [r3, #4]
  }
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af02      	add	r7, sp, #8
 8008212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800821c:	f7fb fa4a 	bl	80036b4 <HAL_GetTick>
 8008220:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0308 	and.w	r3, r3, #8
 800822c:	2b08      	cmp	r3, #8
 800822e:	d10e      	bne.n	800824e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f81b 	bl	800827a <UART_WaitOnFlagUntilTimeout>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e011      	b.n	8008272 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2220      	movs	r2, #32
 8008252:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2220      	movs	r2, #32
 8008258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b09c      	sub	sp, #112	; 0x70
 800827e:	af00      	add	r7, sp, #0
 8008280:	60f8      	str	r0, [r7, #12]
 8008282:	60b9      	str	r1, [r7, #8]
 8008284:	603b      	str	r3, [r7, #0]
 8008286:	4613      	mov	r3, r2
 8008288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800828a:	e0a7      	b.n	80083dc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800828c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800828e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008292:	f000 80a3 	beq.w	80083dc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008296:	f7fb fa0d 	bl	80036b4 <HAL_GetTick>
 800829a:	4602      	mov	r2, r0
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d302      	bcc.n	80082ac <UART_WaitOnFlagUntilTimeout+0x32>
 80082a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d13f      	bne.n	800832c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082b4:	e853 3f00 	ldrex	r3, [r3]
 80082b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80082ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082c0:	667b      	str	r3, [r7, #100]	; 0x64
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	461a      	mov	r2, r3
 80082c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082d2:	e841 2300 	strex	r3, r2, [r1]
 80082d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80082d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1e6      	bne.n	80082ac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3308      	adds	r3, #8
 80082e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082e8:	e853 3f00 	ldrex	r3, [r3]
 80082ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f0:	f023 0301 	bic.w	r3, r3, #1
 80082f4:	663b      	str	r3, [r7, #96]	; 0x60
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3308      	adds	r3, #8
 80082fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8008300:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008302:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008304:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008306:	e841 2300 	strex	r3, r2, [r1]
 800830a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800830c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1e5      	bne.n	80082de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2220      	movs	r2, #32
 8008316:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2220      	movs	r2, #32
 800831c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008328:	2303      	movs	r3, #3
 800832a:	e068      	b.n	80083fe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 0304 	and.w	r3, r3, #4
 8008336:	2b00      	cmp	r3, #0
 8008338:	d050      	beq.n	80083dc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	69db      	ldr	r3, [r3, #28]
 8008340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008348:	d148      	bne.n	80083dc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008352:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835c:	e853 3f00 	ldrex	r3, [r3]
 8008360:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008364:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008368:	66fb      	str	r3, [r7, #108]	; 0x6c
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	461a      	mov	r2, r3
 8008370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008372:	637b      	str	r3, [r7, #52]	; 0x34
 8008374:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008376:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800837a:	e841 2300 	strex	r3, r2, [r1]
 800837e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1e6      	bne.n	8008354 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	3308      	adds	r3, #8
 800838c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	e853 3f00 	ldrex	r3, [r3]
 8008394:	613b      	str	r3, [r7, #16]
   return(result);
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	f023 0301 	bic.w	r3, r3, #1
 800839c:	66bb      	str	r3, [r7, #104]	; 0x68
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	3308      	adds	r3, #8
 80083a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80083a6:	623a      	str	r2, [r7, #32]
 80083a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083aa:	69f9      	ldr	r1, [r7, #28]
 80083ac:	6a3a      	ldr	r2, [r7, #32]
 80083ae:	e841 2300 	strex	r3, r2, [r1]
 80083b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1e5      	bne.n	8008386 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2220      	movs	r2, #32
 80083be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2220      	movs	r2, #32
 80083c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2220      	movs	r2, #32
 80083cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e010      	b.n	80083fe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	69da      	ldr	r2, [r3, #28]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	4013      	ands	r3, r2
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	bf0c      	ite	eq
 80083ec:	2301      	moveq	r3, #1
 80083ee:	2300      	movne	r3, #0
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	461a      	mov	r2, r3
 80083f4:	79fb      	ldrb	r3, [r7, #7]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	f43f af48 	beq.w	800828c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3770      	adds	r7, #112	; 0x70
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
	...

08008408 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d121      	bne.n	800845e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	4b27      	ldr	r3, [pc, #156]	; (80084bc <FMC_SDRAM_Init+0xb4>)
 8008420:	4013      	ands	r3, r2
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	6851      	ldr	r1, [r2, #4]
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	6892      	ldr	r2, [r2, #8]
 800842a:	4311      	orrs	r1, r2
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	68d2      	ldr	r2, [r2, #12]
 8008430:	4311      	orrs	r1, r2
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	6912      	ldr	r2, [r2, #16]
 8008436:	4311      	orrs	r1, r2
 8008438:	683a      	ldr	r2, [r7, #0]
 800843a:	6952      	ldr	r2, [r2, #20]
 800843c:	4311      	orrs	r1, r2
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	6992      	ldr	r2, [r2, #24]
 8008442:	4311      	orrs	r1, r2
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	69d2      	ldr	r2, [r2, #28]
 8008448:	4311      	orrs	r1, r2
 800844a:	683a      	ldr	r2, [r7, #0]
 800844c:	6a12      	ldr	r2, [r2, #32]
 800844e:	4311      	orrs	r1, r2
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008454:	430a      	orrs	r2, r1
 8008456:	431a      	orrs	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	e026      	b.n	80084ac <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	69d9      	ldr	r1, [r3, #28]
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	4319      	orrs	r1, r3
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008474:	430b      	orrs	r3, r1
 8008476:	431a      	orrs	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	4b0e      	ldr	r3, [pc, #56]	; (80084bc <FMC_SDRAM_Init+0xb4>)
 8008482:	4013      	ands	r3, r2
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	6851      	ldr	r1, [r2, #4]
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	6892      	ldr	r2, [r2, #8]
 800848c:	4311      	orrs	r1, r2
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	68d2      	ldr	r2, [r2, #12]
 8008492:	4311      	orrs	r1, r2
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	6912      	ldr	r2, [r2, #16]
 8008498:	4311      	orrs	r1, r2
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	6952      	ldr	r2, [r2, #20]
 800849e:	4311      	orrs	r1, r2
 80084a0:	683a      	ldr	r2, [r7, #0]
 80084a2:	6992      	ldr	r2, [r2, #24]
 80084a4:	430a      	orrs	r2, r1
 80084a6:	431a      	orrs	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	ffff8000 	.word	0xffff8000

080084c0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d128      	bne.n	8008524 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	1e59      	subs	r1, r3, #1
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	3b01      	subs	r3, #1
 80084e6:	011b      	lsls	r3, r3, #4
 80084e8:	4319      	orrs	r1, r3
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	3b01      	subs	r3, #1
 80084f0:	021b      	lsls	r3, r3, #8
 80084f2:	4319      	orrs	r1, r3
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	3b01      	subs	r3, #1
 80084fa:	031b      	lsls	r3, r3, #12
 80084fc:	4319      	orrs	r1, r3
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	3b01      	subs	r3, #1
 8008504:	041b      	lsls	r3, r3, #16
 8008506:	4319      	orrs	r1, r3
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	695b      	ldr	r3, [r3, #20]
 800850c:	3b01      	subs	r3, #1
 800850e:	051b      	lsls	r3, r3, #20
 8008510:	4319      	orrs	r1, r3
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	3b01      	subs	r3, #1
 8008518:	061b      	lsls	r3, r3, #24
 800851a:	430b      	orrs	r3, r1
 800851c:	431a      	orrs	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	609a      	str	r2, [r3, #8]
 8008522:	e02d      	b.n	8008580 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	4b19      	ldr	r3, [pc, #100]	; (8008590 <FMC_SDRAM_Timing_Init+0xd0>)
 800852a:	4013      	ands	r3, r2
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	68d2      	ldr	r2, [r2, #12]
 8008530:	3a01      	subs	r2, #1
 8008532:	0311      	lsls	r1, r2, #12
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	6952      	ldr	r2, [r2, #20]
 8008538:	3a01      	subs	r2, #1
 800853a:	0512      	lsls	r2, r2, #20
 800853c:	430a      	orrs	r2, r1
 800853e:	431a      	orrs	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	1e59      	subs	r1, r3, #1
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	3b01      	subs	r3, #1
 8008558:	011b      	lsls	r3, r3, #4
 800855a:	4319      	orrs	r1, r3
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	3b01      	subs	r3, #1
 8008562:	021b      	lsls	r3, r3, #8
 8008564:	4319      	orrs	r1, r3
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	3b01      	subs	r3, #1
 800856c:	041b      	lsls	r3, r3, #16
 800856e:	4319      	orrs	r1, r3
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	3b01      	subs	r3, #1
 8008576:	061b      	lsls	r3, r3, #24
 8008578:	430b      	orrs	r3, r1
 800857a:	431a      	orrs	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3714      	adds	r7, #20
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	ff0f0fff 	.word	0xff0f0fff

08008594 <memset>:
 8008594:	4402      	add	r2, r0
 8008596:	4603      	mov	r3, r0
 8008598:	4293      	cmp	r3, r2
 800859a:	d100      	bne.n	800859e <memset+0xa>
 800859c:	4770      	bx	lr
 800859e:	f803 1b01 	strb.w	r1, [r3], #1
 80085a2:	e7f9      	b.n	8008598 <memset+0x4>

080085a4 <__libc_init_array>:
 80085a4:	b570      	push	{r4, r5, r6, lr}
 80085a6:	4d0d      	ldr	r5, [pc, #52]	; (80085dc <__libc_init_array+0x38>)
 80085a8:	4c0d      	ldr	r4, [pc, #52]	; (80085e0 <__libc_init_array+0x3c>)
 80085aa:	1b64      	subs	r4, r4, r5
 80085ac:	10a4      	asrs	r4, r4, #2
 80085ae:	2600      	movs	r6, #0
 80085b0:	42a6      	cmp	r6, r4
 80085b2:	d109      	bne.n	80085c8 <__libc_init_array+0x24>
 80085b4:	4d0b      	ldr	r5, [pc, #44]	; (80085e4 <__libc_init_array+0x40>)
 80085b6:	4c0c      	ldr	r4, [pc, #48]	; (80085e8 <__libc_init_array+0x44>)
 80085b8:	f000 f818 	bl	80085ec <_init>
 80085bc:	1b64      	subs	r4, r4, r5
 80085be:	10a4      	asrs	r4, r4, #2
 80085c0:	2600      	movs	r6, #0
 80085c2:	42a6      	cmp	r6, r4
 80085c4:	d105      	bne.n	80085d2 <__libc_init_array+0x2e>
 80085c6:	bd70      	pop	{r4, r5, r6, pc}
 80085c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80085cc:	4798      	blx	r3
 80085ce:	3601      	adds	r6, #1
 80085d0:	e7ee      	b.n	80085b0 <__libc_init_array+0xc>
 80085d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80085d6:	4798      	blx	r3
 80085d8:	3601      	adds	r6, #1
 80085da:	e7f2      	b.n	80085c2 <__libc_init_array+0x1e>
 80085dc:	0800862c 	.word	0x0800862c
 80085e0:	0800862c 	.word	0x0800862c
 80085e4:	0800862c 	.word	0x0800862c
 80085e8:	08008630 	.word	0x08008630

080085ec <_init>:
 80085ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ee:	bf00      	nop
 80085f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085f2:	bc08      	pop	{r3}
 80085f4:	469e      	mov	lr, r3
 80085f6:	4770      	bx	lr

080085f8 <_fini>:
 80085f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fa:	bf00      	nop
 80085fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fe:	bc08      	pop	{r3}
 8008600:	469e      	mov	lr, r3
 8008602:	4770      	bx	lr
