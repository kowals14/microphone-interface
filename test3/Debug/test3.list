
test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005398  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005560  08005560  00015560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005578  08005578  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08005578  08005578  00015578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005580  08005580  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005580  08005580  00015580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005584  08005584  00015584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08005594  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08005634  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000800  2000014c  080056d4  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000094c  080056d4  0002094c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 15 .debug_info   00015809  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002822  00000000  00000000  000359c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001108  00000000  00000000  000381f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000d50  00000000  00000000  000392f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00027248  00000000  00000000  0003a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000152fb  00000000  00000000  00061290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f21ba  00000000  00000000  0007658b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000048b0  00000000  00000000  00168748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  0016cff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000014c 	.word	0x2000014c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005548 	.word	0x08005548

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000150 	.word	0x20000150
 8000204:	08005548 	.word	0x08005548

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fdf8 	bl	80010fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f857 	bl	80005c0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000512:	f000 f8bd 	bl	8000690 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fa27 	bl	8000968 <MX_GPIO_Init>
  MX_ETH_Init();
 800051a:	f000 f8e1 	bl	80006e0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800051e:	f000 f9c5 	bl	80008ac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000522:	f000 f9f3 	bl	800090c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000526:	f000 f929 	bl	800077c <MX_I2C2_Init>
  MX_SAI1_Init();
 800052a:	f000 f967 	bl	80007fc <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */
  WM8731I2CCommand(WM8731_REG_RESET, _WM8731_Reset);
 800052e:	230f      	movs	r3, #15
 8000530:	2200      	movs	r2, #0
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f000 fad1 	bl	8000adc <WM8731I2CCommand>
  WM8731I2CCommand(WM8731_REG_LHPHONE_OUT, _WM8731_Left_hp);
 800053a:	2302      	movs	r3, #2
 800053c:	22fd      	movs	r2, #253	; 0xfd
 800053e:	4611      	mov	r1, r2
 8000540:	4618      	mov	r0, r3
 8000542:	f000 facb 	bl	8000adc <WM8731I2CCommand>
  WM8731I2CCommand(WM8731_REG_RHPHONE_OUT, _WM8731_Right_hp);
 8000546:	2303      	movs	r3, #3
 8000548:	22fd      	movs	r2, #253	; 0xfd
 800054a:	4611      	mov	r1, r2
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fac5 	bl	8000adc <WM8731I2CCommand>
  WM8731I2CCommand(WM8731_REG_ANALOG_PATH, _WM8731_AnalogAudio);
 8000552:	2304      	movs	r3, #4
 8000554:	2215      	movs	r2, #21
 8000556:	4611      	mov	r1, r2
 8000558:	4618      	mov	r0, r3
 800055a:	f000 fabf 	bl	8000adc <WM8731I2CCommand>
  WM8731I2CCommand(WM8731_REG_DIGITAL_PATH, _WM8731_DigitalAudio);
 800055e:	2305      	movs	r3, #5
 8000560:	2207      	movs	r2, #7
 8000562:	4611      	mov	r1, r2
 8000564:	4618      	mov	r0, r3
 8000566:	f000 fab9 	bl	8000adc <WM8731I2CCommand>
  WM8731I2CCommand(WM8731_REG_PDOWN_CTRL, _WM8731_power);
 800056a:	2306      	movs	r3, #6
 800056c:	2201      	movs	r2, #1
 800056e:	4611      	mov	r1, r2
 8000570:	4618      	mov	r0, r3
 8000572:	f000 fab3 	bl	8000adc <WM8731I2CCommand>
  WM8731I2CCommand(WM8731_REG_DIGITAL_IF, _WM8731_DAIF);
 8000576:	2307      	movs	r3, #7
 8000578:	2242      	movs	r2, #66	; 0x42
 800057a:	4611      	mov	r1, r2
 800057c:	4618      	mov	r0, r3
 800057e:	f000 faad 	bl	8000adc <WM8731I2CCommand>
  //WM8731I2CCommand(WM8731_REG_SAMPLING_CTRL, _WM8731_Sampling);
  WM8731I2CCommand(WM8731_REG_ACTIVE_CTRL, _WM8731_Activate);
 8000582:	2309      	movs	r3, #9
 8000584:	2201      	movs	r2, #1
 8000586:	4611      	mov	r1, r2
 8000588:	4618      	mov	r0, r3
 800058a:	f000 faa7 	bl	8000adc <WM8731I2CCommand>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_SAI_Receive(&hsai_BlockA1, (uint8_t *) audio_in, 2, 1000);
 800058e:	1d39      	adds	r1, r7, #4
 8000590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000594:	2202      	movs	r2, #2
 8000596:	4808      	ldr	r0, [pc, #32]	; (80005b8 <main+0xb4>)
 8000598:	f003 fde4 	bl	8004164 <HAL_SAI_Receive>

	//if (audio_in[0])
	audio_out[0] = audio_in[0];
 800059c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005a0:	803b      	strh	r3, [r7, #0]
	audio_out[1] = audio_in[1];
 80005a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005a6:	807b      	strh	r3, [r7, #2]
	//temp = 0;
	//if (audio_in[0] > 5000) temp = 500;
	//audio_out[0] = temp;
	//audio_out[1] = temp;

	HAL_SAI_Transmit(&hsai_BlockB1, (uint8_t *) audio_out, 2, 1000);
 80005a8:	4639      	mov	r1, r7
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	2202      	movs	r2, #2
 80005b0:	4802      	ldr	r0, [pc, #8]	; (80005bc <main+0xb8>)
 80005b2:	f003 fd09 	bl	8003fc8 <HAL_SAI_Transmit>
	HAL_SAI_Receive(&hsai_BlockA1, (uint8_t *) audio_in, 2, 1000);
 80005b6:	e7ea      	b.n	800058e <main+0x8a>
 80005b8:	200002a4 	.word	0x200002a4
 80005bc:	20000328 	.word	0x20000328

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f004 ff8e 	bl	80054f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005e4:	f002 f934 	bl	8002850 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	4b27      	ldr	r3, [pc, #156]	; (8000688 <SystemClock_Config+0xc8>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a26      	ldr	r2, [pc, #152]	; (8000688 <SystemClock_Config+0xc8>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b24      	ldr	r3, [pc, #144]	; (8000688 <SystemClock_Config+0xc8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <SystemClock_Config+0xcc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000608:	4a20      	ldr	r2, [pc, #128]	; (800068c <SystemClock_Config+0xcc>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <SystemClock_Config+0xcc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000620:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000630:	2304      	movs	r3, #4
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000634:	2348      	movs	r3, #72	; 0x48
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800063c:	2303      	movs	r3, #3
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f002 f913 	bl	8002870 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000650:	f000 fa70 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2102      	movs	r1, #2
 8000670:	4618      	mov	r0, r3
 8000672:	f002 fba1 	bl	8002db8 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800067c:	f000 fa5a 	bl	8000b34 <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3750      	adds	r7, #80	; 0x50
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b0a2      	sub	sp, #136	; 0x88
 8000694:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2284      	movs	r2, #132	; 0x84
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f004 ff27 	bl	80054f0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_CLK48;
 80006a2:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80006a6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 196;
 80006a8:	23c4      	movs	r3, #196	; 0xc4
 80006aa:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80006b4:	2300      	movs	r3, #0
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80006bc:	2300      	movs	r3, #0
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fd9c 	bl	8003204 <HAL_RCCEx_PeriphCLKConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <PeriphCommonClock_Config+0x46>
  {
    Error_Handler();
 80006d2:	f000 fa2f 	bl	8000b34 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3788      	adds	r7, #136	; 0x88
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <MX_ETH_Init+0x84>)
 80006e6:	4a20      	ldr	r2, [pc, #128]	; (8000768 <MX_ETH_Init+0x88>)
 80006e8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006ea:	4b20      	ldr	r3, [pc, #128]	; (800076c <MX_ETH_Init+0x8c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <MX_ETH_Init+0x8c>)
 80006f2:	2280      	movs	r2, #128	; 0x80
 80006f4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <MX_ETH_Init+0x8c>)
 80006f8:	22e1      	movs	r2, #225	; 0xe1
 80006fa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_ETH_Init+0x8c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000702:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_ETH_Init+0x8c>)
 8000704:	2200      	movs	r2, #0
 8000706:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_ETH_Init+0x8c>)
 800070a:	2200      	movs	r2, #0
 800070c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_ETH_Init+0x84>)
 8000710:	4a16      	ldr	r2, [pc, #88]	; (800076c <MX_ETH_Init+0x8c>)
 8000712:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_ETH_Init+0x84>)
 8000716:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800071a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_ETH_Init+0x84>)
 800071e:	4a14      	ldr	r2, [pc, #80]	; (8000770 <MX_ETH_Init+0x90>)
 8000720:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_ETH_Init+0x84>)
 8000724:	4a13      	ldr	r2, [pc, #76]	; (8000774 <MX_ETH_Init+0x94>)
 8000726:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000728:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_ETH_Init+0x84>)
 800072a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800072e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000730:	480c      	ldr	r0, [pc, #48]	; (8000764 <MX_ETH_Init+0x84>)
 8000732:	f000 fe4b 	bl	80013cc <HAL_ETH_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800073c:	f000 f9fa 	bl	8000b34 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000740:	2238      	movs	r2, #56	; 0x38
 8000742:	2100      	movs	r1, #0
 8000744:	480c      	ldr	r0, [pc, #48]	; (8000778 <MX_ETH_Init+0x98>)
 8000746:	f004 fed3 	bl	80054f0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_ETH_Init+0x98>)
 800074c:	2221      	movs	r2, #33	; 0x21
 800074e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_ETH_Init+0x98>)
 8000752:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000756:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MX_ETH_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200001a0 	.word	0x200001a0
 8000768:	40028000 	.word	0x40028000
 800076c:	2000093c 	.word	0x2000093c
 8000770:	200000ac 	.word	0x200000ac
 8000774:	2000000c 	.word	0x2000000c
 8000778:	20000168 	.word	0x20000168

0800077c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <MX_I2C2_Init+0x74>)
 8000782:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <MX_I2C2_Init+0x78>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_I2C2_Init+0x74>)
 8000788:	4a1b      	ldr	r2, [pc, #108]	; (80007f8 <MX_I2C2_Init+0x7c>)
 800078a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800078c:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <MX_I2C2_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_I2C2_Init+0x74>)
 8000794:	2201      	movs	r2, #1
 8000796:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <MX_I2C2_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_I2C2_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_I2C2_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_I2C2_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_I2C2_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007b6:	480e      	ldr	r0, [pc, #56]	; (80007f0 <MX_I2C2_Init+0x74>)
 80007b8:	f001 faf4 	bl	8001da4 <HAL_I2C_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007c2:	f000 f9b7 	bl	8000b34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c6:	2100      	movs	r1, #0
 80007c8:	4809      	ldr	r0, [pc, #36]	; (80007f0 <MX_I2C2_Init+0x74>)
 80007ca:	f001 fe61 	bl	8002490 <HAL_I2CEx_ConfigAnalogFilter>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007d4:	f000 f9ae 	bl	8000b34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007d8:	2100      	movs	r1, #0
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_I2C2_Init+0x74>)
 80007dc:	f001 fea3 	bl	8002526 <HAL_I2CEx_ConfigDigitalFilter>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007e6:	f000 f9a5 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000250 	.word	0x20000250
 80007f4:	40005800 	.word	0x40005800
 80007f8:	00808cd2 	.word	0x00808cd2

080007fc <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000800:	4b26      	ldr	r3, [pc, #152]	; (800089c <MX_SAI1_Init+0xa0>)
 8000802:	4a27      	ldr	r2, [pc, #156]	; (80008a0 <MX_SAI1_Init+0xa4>)
 8000804:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000806:	4b25      	ldr	r3, [pc, #148]	; (800089c <MX_SAI1_Init+0xa0>)
 8000808:	2203      	movs	r2, #3
 800080a:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800080c:	4b23      	ldr	r3, [pc, #140]	; (800089c <MX_SAI1_Init+0xa0>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000812:	4b22      	ldr	r3, [pc, #136]	; (800089c <MX_SAI1_Init+0xa0>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000818:	4b20      	ldr	r3, [pc, #128]	; (800089c <MX_SAI1_Init+0xa0>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800081e:	4b1f      	ldr	r3, [pc, #124]	; (800089c <MX_SAI1_Init+0xa0>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000824:	4b1d      	ldr	r3, [pc, #116]	; (800089c <MX_SAI1_Init+0xa0>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <MX_SAI1_Init+0xa0>)
 800082c:	2200      	movs	r2, #0
 800082e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_SAI1_Init+0xa0>)
 8000832:	2200      	movs	r2, #0
 8000834:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000836:	2302      	movs	r3, #2
 8000838:	2200      	movs	r2, #0
 800083a:	2100      	movs	r1, #0
 800083c:	4817      	ldr	r0, [pc, #92]	; (800089c <MX_SAI1_Init+0xa0>)
 800083e:	f003 fa11 	bl	8003c64 <HAL_SAI_InitProtocol>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_SAI1_Init+0x50>
  {
    Error_Handler();
 8000848:	f000 f974 	bl	8000b34 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_SAI1_Init+0xa8>)
 800084e:	4a16      	ldr	r2, [pc, #88]	; (80008a8 <MX_SAI1_Init+0xac>)
 8000850:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_SAI1_Init+0xa8>)
 8000854:	2202      	movs	r2, #2
 8000856:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_SAI1_Init+0xa8>)
 800085a:	2201      	movs	r2, #1
 800085c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_SAI1_Init+0xa8>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_SAI1_Init+0xa8>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_SAI1_Init+0xa8>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_SAI1_Init+0xa8>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_SAI1_Init+0xa8>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_SAI1_Init+0xa8>)
 800087e:	2200      	movs	r2, #0
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000882:	2302      	movs	r3, #2
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	4806      	ldr	r0, [pc, #24]	; (80008a4 <MX_SAI1_Init+0xa8>)
 800088a:	f003 f9eb 	bl	8003c64 <HAL_SAI_InitProtocol>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_SAI1_Init+0x9c>
  {
    Error_Handler();
 8000894:	f000 f94e 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200002a4 	.word	0x200002a4
 80008a0:	40015804 	.word	0x40015804
 80008a4:	20000328 	.word	0x20000328
 80008a8:	40015824 	.word	0x40015824

080008ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008b2:	4a15      	ldr	r2, [pc, #84]	; (8000908 <MX_USART3_UART_Init+0x5c>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008f0:	f003 feb8 	bl	8004664 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008fa:	f000 f91b 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200003ac 	.word	0x200003ac
 8000908:	40004800 	.word	0x40004800

0800090c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000912:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000916:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091a:	2206      	movs	r2, #6
 800091c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000920:	2202      	movs	r2, #2
 8000922:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092c:	2202      	movs	r2, #2
 800092e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000932:	2201      	movs	r2, #1
 8000934:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000944:	2201      	movs	r2, #1
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000950:	f001 fe35 	bl	80025be <HAL_PCD_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800095a:	f000 f8eb 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000434 	.word	0x20000434

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08e      	sub	sp, #56	; 0x38
 800096c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800097e:	4b53      	ldr	r3, [pc, #332]	; (8000acc <MX_GPIO_Init+0x164>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a52      	ldr	r2, [pc, #328]	; (8000acc <MX_GPIO_Init+0x164>)
 8000984:	f043 0310 	orr.w	r3, r3, #16
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b50      	ldr	r3, [pc, #320]	; (8000acc <MX_GPIO_Init+0x164>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0310 	and.w	r3, r3, #16
 8000992:	623b      	str	r3, [r7, #32]
 8000994:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	4b4d      	ldr	r3, [pc, #308]	; (8000acc <MX_GPIO_Init+0x164>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a4c      	ldr	r2, [pc, #304]	; (8000acc <MX_GPIO_Init+0x164>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b4a      	ldr	r3, [pc, #296]	; (8000acc <MX_GPIO_Init+0x164>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	61fb      	str	r3, [r7, #28]
 80009ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ae:	4b47      	ldr	r3, [pc, #284]	; (8000acc <MX_GPIO_Init+0x164>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a46      	ldr	r2, [pc, #280]	; (8000acc <MX_GPIO_Init+0x164>)
 80009b4:	f043 0320 	orr.w	r3, r3, #32
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b44      	ldr	r3, [pc, #272]	; (8000acc <MX_GPIO_Init+0x164>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0320 	and.w	r3, r3, #32
 80009c2:	61bb      	str	r3, [r7, #24]
 80009c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c6:	4b41      	ldr	r3, [pc, #260]	; (8000acc <MX_GPIO_Init+0x164>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a40      	ldr	r2, [pc, #256]	; (8000acc <MX_GPIO_Init+0x164>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b3e      	ldr	r3, [pc, #248]	; (8000acc <MX_GPIO_Init+0x164>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b3b      	ldr	r3, [pc, #236]	; (8000acc <MX_GPIO_Init+0x164>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a3a      	ldr	r2, [pc, #232]	; (8000acc <MX_GPIO_Init+0x164>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b38      	ldr	r3, [pc, #224]	; (8000acc <MX_GPIO_Init+0x164>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	4b35      	ldr	r3, [pc, #212]	; (8000acc <MX_GPIO_Init+0x164>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a34      	ldr	r2, [pc, #208]	; (8000acc <MX_GPIO_Init+0x164>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b32      	ldr	r3, [pc, #200]	; (8000acc <MX_GPIO_Init+0x164>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0e:	4b2f      	ldr	r3, [pc, #188]	; (8000acc <MX_GPIO_Init+0x164>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a2e      	ldr	r2, [pc, #184]	; (8000acc <MX_GPIO_Init+0x164>)
 8000a14:	f043 0308 	orr.w	r3, r3, #8
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b2c      	ldr	r3, [pc, #176]	; (8000acc <MX_GPIO_Init+0x164>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0308 	and.w	r3, r3, #8
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a26:	4b29      	ldr	r3, [pc, #164]	; (8000acc <MX_GPIO_Init+0x164>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a28      	ldr	r2, [pc, #160]	; (8000acc <MX_GPIO_Init+0x164>)
 8000a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b26      	ldr	r3, [pc, #152]	; (8000acc <MX_GPIO_Init+0x164>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a44:	4822      	ldr	r0, [pc, #136]	; (8000ad0 <MX_GPIO_Init+0x168>)
 8000a46:	f001 f993 	bl	8001d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2140      	movs	r1, #64	; 0x40
 8000a4e:	4821      	ldr	r0, [pc, #132]	; (8000ad4 <MX_GPIO_Init+0x16c>)
 8000a50:	f001 f98e 	bl	8001d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a5a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	481b      	ldr	r0, [pc, #108]	; (8000ad8 <MX_GPIO_Init+0x170>)
 8000a6c:	f000 ffd4 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a70:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	4619      	mov	r1, r3
 8000a88:	4811      	ldr	r0, [pc, #68]	; (8000ad0 <MX_GPIO_Init+0x168>)
 8000a8a:	f000 ffc5 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a8e:	2340      	movs	r3, #64	; 0x40
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <MX_GPIO_Init+0x16c>)
 8000aa6:	f000 ffb7 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aaa:	2380      	movs	r3, #128	; 0x80
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_GPIO_Init+0x16c>)
 8000abe:	f000 ffab 	bl	8001a18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3738      	adds	r7, #56	; 0x38
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40021800 	.word	0x40021800
 8000ad8:	40020800 	.word	0x40020800

08000adc <WM8731I2CCommand>:

/* USER CODE BEGIN 4 */
void WM8731I2CCommand(uint8_t reg, uint16_t cmd) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af02      	add	r7, sp, #8
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	460a      	mov	r2, r1
 8000ae6:	71fb      	strb	r3, [r7, #7]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	80bb      	strh	r3, [r7, #4]
  //addresses are 7 bits, but 8 bits are transmitted each time in I2C, so shift address left. LSB should be MSB of register value
  uint8_t buff[2];
  buff[0] = (reg << 1) | (cmd >> 8);
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	b25a      	sxtb	r2, r3
 8000af2:	88bb      	ldrh	r3, [r7, #4]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	b25b      	sxtb	r3, r3
 8000afa:	4313      	orrs	r3, r2
 8000afc:	b25b      	sxtb	r3, r3
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	733b      	strb	r3, [r7, #12]
  buff[1] = (uint8_t) cmd;
 8000b02:	88bb      	ldrh	r3, [r7, #4]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	737b      	strb	r3, [r7, #13]

  if (HAL_I2C_Master_Transmit(&hi2c2, WM8731_ADDRESS, buff, 2, HAL_MAX_DELAY) != HAL_OK) {
 8000b08:	2334      	movs	r3, #52	; 0x34
 8000b0a:	b299      	uxth	r1, r3
 8000b0c:	f107 020c 	add.w	r2, r7, #12
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	2302      	movs	r3, #2
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <WM8731I2CCommand+0x54>)
 8000b1a:	f001 f9d3 	bl	8001ec4 <HAL_I2C_Master_Transmit>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <WM8731I2CCommand+0x4c>
	  Error_Handler();
 8000b24:	f000 f806 	bl	8000b34 <Error_Handler>
  }
}
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000250 	.word	0x20000250

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <Error_Handler+0x8>
	...

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <HAL_MspInit+0x44>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <HAL_MspInit+0x44>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <HAL_MspInit+0x44>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_MspInit+0x44>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_MspInit+0x44>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_MspInit+0x44>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800

08000b88 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08e      	sub	sp, #56	; 0x38
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a4e      	ldr	r2, [pc, #312]	; (8000ce0 <HAL_ETH_MspInit+0x158>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	f040 8096 	bne.w	8000cd8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000bac:	4b4d      	ldr	r3, [pc, #308]	; (8000ce4 <HAL_ETH_MspInit+0x15c>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	4a4c      	ldr	r2, [pc, #304]	; (8000ce4 <HAL_ETH_MspInit+0x15c>)
 8000bb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb8:	4b4a      	ldr	r3, [pc, #296]	; (8000ce4 <HAL_ETH_MspInit+0x15c>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bc0:	623b      	str	r3, [r7, #32]
 8000bc2:	6a3b      	ldr	r3, [r7, #32]
 8000bc4:	4b47      	ldr	r3, [pc, #284]	; (8000ce4 <HAL_ETH_MspInit+0x15c>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	4a46      	ldr	r2, [pc, #280]	; (8000ce4 <HAL_ETH_MspInit+0x15c>)
 8000bca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bce:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd0:	4b44      	ldr	r3, [pc, #272]	; (8000ce4 <HAL_ETH_MspInit+0x15c>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bd8:	61fb      	str	r3, [r7, #28]
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	4b41      	ldr	r3, [pc, #260]	; (8000ce4 <HAL_ETH_MspInit+0x15c>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	4a40      	ldr	r2, [pc, #256]	; (8000ce4 <HAL_ETH_MspInit+0x15c>)
 8000be2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000be6:	6313      	str	r3, [r2, #48]	; 0x30
 8000be8:	4b3e      	ldr	r3, [pc, #248]	; (8000ce4 <HAL_ETH_MspInit+0x15c>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bf0:	61bb      	str	r3, [r7, #24]
 8000bf2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf4:	4b3b      	ldr	r3, [pc, #236]	; (8000ce4 <HAL_ETH_MspInit+0x15c>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	4a3a      	ldr	r2, [pc, #232]	; (8000ce4 <HAL_ETH_MspInit+0x15c>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000c00:	4b38      	ldr	r3, [pc, #224]	; (8000ce4 <HAL_ETH_MspInit+0x15c>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4b35      	ldr	r3, [pc, #212]	; (8000ce4 <HAL_ETH_MspInit+0x15c>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	4a34      	ldr	r2, [pc, #208]	; (8000ce4 <HAL_ETH_MspInit+0x15c>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	6313      	str	r3, [r2, #48]	; 0x30
 8000c18:	4b32      	ldr	r3, [pc, #200]	; (8000ce4 <HAL_ETH_MspInit+0x15c>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c24:	4b2f      	ldr	r3, [pc, #188]	; (8000ce4 <HAL_ETH_MspInit+0x15c>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	4a2e      	ldr	r2, [pc, #184]	; (8000ce4 <HAL_ETH_MspInit+0x15c>)
 8000c2a:	f043 0302 	orr.w	r3, r3, #2
 8000c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c30:	4b2c      	ldr	r3, [pc, #176]	; (8000ce4 <HAL_ETH_MspInit+0x15c>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c3c:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <HAL_ETH_MspInit+0x15c>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	4a28      	ldr	r2, [pc, #160]	; (8000ce4 <HAL_ETH_MspInit+0x15c>)
 8000c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c46:	6313      	str	r3, [r2, #48]	; 0x30
 8000c48:	4b26      	ldr	r3, [pc, #152]	; (8000ce4 <HAL_ETH_MspInit+0x15c>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c54:	2332      	movs	r3, #50	; 0x32
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c64:	230b      	movs	r3, #11
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	481e      	ldr	r0, [pc, #120]	; (8000ce8 <HAL_ETH_MspInit+0x160>)
 8000c70:	f000 fed2 	bl	8001a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c74:	2386      	movs	r3, #134	; 0x86
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c84:	230b      	movs	r3, #11
 8000c86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4817      	ldr	r0, [pc, #92]	; (8000cec <HAL_ETH_MspInit+0x164>)
 8000c90:	f000 fec2 	bl	8001a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca6:	230b      	movs	r3, #11
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480f      	ldr	r0, [pc, #60]	; (8000cf0 <HAL_ETH_MspInit+0x168>)
 8000cb2:	f000 feb1 	bl	8001a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cb6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc8:	230b      	movs	r3, #11
 8000cca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <HAL_ETH_MspInit+0x16c>)
 8000cd4:	f000 fea0 	bl	8001a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cd8:	bf00      	nop
 8000cda:	3738      	adds	r7, #56	; 0x38
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40028000 	.word	0x40028000
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020800 	.word	0x40020800
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40020400 	.word	0x40020400
 8000cf4:	40021800 	.word	0x40021800

08000cf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b0aa      	sub	sp, #168	; 0xa8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	2284      	movs	r2, #132	; 0x84
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f004 fbe9 	bl	80054f0 <memset>
  if(hi2c->Instance==I2C2)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a21      	ldr	r2, [pc, #132]	; (8000da8 <HAL_I2C_MspInit+0xb0>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d13b      	bne.n	8000da0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d2c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d32:	f107 0310 	add.w	r3, r7, #16
 8000d36:	4618      	mov	r0, r3
 8000d38:	f002 fa64 	bl	8003204 <HAL_RCCEx_PeriphCLKConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d42:	f7ff fef7 	bl	8000b34 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <HAL_I2C_MspInit+0xb4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a18      	ldr	r2, [pc, #96]	; (8000dac <HAL_I2C_MspInit+0xb4>)
 8000d4c:	f043 0320 	orr.w	r3, r3, #32
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <HAL_I2C_MspInit+0xb4>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0320 	and.w	r3, r3, #32
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d64:	2312      	movs	r3, #18
 8000d66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d76:	2304      	movs	r3, #4
 8000d78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d7c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d80:	4619      	mov	r1, r3
 8000d82:	480b      	ldr	r0, [pc, #44]	; (8000db0 <HAL_I2C_MspInit+0xb8>)
 8000d84:	f000 fe48 	bl	8001a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_I2C_MspInit+0xb4>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_I2C_MspInit+0xb4>)
 8000d8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d92:	6413      	str	r3, [r2, #64]	; 0x40
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_I2C_MspInit+0xb4>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000da0:	bf00      	nop
 8000da2:	37a8      	adds	r7, #168	; 0xa8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40005800 	.word	0x40005800
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40021400 	.word	0x40021400

08000db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b0aa      	sub	sp, #168	; 0xa8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	2284      	movs	r2, #132	; 0x84
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 fb8b 	bl	80054f0 <memset>
  if(huart->Instance==USART3)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a22      	ldr	r2, [pc, #136]	; (8000e68 <HAL_UART_MspInit+0xb4>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d13c      	bne.n	8000e5e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dee:	f107 0310 	add.w	r3, r7, #16
 8000df2:	4618      	mov	r0, r3
 8000df4:	f002 fa06 	bl	8003204 <HAL_RCCEx_PeriphCLKConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dfe:	f7ff fe99 	bl	8000b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e02:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <HAL_UART_MspInit+0xb8>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <HAL_UART_MspInit+0xb8>)
 8000e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_UART_MspInit+0xb8>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_UART_MspInit+0xb8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <HAL_UART_MspInit+0xb8>)
 8000e20:	f043 0308 	orr.w	r3, r3, #8
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_UART_MspInit+0xb8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e52:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <HAL_UART_MspInit+0xbc>)
 8000e5a:	f000 fddd 	bl	8001a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	37a8      	adds	r7, #168	; 0xa8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40004800 	.word	0x40004800
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020c00 	.word	0x40020c00

08000e74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b0ac      	sub	sp, #176	; 0xb0
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e8c:	f107 0318 	add.w	r3, r7, #24
 8000e90:	2284      	movs	r2, #132	; 0x84
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f004 fb2b 	bl	80054f0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ea2:	d159      	bne.n	8000f58 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ea4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ea8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb0:	f107 0318 	add.w	r3, r7, #24
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f002 f9a5 	bl	8003204 <HAL_RCCEx_PeriphCLKConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ec0:	f7ff fe38 	bl	8000b34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec4:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <HAL_PCD_MspInit+0xec>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec8:	4a25      	ldr	r2, [pc, #148]	; (8000f60 <HAL_PCD_MspInit+0xec>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed0:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <HAL_PCD_MspInit+0xec>)
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000edc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ee0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ef6:	230a      	movs	r3, #10
 8000ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f00:	4619      	mov	r1, r3
 8000f02:	4818      	ldr	r0, [pc, #96]	; (8000f64 <HAL_PCD_MspInit+0xf0>)
 8000f04:	f000 fd88 	bl	8001a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f20:	4619      	mov	r1, r3
 8000f22:	4810      	ldr	r0, [pc, #64]	; (8000f64 <HAL_PCD_MspInit+0xf0>)
 8000f24:	f000 fd78 	bl	8001a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_PCD_MspInit+0xec>)
 8000f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f2c:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <HAL_PCD_MspInit+0xec>)
 8000f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f32:	6353      	str	r3, [r2, #52]	; 0x34
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_PCD_MspInit+0xec>)
 8000f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <HAL_PCD_MspInit+0xec>)
 8000f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <HAL_PCD_MspInit+0xec>)
 8000f46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4a:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <HAL_PCD_MspInit+0xec>)
 8000f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f58:	bf00      	nop
 8000f5a:	37b0      	adds	r7, #176	; 0xb0
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020000 	.word	0x40020000

08000f68 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a2a      	ldr	r2, [pc, #168]	; (8001020 <HAL_SAI_MspInit+0xb8>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d124      	bne.n	8000fc4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8000f7a:	4b2a      	ldr	r3, [pc, #168]	; (8001024 <HAL_SAI_MspInit+0xbc>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10b      	bne.n	8000f9a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000f82:	4b29      	ldr	r3, [pc, #164]	; (8001028 <HAL_SAI_MspInit+0xc0>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	4a28      	ldr	r2, [pc, #160]	; (8001028 <HAL_SAI_MspInit+0xc0>)
 8000f88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8e:	4b26      	ldr	r3, [pc, #152]	; (8001028 <HAL_SAI_MspInit+0xc0>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8000f9a:	4b22      	ldr	r3, [pc, #136]	; (8001024 <HAL_SAI_MspInit+0xbc>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	4a20      	ldr	r2, [pc, #128]	; (8001024 <HAL_SAI_MspInit+0xbc>)
 8000fa2:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000fa4:	2370      	movs	r3, #112	; 0x70
 8000fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000fb4:	2306      	movs	r3, #6
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	481b      	ldr	r0, [pc, #108]	; (800102c <HAL_SAI_MspInit+0xc4>)
 8000fc0:	f000 fd2a 	bl	8001a18 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a19      	ldr	r2, [pc, #100]	; (8001030 <HAL_SAI_MspInit+0xc8>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d124      	bne.n	8001018 <HAL_SAI_MspInit+0xb0>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_SAI_MspInit+0xbc>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d10b      	bne.n	8000fee <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <HAL_SAI_MspInit+0xc0>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a13      	ldr	r2, [pc, #76]	; (8001028 <HAL_SAI_MspInit+0xc0>)
 8000fdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_SAI_MspInit+0xc0>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <HAL_SAI_MspInit+0xbc>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <HAL_SAI_MspInit+0xbc>)
 8000ff6:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ff8:	2308      	movs	r3, #8
 8000ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001008:	2306      	movs	r3, #6
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <HAL_SAI_MspInit+0xc4>)
 8001014:	f000 fd00 	bl	8001a18 <HAL_GPIO_Init>

    }
}
 8001018:	bf00      	nop
 800101a:	3728      	adds	r7, #40	; 0x28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40015804 	.word	0x40015804
 8001024:	20000944 	.word	0x20000944
 8001028:	40023800 	.word	0x40023800
 800102c:	40021000 	.word	0x40021000
 8001030:	40015824 	.word	0x40015824

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001038:	e7fe      	b.n	8001038 <NMI_Handler+0x4>

0800103a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <HardFault_Handler+0x4>

08001040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <MemManage_Handler+0x4>

08001046 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <BusFault_Handler+0x4>

0800104c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <UsageFault_Handler+0x4>

08001052 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001080:	f000 f87a 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}

08001088 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <SystemInit+0x20>)
 800108e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001092:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <SystemInit+0x20>)
 8001094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010b0:	480d      	ldr	r0, [pc, #52]	; (80010e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010b2:	490e      	ldr	r1, [pc, #56]	; (80010ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010b4:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b8:	e002      	b.n	80010c0 <LoopCopyDataInit>

080010ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010be:	3304      	adds	r3, #4

080010c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c4:	d3f9      	bcc.n	80010ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c6:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010c8:	4c0b      	ldr	r4, [pc, #44]	; (80010f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010cc:	e001      	b.n	80010d2 <LoopFillZerobss>

080010ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d0:	3204      	adds	r2, #4

080010d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d4:	d3fb      	bcc.n	80010ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010d6:	f7ff ffd7 	bl	8001088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010da:	f004 fa11 	bl	8005500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010de:	f7ff fa11 	bl	8000504 <main>
  bx  lr    
 80010e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010e4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80010e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010f0:	08005588 	.word	0x08005588
  ldr r2, =_sbss
 80010f4:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80010f8:	2000094c 	.word	0x2000094c

080010fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC_IRQHandler>

080010fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001102:	2003      	movs	r0, #3
 8001104:	f000 f92e 	bl	8001364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001108:	2000      	movs	r0, #0
 800110a:	f000 f805 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800110e:	f7ff fd17 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x54>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x58>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f93b 	bl	80013b2 <HAL_SYSTICK_Config>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00e      	b.n	8001164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b0f      	cmp	r3, #15
 800114a:	d80a      	bhi.n	8001162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114c:	2200      	movs	r2, #0
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f000 f911 	bl	800137a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <HAL_InitTick+0x5c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000000 	.word	0x20000000
 8001170:	20000008 	.word	0x20000008
 8001174:	20000004 	.word	0x20000004

08001178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x20>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x24>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <HAL_IncTick+0x24>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000008 	.word	0x20000008
 800119c:	20000948 	.word	0x20000948

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000948 	.word	0x20000948

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff ffee 	bl	80011a0 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d005      	beq.n	80011de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_Delay+0x44>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011de:	bf00      	nop
 80011e0:	f7ff ffde 	bl	80011a0 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8f7      	bhi.n	80011e0 <HAL_Delay+0x28>
  {
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000008 	.word	0x20000008

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <__NVIC_SetPriorityGrouping+0x40>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 800122a:	4313      	orrs	r3, r2
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <__NVIC_SetPriorityGrouping+0x40>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00
 8001244:	05fa0000 	.word	0x05fa0000

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	db0a      	blt.n	800128e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	490c      	ldr	r1, [pc, #48]	; (80012b0 <__NVIC_SetPriority+0x4c>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	0112      	lsls	r2, r2, #4
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	440b      	add	r3, r1
 8001288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800128c:	e00a      	b.n	80012a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4908      	ldr	r1, [pc, #32]	; (80012b4 <__NVIC_SetPriority+0x50>)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	3b04      	subs	r3, #4
 800129c:	0112      	lsls	r2, r2, #4
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	440b      	add	r3, r1
 80012a2:	761a      	strb	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000e100 	.word	0xe000e100
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f1c3 0307 	rsb	r3, r3, #7
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	bf28      	it	cs
 80012d6:	2304      	movcs	r3, #4
 80012d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3304      	adds	r3, #4
 80012de:	2b06      	cmp	r3, #6
 80012e0:	d902      	bls.n	80012e8 <NVIC_EncodePriority+0x30>
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3b03      	subs	r3, #3
 80012e6:	e000      	b.n	80012ea <NVIC_EncodePriority+0x32>
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	401a      	ands	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001300:	f04f 31ff 	mov.w	r1, #4294967295
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa01 f303 	lsl.w	r3, r1, r3
 800130a:	43d9      	mvns	r1, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	4313      	orrs	r3, r2
         );
}
 8001312:	4618      	mov	r0, r3
 8001314:	3724      	adds	r7, #36	; 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001330:	d301      	bcc.n	8001336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001332:	2301      	movs	r3, #1
 8001334:	e00f      	b.n	8001356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <SysTick_Config+0x40>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133e:	210f      	movs	r1, #15
 8001340:	f04f 30ff 	mov.w	r0, #4294967295
 8001344:	f7ff ff8e 	bl	8001264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <SysTick_Config+0x40>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <SysTick_Config+0x40>)
 8001350:	2207      	movs	r2, #7
 8001352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	e000e010 	.word	0xe000e010

08001364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff47 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800138c:	f7ff ff5c 	bl	8001248 <__NVIC_GetPriorityGrouping>
 8001390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	6978      	ldr	r0, [r7, #20]
 8001398:	f7ff ff8e 	bl	80012b8 <NVIC_EncodePriority>
 800139c:	4602      	mov	r2, r0
 800139e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff5d 	bl	8001264 <__NVIC_SetPriority>
}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffb0 	bl	8001320 <SysTick_Config>
 80013c0:	4603      	mov	r3, r0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e06a      	b.n	80014b4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d106      	bne.n	80013f6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2223      	movs	r2, #35	; 0x23
 80013ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff fbc9 	bl	8000b88 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	4b31      	ldr	r3, [pc, #196]	; (80014bc <HAL_ETH_Init+0xf0>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a30      	ldr	r2, [pc, #192]	; (80014bc <HAL_ETH_Init+0xf0>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <HAL_ETH_Init+0xf0>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800140e:	4b2c      	ldr	r3, [pc, #176]	; (80014c0 <HAL_ETH_Init+0xf4>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4a2b      	ldr	r2, [pc, #172]	; (80014c0 <HAL_ETH_Init+0xf4>)
 8001414:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001418:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800141a:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <HAL_ETH_Init+0xf4>)
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	4927      	ldr	r1, [pc, #156]	; (80014c0 <HAL_ETH_Init+0xf4>)
 8001424:	4313      	orrs	r3, r2
 8001426:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001428:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <HAL_ETH_Init+0xf4>)
 800142a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001442:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001444:	f7ff feac 	bl	80011a0 <HAL_GetTick>
 8001448:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800144a:	e011      	b.n	8001470 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800144c:	f7ff fea8 	bl	80011a0 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800145a:	d909      	bls.n	8001470 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2204      	movs	r2, #4
 8001460:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	22e0      	movs	r2, #224	; 0xe0
 8001468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e021      	b.n	80014b4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1e4      	bne.n	800144c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 f958 	bl	8001738 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f9ff 	bl	800188c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 fa55 	bl	800193e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	461a      	mov	r2, r3
 800149a:	2100      	movs	r1, #0
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 f9bd 	bl	800181c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2210      	movs	r2, #16
 80014ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40013800 	.word	0x40013800

080014c4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	4b51      	ldr	r3, [pc, #324]	; (8001620 <ETH_SetMACConfig+0x15c>)
 80014da:	4013      	ands	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	7c1b      	ldrb	r3, [r3, #16]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d102      	bne.n	80014ec <ETH_SetMACConfig+0x28>
 80014e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014ea:	e000      	b.n	80014ee <ETH_SetMACConfig+0x2a>
 80014ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	7c5b      	ldrb	r3, [r3, #17]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <ETH_SetMACConfig+0x38>
 80014f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014fa:	e000      	b.n	80014fe <ETH_SetMACConfig+0x3a>
 80014fc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014fe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001504:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	7fdb      	ldrb	r3, [r3, #31]
 800150a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800150c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001512:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	7f92      	ldrb	r2, [r2, #30]
 8001518:	2a00      	cmp	r2, #0
 800151a:	d102      	bne.n	8001522 <ETH_SetMACConfig+0x5e>
 800151c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001520:	e000      	b.n	8001524 <ETH_SetMACConfig+0x60>
 8001522:	2200      	movs	r2, #0
                        macconf->Speed |
 8001524:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	7f1b      	ldrb	r3, [r3, #28]
 800152a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800152c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001532:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	791b      	ldrb	r3, [r3, #4]
 8001538:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800153a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001542:	2a00      	cmp	r2, #0
 8001544:	d102      	bne.n	800154c <ETH_SetMACConfig+0x88>
 8001546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800154a:	e000      	b.n	800154e <ETH_SetMACConfig+0x8a>
 800154c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800154e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	7bdb      	ldrb	r3, [r3, #15]
 8001554:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001556:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800155c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001564:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001566:	4313      	orrs	r3, r2
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	4313      	orrs	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800157e:	2001      	movs	r0, #1
 8001580:	f7ff fe1a 	bl	80011b8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	f64f 7341 	movw	r3, #65345	; 0xff41
 800159a:	4013      	ands	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80015aa:	2a00      	cmp	r2, #0
 80015ac:	d101      	bne.n	80015b2 <ETH_SetMACConfig+0xee>
 80015ae:	2280      	movs	r2, #128	; 0x80
 80015b0:	e000      	b.n	80015b4 <ETH_SetMACConfig+0xf0>
 80015b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015b4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80015c2:	2a01      	cmp	r2, #1
 80015c4:	d101      	bne.n	80015ca <ETH_SetMACConfig+0x106>
 80015c6:	2208      	movs	r2, #8
 80015c8:	e000      	b.n	80015cc <ETH_SetMACConfig+0x108>
 80015ca:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80015cc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80015d4:	2a01      	cmp	r2, #1
 80015d6:	d101      	bne.n	80015dc <ETH_SetMACConfig+0x118>
 80015d8:	2204      	movs	r2, #4
 80015da:	e000      	b.n	80015de <ETH_SetMACConfig+0x11a>
 80015dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80015e6:	2a01      	cmp	r2, #1
 80015e8:	d101      	bne.n	80015ee <ETH_SetMACConfig+0x12a>
 80015ea:	2202      	movs	r2, #2
 80015ec:	e000      	b.n	80015f0 <ETH_SetMACConfig+0x12c>
 80015ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015f0:	4313      	orrs	r3, r2
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001608:	2001      	movs	r0, #1
 800160a:	f7ff fdd5 	bl	80011b8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	619a      	str	r2, [r3, #24]
}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	ff20810f 	.word	0xff20810f

08001624 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	4b3d      	ldr	r3, [pc, #244]	; (8001734 <ETH_SetDMAConfig+0x110>)
 800163e:	4013      	ands	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	7b1b      	ldrb	r3, [r3, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <ETH_SetDMAConfig+0x2c>
 800164a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800164e:	e000      	b.n	8001652 <ETH_SetDMAConfig+0x2e>
 8001650:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	7b5b      	ldrb	r3, [r3, #13]
 8001656:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001658:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	7f52      	ldrb	r2, [r2, #29]
 800165e:	2a00      	cmp	r2, #0
 8001660:	d102      	bne.n	8001668 <ETH_SetDMAConfig+0x44>
 8001662:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001666:	e000      	b.n	800166a <ETH_SetDMAConfig+0x46>
 8001668:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800166a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	7b9b      	ldrb	r3, [r3, #14]
 8001670:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001672:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001678:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	7f1b      	ldrb	r3, [r3, #28]
 800167e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001680:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	7f9b      	ldrb	r3, [r3, #30]
 8001686:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001688:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800168e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001696:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001698:	4313      	orrs	r3, r2
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	4313      	orrs	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a8:	461a      	mov	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f7ff fd7c 	bl	80011b8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c8:	461a      	mov	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	791b      	ldrb	r3, [r3, #4]
 80016d2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016d8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80016de:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016e4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016ec:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80016ee:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016f6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016fc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001706:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800170a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001718:	2001      	movs	r0, #1
 800171a:	f7ff fd4d 	bl	80011b8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001726:	461a      	mov	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	f8de3f23 	.word	0xf8de3f23

08001738 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b0a6      	sub	sp, #152	; 0x98
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001740:	2301      	movs	r3, #1
 8001742:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001746:	2301      	movs	r3, #1
 8001748:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800174c:	2300      	movs	r3, #0
 800174e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001756:	2301      	movs	r3, #1
 8001758:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001762:	2301      	movs	r3, #1
 8001764:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001774:	2300      	movs	r3, #0
 8001776:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800177e:	2300      	movs	r3, #0
 8001780:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001788:	2300      	movs	r3, #0
 800178a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800179a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800179e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80017a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80017ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017b0:	4619      	mov	r1, r3
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff fe86 	bl	80014c4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80017b8:	2301      	movs	r3, #1
 80017ba:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80017bc:	2301      	movs	r3, #1
 80017be:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80017c0:	2301      	movs	r3, #1
 80017c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80017c6:	2301      	movs	r3, #1
 80017c8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80017da:	2300      	movs	r3, #0
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80017de:	2301      	movs	r3, #1
 80017e0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80017e4:	2301      	movs	r3, #1
 80017e6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80017e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ec:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017f8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80017fa:	2301      	movs	r3, #1
 80017fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001800:	2300      	movs	r3, #0
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001808:	f107 0308 	add.w	r3, r7, #8
 800180c:	4619      	mov	r1, r3
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ff08 	bl	8001624 <ETH_SetDMAConfig>
}
 8001814:	bf00      	nop
 8001816:	3798      	adds	r7, #152	; 0x98
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3305      	adds	r3, #5
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	3204      	adds	r2, #4
 8001834:	7812      	ldrb	r2, [r2, #0]
 8001836:	4313      	orrs	r3, r2
 8001838:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <ETH_MACAddressConfig+0x68>)
 800183e:	4413      	add	r3, r2
 8001840:	461a      	mov	r2, r3
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3303      	adds	r3, #3
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	061a      	lsls	r2, r3, #24
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3302      	adds	r3, #2
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	041b      	lsls	r3, r3, #16
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3301      	adds	r3, #1
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	4313      	orrs	r3, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	7812      	ldrb	r2, [r2, #0]
 8001866:	4313      	orrs	r3, r2
 8001868:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <ETH_MACAddressConfig+0x6c>)
 800186e:	4413      	add	r3, r2
 8001870:	461a      	mov	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	6013      	str	r3, [r2, #0]
}
 8001876:	bf00      	nop
 8001878:	371c      	adds	r7, #28
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40028040 	.word	0x40028040
 8001888:	40028044 	.word	0x40028044

0800188c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	e03e      	b.n	8001918 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68d9      	ldr	r1, [r3, #12]
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2200      	movs	r2, #0
 80018b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2200      	movs	r2, #0
 80018c2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	3206      	adds	r2, #6
 80018cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d80c      	bhi.n	80018fc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68d9      	ldr	r1, [r3, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	440b      	add	r3, r1
 80018f4:	461a      	mov	r2, r3
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	e004      	b.n	8001906 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	461a      	mov	r2, r3
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3301      	adds	r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d9bd      	bls.n	800189a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001930:	611a      	str	r2, [r3, #16]
}
 8001932:	bf00      	nop
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800193e:	b480      	push	{r7}
 8001940:	b085      	sub	sp, #20
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	e046      	b.n	80019da <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6919      	ldr	r1, [r3, #16]
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	440b      	add	r3, r1
 800195c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2200      	movs	r2, #0
 8001968:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2200      	movs	r2, #0
 8001980:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001988:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001990:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800199e:	68b9      	ldr	r1, [r7, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	3212      	adds	r2, #18
 80019a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d80c      	bhi.n	80019ca <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6919      	ldr	r1, [r3, #16]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	440b      	add	r3, r1
 80019c2:	461a      	mov	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	e004      	b.n	80019d4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	461a      	mov	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3301      	adds	r3, #1
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d9b5      	bls.n	800194c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a0a:	60da      	str	r2, [r3, #12]
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	e175      	b.n	8001d24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	f040 8164 	bne.w	8001d1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d005      	beq.n	8001a6e <HAL_GPIO_Init+0x56>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d130      	bne.n	8001ad0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	2203      	movs	r2, #3
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	f003 0201 	and.w	r2, r3, #1
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d017      	beq.n	8001b0c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d123      	bne.n	8001b60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	08da      	lsrs	r2, r3, #3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3208      	adds	r2, #8
 8001b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	220f      	movs	r2, #15
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	08da      	lsrs	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3208      	adds	r2, #8
 8001b5a:	69b9      	ldr	r1, [r7, #24]
 8001b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0203 	and.w	r2, r3, #3
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 80be 	beq.w	8001d1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	4b66      	ldr	r3, [pc, #408]	; (8001d3c <HAL_GPIO_Init+0x324>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	4a65      	ldr	r2, [pc, #404]	; (8001d3c <HAL_GPIO_Init+0x324>)
 8001ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bac:	6453      	str	r3, [r2, #68]	; 0x44
 8001bae:	4b63      	ldr	r3, [pc, #396]	; (8001d3c <HAL_GPIO_Init+0x324>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bba:	4a61      	ldr	r2, [pc, #388]	; (8001d40 <HAL_GPIO_Init+0x328>)
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	220f      	movs	r2, #15
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a58      	ldr	r2, [pc, #352]	; (8001d44 <HAL_GPIO_Init+0x32c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d037      	beq.n	8001c56 <HAL_GPIO_Init+0x23e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a57      	ldr	r2, [pc, #348]	; (8001d48 <HAL_GPIO_Init+0x330>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d031      	beq.n	8001c52 <HAL_GPIO_Init+0x23a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a56      	ldr	r2, [pc, #344]	; (8001d4c <HAL_GPIO_Init+0x334>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d02b      	beq.n	8001c4e <HAL_GPIO_Init+0x236>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a55      	ldr	r2, [pc, #340]	; (8001d50 <HAL_GPIO_Init+0x338>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d025      	beq.n	8001c4a <HAL_GPIO_Init+0x232>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a54      	ldr	r2, [pc, #336]	; (8001d54 <HAL_GPIO_Init+0x33c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d01f      	beq.n	8001c46 <HAL_GPIO_Init+0x22e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a53      	ldr	r2, [pc, #332]	; (8001d58 <HAL_GPIO_Init+0x340>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d019      	beq.n	8001c42 <HAL_GPIO_Init+0x22a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a52      	ldr	r2, [pc, #328]	; (8001d5c <HAL_GPIO_Init+0x344>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d013      	beq.n	8001c3e <HAL_GPIO_Init+0x226>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a51      	ldr	r2, [pc, #324]	; (8001d60 <HAL_GPIO_Init+0x348>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d00d      	beq.n	8001c3a <HAL_GPIO_Init+0x222>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a50      	ldr	r2, [pc, #320]	; (8001d64 <HAL_GPIO_Init+0x34c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d007      	beq.n	8001c36 <HAL_GPIO_Init+0x21e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4f      	ldr	r2, [pc, #316]	; (8001d68 <HAL_GPIO_Init+0x350>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d101      	bne.n	8001c32 <HAL_GPIO_Init+0x21a>
 8001c2e:	2309      	movs	r3, #9
 8001c30:	e012      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c32:	230a      	movs	r3, #10
 8001c34:	e010      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c36:	2308      	movs	r3, #8
 8001c38:	e00e      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c3a:	2307      	movs	r3, #7
 8001c3c:	e00c      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c3e:	2306      	movs	r3, #6
 8001c40:	e00a      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c42:	2305      	movs	r3, #5
 8001c44:	e008      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c46:	2304      	movs	r3, #4
 8001c48:	e006      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e004      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e002      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c56:	2300      	movs	r3, #0
 8001c58:	69fa      	ldr	r2, [r7, #28]
 8001c5a:	f002 0203 	and.w	r2, r2, #3
 8001c5e:	0092      	lsls	r2, r2, #2
 8001c60:	4093      	lsls	r3, r2
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c68:	4935      	ldr	r1, [pc, #212]	; (8001d40 <HAL_GPIO_Init+0x328>)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	089b      	lsrs	r3, r3, #2
 8001c6e:	3302      	adds	r3, #2
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c76:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <HAL_GPIO_Init+0x354>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c9a:	4a34      	ldr	r2, [pc, #208]	; (8001d6c <HAL_GPIO_Init+0x354>)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca0:	4b32      	ldr	r3, [pc, #200]	; (8001d6c <HAL_GPIO_Init+0x354>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc4:	4a29      	ldr	r2, [pc, #164]	; (8001d6c <HAL_GPIO_Init+0x354>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cca:	4b28      	ldr	r3, [pc, #160]	; (8001d6c <HAL_GPIO_Init+0x354>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cee:	4a1f      	ldr	r2, [pc, #124]	; (8001d6c <HAL_GPIO_Init+0x354>)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_GPIO_Init+0x354>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d18:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <HAL_GPIO_Init+0x354>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3301      	adds	r3, #1
 8001d22:	61fb      	str	r3, [r7, #28]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	2b0f      	cmp	r3, #15
 8001d28:	f67f ae86 	bls.w	8001a38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	3724      	adds	r7, #36	; 0x24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40013800 	.word	0x40013800
 8001d44:	40020000 	.word	0x40020000
 8001d48:	40020400 	.word	0x40020400
 8001d4c:	40020800 	.word	0x40020800
 8001d50:	40020c00 	.word	0x40020c00
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40021400 	.word	0x40021400
 8001d5c:	40021800 	.word	0x40021800
 8001d60:	40021c00 	.word	0x40021c00
 8001d64:	40022000 	.word	0x40022000
 8001d68:	40022400 	.word	0x40022400
 8001d6c:	40013c00 	.word	0x40013c00

08001d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d80:	787b      	ldrb	r3, [r7, #1]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d86:	887a      	ldrh	r2, [r7, #2]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d8c:	e003      	b.n	8001d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d8e:	887b      	ldrh	r3, [r7, #2]
 8001d90:	041a      	lsls	r2, r3, #16
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	619a      	str	r2, [r3, #24]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e07f      	b.n	8001eb6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d106      	bne.n	8001dd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7fe ff94 	bl	8000cf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2224      	movs	r2, #36	; 0x24
 8001dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001df4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d107      	bne.n	8001e1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	e006      	b.n	8001e2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d104      	bne.n	8001e3e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6859      	ldr	r1, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <HAL_I2C_Init+0x11c>)
 8001e4a:	430b      	orrs	r3, r1
 8001e4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691a      	ldr	r2, [r3, #16]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69d9      	ldr	r1, [r3, #28]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1a      	ldr	r2, [r3, #32]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	02008000 	.word	0x02008000

08001ec4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	817b      	strh	r3, [r7, #10]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b20      	cmp	r3, #32
 8001ee2:	f040 80da 	bne.w	800209a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_I2C_Master_Transmit+0x30>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e0d3      	b.n	800209c <HAL_I2C_Master_Transmit+0x1d8>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001efc:	f7ff f950 	bl	80011a0 <HAL_GetTick>
 8001f00:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2319      	movs	r3, #25
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 f8f0 	bl	80020f4 <I2C_WaitOnFlagUntilTimeout>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e0be      	b.n	800209c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2221      	movs	r2, #33	; 0x21
 8001f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2210      	movs	r2, #16
 8001f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	893a      	ldrh	r2, [r7, #8]
 8001f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	2bff      	cmp	r3, #255	; 0xff
 8001f4e:	d90e      	bls.n	8001f6e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	22ff      	movs	r2, #255	; 0xff
 8001f54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	8979      	ldrh	r1, [r7, #10]
 8001f5e:	4b51      	ldr	r3, [pc, #324]	; (80020a4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 fa60 	bl	800242c <I2C_TransferConfig>
 8001f6c:	e06c      	b.n	8002048 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	8979      	ldrh	r1, [r7, #10]
 8001f80:	4b48      	ldr	r3, [pc, #288]	; (80020a4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 fa4f 	bl	800242c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001f8e:	e05b      	b.n	8002048 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	6a39      	ldr	r1, [r7, #32]
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 f8ed 	bl	8002174 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e07b      	b.n	800209c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	781a      	ldrb	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	1c5a      	adds	r2, r3, #1
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d034      	beq.n	8002048 <HAL_I2C_Master_Transmit+0x184>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d130      	bne.n	8002048 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	2200      	movs	r2, #0
 8001fee:	2180      	movs	r1, #128	; 0x80
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 f87f 	bl	80020f4 <I2C_WaitOnFlagUntilTimeout>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e04d      	b.n	800209c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	2bff      	cmp	r3, #255	; 0xff
 8002008:	d90e      	bls.n	8002028 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	22ff      	movs	r2, #255	; 0xff
 800200e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002014:	b2da      	uxtb	r2, r3
 8002016:	8979      	ldrh	r1, [r7, #10]
 8002018:	2300      	movs	r3, #0
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 fa03 	bl	800242c <I2C_TransferConfig>
 8002026:	e00f      	b.n	8002048 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202c:	b29a      	uxth	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002036:	b2da      	uxtb	r2, r3
 8002038:	8979      	ldrh	r1, [r7, #10]
 800203a:	2300      	movs	r3, #0
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 f9f2 	bl	800242c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d19e      	bne.n	8001f90 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	6a39      	ldr	r1, [r7, #32]
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 f8cc 	bl	80021f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e01a      	b.n	800209c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2220      	movs	r2, #32
 800206c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6859      	ldr	r1, [r3, #4]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_I2C_Master_Transmit+0x1e4>)
 800207a:	400b      	ands	r3, r1
 800207c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800209a:	2302      	movs	r3, #2
  }
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	80002000 	.word	0x80002000
 80020a8:	fe00e800 	.word	0xfe00e800

080020ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d103      	bne.n	80020ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2200      	movs	r2, #0
 80020c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d007      	beq.n	80020e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699a      	ldr	r2, [r3, #24]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	619a      	str	r2, [r3, #24]
  }
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	4613      	mov	r3, r2
 8002102:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002104:	e022      	b.n	800214c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210c:	d01e      	beq.n	800214c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800210e:	f7ff f847 	bl	80011a0 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d302      	bcc.n	8002124 <I2C_WaitOnFlagUntilTimeout+0x30>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d113      	bne.n	800214c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002128:	f043 0220 	orr.w	r2, r3, #32
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e00f      	b.n	800216c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699a      	ldr	r2, [r3, #24]
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	4013      	ands	r3, r2
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	429a      	cmp	r2, r3
 800215a:	bf0c      	ite	eq
 800215c:	2301      	moveq	r3, #1
 800215e:	2300      	movne	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	461a      	mov	r2, r3
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	429a      	cmp	r2, r3
 8002168:	d0cd      	beq.n	8002106 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002180:	e02c      	b.n	80021dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	68b9      	ldr	r1, [r7, #8]
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 f870 	bl	800226c <I2C_IsErrorOccurred>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e02a      	b.n	80021ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219c:	d01e      	beq.n	80021dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800219e:	f7fe ffff 	bl	80011a0 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d302      	bcc.n	80021b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d113      	bne.n	80021dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b8:	f043 0220 	orr.w	r2, r3, #32
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e007      	b.n	80021ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d1cb      	bne.n	8002182 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002200:	e028      	b.n	8002254 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 f830 	bl	800226c <I2C_IsErrorOccurred>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e026      	b.n	8002264 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002216:	f7fe ffc3 	bl	80011a0 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	429a      	cmp	r2, r3
 8002224:	d302      	bcc.n	800222c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d113      	bne.n	8002254 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002230:	f043 0220 	orr.w	r2, r3, #32
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e007      	b.n	8002264 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	2b20      	cmp	r3, #32
 8002260:	d1cf      	bne.n	8002202 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	2b00      	cmp	r3, #0
 8002296:	d068      	beq.n	800236a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2210      	movs	r2, #16
 800229e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022a0:	e049      	b.n	8002336 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d045      	beq.n	8002336 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022aa:	f7fe ff79 	bl	80011a0 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d302      	bcc.n	80022c0 <I2C_IsErrorOccurred+0x54>
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d13a      	bne.n	8002336 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022e2:	d121      	bne.n	8002328 <I2C_IsErrorOccurred+0xbc>
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022ea:	d01d      	beq.n	8002328 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80022ec:	7cfb      	ldrb	r3, [r7, #19]
 80022ee:	2b20      	cmp	r3, #32
 80022f0:	d01a      	beq.n	8002328 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002300:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002302:	f7fe ff4d 	bl	80011a0 <HAL_GetTick>
 8002306:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002308:	e00e      	b.n	8002328 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800230a:	f7fe ff49 	bl	80011a0 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b19      	cmp	r3, #25
 8002316:	d907      	bls.n	8002328 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	f043 0320 	orr.w	r3, r3, #32
 800231e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002326:	e006      	b.n	8002336 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	f003 0320 	and.w	r3, r3, #32
 8002332:	2b20      	cmp	r3, #32
 8002334:	d1e9      	bne.n	800230a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b20      	cmp	r3, #32
 8002342:	d003      	beq.n	800234c <I2C_IsErrorOccurred+0xe0>
 8002344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0aa      	beq.n	80022a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800234c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002350:	2b00      	cmp	r3, #0
 8002352:	d103      	bne.n	800235c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2220      	movs	r2, #32
 800235a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	f043 0304 	orr.w	r3, r3, #4
 8002362:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00b      	beq.n	8002394 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f44f 7280 	mov.w	r2, #256	; 0x100
 800238c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00b      	beq.n	80023b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	f043 0308 	orr.w	r3, r3, #8
 80023a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00b      	beq.n	80023d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80023d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01c      	beq.n	800241a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f7ff fe63 	bl	80020ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <I2C_IsErrorOccurred+0x1bc>)
 80023f2:	400b      	ands	r3, r1
 80023f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	431a      	orrs	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800241a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800241e:	4618      	mov	r0, r3
 8002420:	3728      	adds	r7, #40	; 0x28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	fe00e800 	.word	0xfe00e800

0800242c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	460b      	mov	r3, r1
 8002438:	817b      	strh	r3, [r7, #10]
 800243a:	4613      	mov	r3, r2
 800243c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800243e:	897b      	ldrh	r3, [r7, #10]
 8002440:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002444:	7a7b      	ldrb	r3, [r7, #9]
 8002446:	041b      	lsls	r3, r3, #16
 8002448:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800244c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	4313      	orrs	r3, r2
 8002456:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800245a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	0d5b      	lsrs	r3, r3, #21
 8002466:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <I2C_TransferConfig+0x60>)
 800246c:	430b      	orrs	r3, r1
 800246e:	43db      	mvns	r3, r3
 8002470:	ea02 0103 	and.w	r1, r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	430a      	orrs	r2, r1
 800247c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800247e:	bf00      	nop
 8002480:	371c      	adds	r7, #28
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	03ff63ff 	.word	0x03ff63ff

08002490 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b20      	cmp	r3, #32
 80024a4:	d138      	bne.n	8002518 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e032      	b.n	800251a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2224      	movs	r2, #36	; 0x24
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6819      	ldr	r1, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	e000      	b.n	800251a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002518:	2302      	movs	r3, #2
  }
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002526:	b480      	push	{r7}
 8002528:	b085      	sub	sp, #20
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b20      	cmp	r3, #32
 800253a:	d139      	bne.n	80025b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002546:	2302      	movs	r3, #2
 8002548:	e033      	b.n	80025b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2224      	movs	r2, #36	; 0x24
 8002556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0201 	bic.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002578:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	021b      	lsls	r3, r3, #8
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4313      	orrs	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	e000      	b.n	80025b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025b0:	2302      	movs	r3, #2
  }
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c0:	b08f      	sub	sp, #60	; 0x3c
 80025c2:	af0a      	add	r7, sp, #40	; 0x28
 80025c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e116      	b.n	80027fe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d106      	bne.n	80025f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7fe fc42 	bl	8000e74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2203      	movs	r2, #3
 80025f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f002 fcd2 	bl	8004fb8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	687e      	ldr	r6, [r7, #4]
 800261c:	466d      	mov	r5, sp
 800261e:	f106 0410 	add.w	r4, r6, #16
 8002622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800262a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800262e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002632:	1d33      	adds	r3, r6, #4
 8002634:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002636:	6838      	ldr	r0, [r7, #0]
 8002638:	f002 fc66 	bl	8004f08 <USB_CoreInit>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2202      	movs	r2, #2
 8002646:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e0d7      	b.n	80027fe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2100      	movs	r1, #0
 8002654:	4618      	mov	r0, r3
 8002656:	f002 fcc0 	bl	8004fda <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800265a:	2300      	movs	r3, #0
 800265c:	73fb      	strb	r3, [r7, #15]
 800265e:	e04a      	b.n	80026f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	333d      	adds	r3, #61	; 0x3d
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002674:	7bfa      	ldrb	r2, [r7, #15]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	333c      	adds	r3, #60	; 0x3c
 8002684:	7bfa      	ldrb	r2, [r7, #15]
 8002686:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	b298      	uxth	r0, r3
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	3344      	adds	r3, #68	; 0x44
 800269c:	4602      	mov	r2, r0
 800269e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	3340      	adds	r3, #64	; 0x40
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026b4:	7bfa      	ldrb	r2, [r7, #15]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	3348      	adds	r3, #72	; 0x48
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026c8:	7bfa      	ldrb	r2, [r7, #15]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	334c      	adds	r3, #76	; 0x4c
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026dc:	7bfa      	ldrb	r2, [r7, #15]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	3354      	adds	r3, #84	; 0x54
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	3301      	adds	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
 80026f6:	7bfa      	ldrb	r2, [r7, #15]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d3af      	bcc.n	8002660 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002700:	2300      	movs	r3, #0
 8002702:	73fb      	strb	r3, [r7, #15]
 8002704:	e044      	b.n	8002790 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002706:	7bfa      	ldrb	r2, [r7, #15]
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4413      	add	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	440b      	add	r3, r1
 8002714:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800271c:	7bfa      	ldrb	r2, [r7, #15]
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4413      	add	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800272e:	7bfa      	ldrb	r2, [r7, #15]
 8002730:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002732:	7bfa      	ldrb	r2, [r7, #15]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002748:	7bfa      	ldrb	r2, [r7, #15]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800275e:	7bfa      	ldrb	r2, [r7, #15]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4413      	add	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002774:	7bfa      	ldrb	r2, [r7, #15]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	3301      	adds	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	429a      	cmp	r2, r3
 8002798:	d3b5      	bcc.n	8002706 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	687e      	ldr	r6, [r7, #4]
 80027a2:	466d      	mov	r5, sp
 80027a4:	f106 0410 	add.w	r4, r6, #16
 80027a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80027b8:	1d33      	adds	r3, r6, #4
 80027ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027bc:	6838      	ldr	r0, [r7, #0]
 80027be:	f002 fc59 	bl	8005074 <USB_DevInit>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e014      	b.n	80027fe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d102      	bne.n	80027f2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f80b 	bl	8002808 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f002 fe17 	bl	800542a <USB_DevDisconnect>

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002808 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002836:	4b05      	ldr	r3, [pc, #20]	; (800284c <HAL_PCDEx_ActivateLPM+0x44>)
 8002838:	4313      	orrs	r3, r2
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	10000003 	.word	0x10000003

08002850 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a04      	ldr	r2, [pc, #16]	; (800286c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800285a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285e:	6013      	str	r3, [r2, #0]
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40007000 	.word	0x40007000

08002870 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002878:	2300      	movs	r3, #0
 800287a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e291      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8087 	beq.w	80029a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002894:	4b96      	ldr	r3, [pc, #600]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b04      	cmp	r3, #4
 800289e:	d00c      	beq.n	80028ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a0:	4b93      	ldr	r3, [pc, #588]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d112      	bne.n	80028d2 <HAL_RCC_OscConfig+0x62>
 80028ac:	4b90      	ldr	r3, [pc, #576]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028b8:	d10b      	bne.n	80028d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ba:	4b8d      	ldr	r3, [pc, #564]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d06c      	beq.n	80029a0 <HAL_RCC_OscConfig+0x130>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d168      	bne.n	80029a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e26b      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028da:	d106      	bne.n	80028ea <HAL_RCC_OscConfig+0x7a>
 80028dc:	4b84      	ldr	r3, [pc, #528]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a83      	ldr	r2, [pc, #524]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80028e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	e02e      	b.n	8002948 <HAL_RCC_OscConfig+0xd8>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x9c>
 80028f2:	4b7f      	ldr	r3, [pc, #508]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a7e      	ldr	r2, [pc, #504]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80028f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b7c      	ldr	r3, [pc, #496]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a7b      	ldr	r2, [pc, #492]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002904:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e01d      	b.n	8002948 <HAL_RCC_OscConfig+0xd8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0xc0>
 8002916:	4b76      	ldr	r3, [pc, #472]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a75      	ldr	r2, [pc, #468]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 800291c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b73      	ldr	r3, [pc, #460]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a72      	ldr	r2, [pc, #456]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e00b      	b.n	8002948 <HAL_RCC_OscConfig+0xd8>
 8002930:	4b6f      	ldr	r3, [pc, #444]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a6e      	ldr	r2, [pc, #440]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b6c      	ldr	r3, [pc, #432]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a6b      	ldr	r2, [pc, #428]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d013      	beq.n	8002978 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7fe fc26 	bl	80011a0 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002958:	f7fe fc22 	bl	80011a0 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b64      	cmp	r3, #100	; 0x64
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e21f      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	4b61      	ldr	r3, [pc, #388]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0xe8>
 8002976:	e014      	b.n	80029a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7fe fc12 	bl	80011a0 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002980:	f7fe fc0e 	bl	80011a0 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	; 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e20b      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002992:	4b57      	ldr	r3, [pc, #348]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x110>
 800299e:	e000      	b.n	80029a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d069      	beq.n	8002a82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ae:	4b50      	ldr	r3, [pc, #320]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00b      	beq.n	80029d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ba:	4b4d      	ldr	r3, [pc, #308]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d11c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x190>
 80029c6:	4b4a      	ldr	r3, [pc, #296]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d116      	bne.n	8002a00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d2:	4b47      	ldr	r3, [pc, #284]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d005      	beq.n	80029ea <HAL_RCC_OscConfig+0x17a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e1df      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ea:	4b41      	ldr	r3, [pc, #260]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	493d      	ldr	r1, [pc, #244]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fe:	e040      	b.n	8002a82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d023      	beq.n	8002a50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a08:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a38      	ldr	r2, [pc, #224]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe fbc4 	bl	80011a0 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a1c:	f7fe fbc0 	bl	80011a0 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e1bd      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2e:	4b30      	ldr	r3, [pc, #192]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3a:	4b2d      	ldr	r3, [pc, #180]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4929      	ldr	r1, [pc, #164]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]
 8002a4e:	e018      	b.n	8002a82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a50:	4b27      	ldr	r3, [pc, #156]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a26      	ldr	r2, [pc, #152]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7fe fba0 	bl	80011a0 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a64:	f7fe fb9c 	bl	80011a0 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e199      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a76:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d038      	beq.n	8002b00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d019      	beq.n	8002aca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a96:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9a:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa2:	f7fe fb7d 	bl	80011a0 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aaa:	f7fe fb79 	bl	80011a0 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e176      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x23a>
 8002ac8:	e01a      	b.n	8002b00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ace:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad6:	f7fe fb63 	bl	80011a0 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002adc:	e00a      	b.n	8002af4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ade:	f7fe fb5f 	bl	80011a0 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d903      	bls.n	8002af4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e15c      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
 8002af0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af4:	4b91      	ldr	r3, [pc, #580]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1ee      	bne.n	8002ade <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80a4 	beq.w	8002c56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b0e:	4b8b      	ldr	r3, [pc, #556]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10d      	bne.n	8002b36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b1a:	4b88      	ldr	r3, [pc, #544]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a87      	ldr	r2, [pc, #540]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
 8002b26:	4b85      	ldr	r3, [pc, #532]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b32:	2301      	movs	r3, #1
 8002b34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b36:	4b82      	ldr	r3, [pc, #520]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d118      	bne.n	8002b74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b42:	4b7f      	ldr	r3, [pc, #508]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a7e      	ldr	r2, [pc, #504]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b4e:	f7fe fb27 	bl	80011a0 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b56:	f7fe fb23 	bl	80011a0 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b64      	cmp	r3, #100	; 0x64
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e120      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b68:	4b75      	ldr	r3, [pc, #468]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d106      	bne.n	8002b8a <HAL_RCC_OscConfig+0x31a>
 8002b7c:	4b6f      	ldr	r3, [pc, #444]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b80:	4a6e      	ldr	r2, [pc, #440]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	6713      	str	r3, [r2, #112]	; 0x70
 8002b88:	e02d      	b.n	8002be6 <HAL_RCC_OscConfig+0x376>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10c      	bne.n	8002bac <HAL_RCC_OscConfig+0x33c>
 8002b92:	4b6a      	ldr	r3, [pc, #424]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	4a69      	ldr	r2, [pc, #420]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9e:	4b67      	ldr	r3, [pc, #412]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	4a66      	ldr	r2, [pc, #408]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002ba4:	f023 0304 	bic.w	r3, r3, #4
 8002ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8002baa:	e01c      	b.n	8002be6 <HAL_RCC_OscConfig+0x376>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d10c      	bne.n	8002bce <HAL_RCC_OscConfig+0x35e>
 8002bb4:	4b61      	ldr	r3, [pc, #388]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb8:	4a60      	ldr	r2, [pc, #384]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002bba:	f043 0304 	orr.w	r3, r3, #4
 8002bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc0:	4b5e      	ldr	r3, [pc, #376]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc4:	4a5d      	ldr	r2, [pc, #372]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6713      	str	r3, [r2, #112]	; 0x70
 8002bcc:	e00b      	b.n	8002be6 <HAL_RCC_OscConfig+0x376>
 8002bce:	4b5b      	ldr	r3, [pc, #364]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd2:	4a5a      	ldr	r2, [pc, #360]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
 8002bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bda:	4b58      	ldr	r3, [pc, #352]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	4a57      	ldr	r2, [pc, #348]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002be0:	f023 0304 	bic.w	r3, r3, #4
 8002be4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d015      	beq.n	8002c1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bee:	f7fe fad7 	bl	80011a0 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf4:	e00a      	b.n	8002c0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f7fe fad3 	bl	80011a0 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e0ce      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0c:	4b4b      	ldr	r3, [pc, #300]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0ee      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x386>
 8002c18:	e014      	b.n	8002c44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1a:	f7fe fac1 	bl	80011a0 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c20:	e00a      	b.n	8002c38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c22:	f7fe fabd 	bl	80011a0 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e0b8      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c38:	4b40      	ldr	r3, [pc, #256]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1ee      	bne.n	8002c22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d105      	bne.n	8002c56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c4a:	4b3c      	ldr	r3, [pc, #240]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	4a3b      	ldr	r2, [pc, #236]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 80a4 	beq.w	8002da8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c60:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 030c 	and.w	r3, r3, #12
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d06b      	beq.n	8002d44 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d149      	bne.n	8002d08 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c74:	4b31      	ldr	r3, [pc, #196]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a30      	ldr	r2, [pc, #192]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe fa8e 	bl	80011a0 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe fa8a 	bl	80011a0 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e087      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9a:	4b28      	ldr	r3, [pc, #160]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69da      	ldr	r2, [r3, #28]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	019b      	lsls	r3, r3, #6
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	085b      	lsrs	r3, r3, #1
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	041b      	lsls	r3, r3, #16
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	061b      	lsls	r3, r3, #24
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	4a1b      	ldr	r2, [pc, #108]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002cce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cd2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd4:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a18      	ldr	r2, [pc, #96]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fe fa5e 	bl	80011a0 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce8:	f7fe fa5a 	bl	80011a0 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e057      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfa:	4b10      	ldr	r3, [pc, #64]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x478>
 8002d06:	e04f      	b.n	8002da8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0b      	ldr	r2, [pc, #44]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fe fa44 	bl	80011a0 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1c:	f7fe fa40 	bl	80011a0 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e03d      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2e:	4b03      	ldr	r3, [pc, #12]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x4ac>
 8002d3a:	e035      	b.n	8002da8 <HAL_RCC_OscConfig+0x538>
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d44:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <HAL_RCC_OscConfig+0x544>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d028      	beq.n	8002da4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d121      	bne.n	8002da4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d11a      	bne.n	8002da4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d74:	4013      	ands	r3, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d7a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d111      	bne.n	8002da4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	085b      	lsrs	r3, r3, #1
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800

08002db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e0d0      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd0:	4b6a      	ldr	r3, [pc, #424]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d910      	bls.n	8002e00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	4b67      	ldr	r3, [pc, #412]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 020f 	bic.w	r2, r3, #15
 8002de6:	4965      	ldr	r1, [pc, #404]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dee:	4b63      	ldr	r3, [pc, #396]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0b8      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d020      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e18:	4b59      	ldr	r3, [pc, #356]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4a58      	ldr	r2, [pc, #352]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e30:	4b53      	ldr	r3, [pc, #332]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	4a52      	ldr	r2, [pc, #328]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e3c:	4b50      	ldr	r3, [pc, #320]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	494d      	ldr	r1, [pc, #308]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d040      	beq.n	8002edc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d107      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e62:	4b47      	ldr	r3, [pc, #284]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d115      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e07f      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d107      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7a:	4b41      	ldr	r3, [pc, #260]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d109      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e073      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8a:	4b3d      	ldr	r3, [pc, #244]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e06b      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e9a:	4b39      	ldr	r3, [pc, #228]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f023 0203 	bic.w	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4936      	ldr	r1, [pc, #216]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eac:	f7fe f978 	bl	80011a0 <HAL_GetTick>
 8002eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb2:	e00a      	b.n	8002eca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb4:	f7fe f974 	bl	80011a0 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e053      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eca:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 020c 	and.w	r2, r3, #12
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d1eb      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002edc:	4b27      	ldr	r3, [pc, #156]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d210      	bcs.n	8002f0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eea:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 020f 	bic.w	r2, r3, #15
 8002ef2:	4922      	ldr	r1, [pc, #136]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e032      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f18:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4916      	ldr	r1, [pc, #88]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d009      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f36:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	490e      	ldr	r1, [pc, #56]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f4a:	f000 f821 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	490a      	ldr	r1, [pc, #40]	; (8002f84 <HAL_RCC_ClockConfig+0x1cc>)
 8002f5c:	5ccb      	ldrb	r3, [r1, r3]
 8002f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f62:	4a09      	ldr	r2, [pc, #36]	; (8002f88 <HAL_RCC_ClockConfig+0x1d0>)
 8002f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f66:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <HAL_RCC_ClockConfig+0x1d4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe f8d4 	bl	8001118 <HAL_InitTick>

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40023c00 	.word	0x40023c00
 8002f80:	40023800 	.word	0x40023800
 8002f84:	08005560 	.word	0x08005560
 8002f88:	20000000 	.word	0x20000000
 8002f8c:	20000004 	.word	0x20000004

08002f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f94:	b094      	sub	sp, #80	; 0x50
 8002f96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fa8:	4b79      	ldr	r3, [pc, #484]	; (8003190 <HAL_RCC_GetSysClockFreq+0x200>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d00d      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x40>
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	f200 80e1 	bhi.w	800317c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d003      	beq.n	8002fca <HAL_RCC_GetSysClockFreq+0x3a>
 8002fc2:	e0db      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fc4:	4b73      	ldr	r3, [pc, #460]	; (8003194 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fc8:	e0db      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fca:	4b73      	ldr	r3, [pc, #460]	; (8003198 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fce:	e0d8      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd0:	4b6f      	ldr	r3, [pc, #444]	; (8003190 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fd8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fda:	4b6d      	ldr	r3, [pc, #436]	; (8003190 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d063      	beq.n	80030ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe6:	4b6a      	ldr	r3, [pc, #424]	; (8003190 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	099b      	lsrs	r3, r3, #6
 8002fec:	2200      	movs	r2, #0
 8002fee:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ff0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff8:	633b      	str	r3, [r7, #48]	; 0x30
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ffe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003002:	4622      	mov	r2, r4
 8003004:	462b      	mov	r3, r5
 8003006:	f04f 0000 	mov.w	r0, #0
 800300a:	f04f 0100 	mov.w	r1, #0
 800300e:	0159      	lsls	r1, r3, #5
 8003010:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003014:	0150      	lsls	r0, r2, #5
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4621      	mov	r1, r4
 800301c:	1a51      	subs	r1, r2, r1
 800301e:	6139      	str	r1, [r7, #16]
 8003020:	4629      	mov	r1, r5
 8003022:	eb63 0301 	sbc.w	r3, r3, r1
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003034:	4659      	mov	r1, fp
 8003036:	018b      	lsls	r3, r1, #6
 8003038:	4651      	mov	r1, sl
 800303a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800303e:	4651      	mov	r1, sl
 8003040:	018a      	lsls	r2, r1, #6
 8003042:	4651      	mov	r1, sl
 8003044:	ebb2 0801 	subs.w	r8, r2, r1
 8003048:	4659      	mov	r1, fp
 800304a:	eb63 0901 	sbc.w	r9, r3, r1
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800305a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800305e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003062:	4690      	mov	r8, r2
 8003064:	4699      	mov	r9, r3
 8003066:	4623      	mov	r3, r4
 8003068:	eb18 0303 	adds.w	r3, r8, r3
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	462b      	mov	r3, r5
 8003070:	eb49 0303 	adc.w	r3, r9, r3
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003082:	4629      	mov	r1, r5
 8003084:	024b      	lsls	r3, r1, #9
 8003086:	4621      	mov	r1, r4
 8003088:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800308c:	4621      	mov	r1, r4
 800308e:	024a      	lsls	r2, r1, #9
 8003090:	4610      	mov	r0, r2
 8003092:	4619      	mov	r1, r3
 8003094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003096:	2200      	movs	r2, #0
 8003098:	62bb      	str	r3, [r7, #40]	; 0x28
 800309a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800309c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030a0:	f7fd f8b2 	bl	8000208 <__aeabi_uldivmod>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4613      	mov	r3, r2
 80030aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030ac:	e058      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ae:	4b38      	ldr	r3, [pc, #224]	; (8003190 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	099b      	lsrs	r3, r3, #6
 80030b4:	2200      	movs	r2, #0
 80030b6:	4618      	mov	r0, r3
 80030b8:	4611      	mov	r1, r2
 80030ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030be:	623b      	str	r3, [r7, #32]
 80030c0:	2300      	movs	r3, #0
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
 80030c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030c8:	4642      	mov	r2, r8
 80030ca:	464b      	mov	r3, r9
 80030cc:	f04f 0000 	mov.w	r0, #0
 80030d0:	f04f 0100 	mov.w	r1, #0
 80030d4:	0159      	lsls	r1, r3, #5
 80030d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030da:	0150      	lsls	r0, r2, #5
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4641      	mov	r1, r8
 80030e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80030e6:	4649      	mov	r1, r9
 80030e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003100:	ebb2 040a 	subs.w	r4, r2, sl
 8003104:	eb63 050b 	sbc.w	r5, r3, fp
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	00eb      	lsls	r3, r5, #3
 8003112:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003116:	00e2      	lsls	r2, r4, #3
 8003118:	4614      	mov	r4, r2
 800311a:	461d      	mov	r5, r3
 800311c:	4643      	mov	r3, r8
 800311e:	18e3      	adds	r3, r4, r3
 8003120:	603b      	str	r3, [r7, #0]
 8003122:	464b      	mov	r3, r9
 8003124:	eb45 0303 	adc.w	r3, r5, r3
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003136:	4629      	mov	r1, r5
 8003138:	028b      	lsls	r3, r1, #10
 800313a:	4621      	mov	r1, r4
 800313c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003140:	4621      	mov	r1, r4
 8003142:	028a      	lsls	r2, r1, #10
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800314a:	2200      	movs	r2, #0
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	61fa      	str	r2, [r7, #28]
 8003150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003154:	f7fd f858 	bl	8000208 <__aeabi_uldivmod>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4613      	mov	r3, r2
 800315e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <HAL_RCC_GetSysClockFreq+0x200>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	0c1b      	lsrs	r3, r3, #16
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	3301      	adds	r3, #1
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003170:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003174:	fbb2 f3f3 	udiv	r3, r2, r3
 8003178:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800317a:	e002      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800317c:	4b05      	ldr	r3, [pc, #20]	; (8003194 <HAL_RCC_GetSysClockFreq+0x204>)
 800317e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003184:	4618      	mov	r0, r3
 8003186:	3750      	adds	r7, #80	; 0x50
 8003188:	46bd      	mov	sp, r7
 800318a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800
 8003194:	00f42400 	.word	0x00f42400
 8003198:	007a1200 	.word	0x007a1200

0800319c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000000 	.word	0x20000000

080031b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031b8:	f7ff fff0 	bl	800319c <HAL_RCC_GetHCLKFreq>
 80031bc:	4602      	mov	r2, r0
 80031be:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	0a9b      	lsrs	r3, r3, #10
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	4903      	ldr	r1, [pc, #12]	; (80031d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ca:	5ccb      	ldrb	r3, [r1, r3]
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40023800 	.word	0x40023800
 80031d8:	08005570 	.word	0x08005570

080031dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031e0:	f7ff ffdc 	bl	800319c <HAL_RCC_GetHCLKFreq>
 80031e4:	4602      	mov	r2, r0
 80031e6:	4b05      	ldr	r3, [pc, #20]	; (80031fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	0b5b      	lsrs	r3, r3, #13
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	4903      	ldr	r1, [pc, #12]	; (8003200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031f2:	5ccb      	ldrb	r3, [r1, r3]
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40023800 	.word	0x40023800
 8003200:	08005570 	.word	0x08005570

08003204 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d012      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800322c:	4b69      	ldr	r3, [pc, #420]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4a68      	ldr	r2, [pc, #416]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003232:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003236:	6093      	str	r3, [r2, #8]
 8003238:	4b66      	ldr	r3, [pc, #408]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003240:	4964      	ldr	r1, [pc, #400]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003242:	4313      	orrs	r3, r2
 8003244:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800324e:	2301      	movs	r3, #1
 8003250:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d017      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800325e:	4b5d      	ldr	r3, [pc, #372]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003264:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326c:	4959      	ldr	r1, [pc, #356]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800327c:	d101      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800327e:	2301      	movs	r3, #1
 8003280:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800328a:	2301      	movs	r3, #1
 800328c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d017      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800329a:	4b4e      	ldr	r3, [pc, #312]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800329c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	494a      	ldr	r1, [pc, #296]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b8:	d101      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80032ba:	2301      	movs	r3, #1
 80032bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80032c6:	2301      	movs	r3, #1
 80032c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80032d6:	2301      	movs	r3, #1
 80032d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0320 	and.w	r3, r3, #32
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 808b 	beq.w	80033fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032e8:	4b3a      	ldr	r3, [pc, #232]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	4a39      	ldr	r2, [pc, #228]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f2:	6413      	str	r3, [r2, #64]	; 0x40
 80032f4:	4b37      	ldr	r3, [pc, #220]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003300:	4b35      	ldr	r3, [pc, #212]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a34      	ldr	r2, [pc, #208]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800330c:	f7fd ff48 	bl	80011a0 <HAL_GetTick>
 8003310:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003314:	f7fd ff44 	bl	80011a0 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	; 0x64
 8003320:	d901      	bls.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e357      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003326:	4b2c      	ldr	r3, [pc, #176]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003332:	4b28      	ldr	r3, [pc, #160]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800333a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d035      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	429a      	cmp	r2, r3
 800334e:	d02e      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003350:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003358:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800335a:	4b1e      	ldr	r3, [pc, #120]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335e:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003364:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003366:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	4a1a      	ldr	r2, [pc, #104]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003370:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003372:	4a18      	ldr	r2, [pc, #96]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003378:	4b16      	ldr	r3, [pc, #88]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b01      	cmp	r3, #1
 8003382:	d114      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7fd ff0c 	bl	80011a0 <HAL_GetTick>
 8003388:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338a:	e00a      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800338c:	f7fd ff08 	bl	80011a0 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f241 3288 	movw	r2, #5000	; 0x1388
 800339a:	4293      	cmp	r3, r2
 800339c:	d901      	bls.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e319      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a2:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0ee      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ba:	d111      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80033bc:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033c8:	4b04      	ldr	r3, [pc, #16]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033ca:	400b      	ands	r3, r1
 80033cc:	4901      	ldr	r1, [pc, #4]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]
 80033d2:	e00b      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40007000 	.word	0x40007000
 80033dc:	0ffffcff 	.word	0x0ffffcff
 80033e0:	4baa      	ldr	r3, [pc, #680]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4aa9      	ldr	r2, [pc, #676]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033ea:	6093      	str	r3, [r2, #8]
 80033ec:	4ba7      	ldr	r3, [pc, #668]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f8:	49a4      	ldr	r1, [pc, #656]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b00      	cmp	r3, #0
 8003408:	d010      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800340a:	4ba0      	ldr	r3, [pc, #640]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800340c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003410:	4a9e      	ldr	r2, [pc, #632]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003416:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800341a:	4b9c      	ldr	r3, [pc, #624]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800341c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	4999      	ldr	r1, [pc, #612]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003438:	4b94      	ldr	r3, [pc, #592]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003446:	4991      	ldr	r1, [pc, #580]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800345a:	4b8c      	ldr	r3, [pc, #560]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003460:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003468:	4988      	ldr	r1, [pc, #544]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800347c:	4b83      	ldr	r3, [pc, #524]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003482:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800348a:	4980      	ldr	r1, [pc, #512]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800349e:	4b7b      	ldr	r3, [pc, #492]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ac:	4977      	ldr	r1, [pc, #476]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034c0:	4b72      	ldr	r3, [pc, #456]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	f023 0203 	bic.w	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ce:	496f      	ldr	r1, [pc, #444]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034e2:	4b6a      	ldr	r3, [pc, #424]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	f023 020c 	bic.w	r2, r3, #12
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f0:	4966      	ldr	r1, [pc, #408]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003504:	4b61      	ldr	r3, [pc, #388]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003512:	495e      	ldr	r1, [pc, #376]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003526:	4b59      	ldr	r3, [pc, #356]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003534:	4955      	ldr	r1, [pc, #340]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003548:	4b50      	ldr	r3, [pc, #320]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003556:	494d      	ldr	r1, [pc, #308]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800356a:	4b48      	ldr	r3, [pc, #288]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800356c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003570:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	4944      	ldr	r1, [pc, #272]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800358c:	4b3f      	ldr	r3, [pc, #252]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003592:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359a:	493c      	ldr	r1, [pc, #240]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80035ae:	4b37      	ldr	r3, [pc, #220]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035bc:	4933      	ldr	r1, [pc, #204]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035d0:	4b2e      	ldr	r3, [pc, #184]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035de:	492b      	ldr	r1, [pc, #172]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d011      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80035f2:	4b26      	ldr	r3, [pc, #152]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003600:	4922      	ldr	r1, [pc, #136]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800360c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003610:	d101      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003612:	2301      	movs	r3, #1
 8003614:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003622:	2301      	movs	r3, #1
 8003624:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003632:	4b16      	ldr	r3, [pc, #88]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003638:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003640:	4912      	ldr	r1, [pc, #72]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00b      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003654:	4b0d      	ldr	r3, [pc, #52]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003664:	4909      	ldr	r1, [pc, #36]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d006      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80d9 	beq.w	8003832 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003680:	4b02      	ldr	r3, [pc, #8]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a01      	ldr	r2, [pc, #4]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003686:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800368a:	e001      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800368c:	40023800 	.word	0x40023800
 8003690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003692:	f7fd fd85 	bl	80011a0 <HAL_GetTick>
 8003696:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003698:	e008      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800369a:	f7fd fd81 	bl	80011a0 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b64      	cmp	r3, #100	; 0x64
 80036a6:	d901      	bls.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e194      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036ac:	4b6c      	ldr	r3, [pc, #432]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f0      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d021      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d11d      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036cc:	4b64      	ldr	r3, [pc, #400]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d2:	0c1b      	lsrs	r3, r3, #16
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036da:	4b61      	ldr	r3, [pc, #388]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036e0:	0e1b      	lsrs	r3, r3, #24
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	019a      	lsls	r2, r3, #6
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	041b      	lsls	r3, r3, #16
 80036f2:	431a      	orrs	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	061b      	lsls	r3, r3, #24
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	071b      	lsls	r3, r3, #28
 8003700:	4957      	ldr	r1, [pc, #348]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d004      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003718:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003726:	2b00      	cmp	r3, #0
 8003728:	d02e      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003732:	d129      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003734:	4b4a      	ldr	r3, [pc, #296]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800373a:	0c1b      	lsrs	r3, r3, #16
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003742:	4b47      	ldr	r3, [pc, #284]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003748:	0f1b      	lsrs	r3, r3, #28
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	019a      	lsls	r2, r3, #6
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	041b      	lsls	r3, r3, #16
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	061b      	lsls	r3, r3, #24
 8003762:	431a      	orrs	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	071b      	lsls	r3, r3, #28
 8003768:	493d      	ldr	r1, [pc, #244]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003770:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003776:	f023 021f 	bic.w	r2, r3, #31
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	3b01      	subs	r3, #1
 8003780:	4937      	ldr	r1, [pc, #220]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01d      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003794:	4b32      	ldr	r3, [pc, #200]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800379a:	0e1b      	lsrs	r3, r3, #24
 800379c:	f003 030f 	and.w	r3, r3, #15
 80037a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037a2:	4b2f      	ldr	r3, [pc, #188]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a8:	0f1b      	lsrs	r3, r3, #28
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	019a      	lsls	r2, r3, #6
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	041b      	lsls	r3, r3, #16
 80037bc:	431a      	orrs	r2, r3
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	061b      	lsls	r3, r3, #24
 80037c2:	431a      	orrs	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	071b      	lsls	r3, r3, #28
 80037c8:	4925      	ldr	r1, [pc, #148]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d011      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	019a      	lsls	r2, r3, #6
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	041b      	lsls	r3, r3, #16
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	061b      	lsls	r3, r3, #24
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	071b      	lsls	r3, r3, #28
 80037f8:	4919      	ldr	r1, [pc, #100]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003800:	4b17      	ldr	r3, [pc, #92]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a16      	ldr	r2, [pc, #88]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800380a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800380c:	f7fd fcc8 	bl	80011a0 <HAL_GetTick>
 8003810:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003814:	f7fd fcc4 	bl	80011a0 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	; 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e0d7      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003826:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	2b01      	cmp	r3, #1
 8003836:	f040 80cd 	bne.w	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800383a:	4b09      	ldr	r3, [pc, #36]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a08      	ldr	r2, [pc, #32]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003844:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003846:	f7fd fcab 	bl	80011a0 <HAL_GetTick>
 800384a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800384c:	e00a      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800384e:	f7fd fca7 	bl	80011a0 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b64      	cmp	r3, #100	; 0x64
 800385a:	d903      	bls.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e0ba      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003860:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003864:	4b5e      	ldr	r3, [pc, #376]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800386c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003870:	d0ed      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800388e:	2b00      	cmp	r3, #0
 8003890:	d02e      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d12a      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800389a:	4b51      	ldr	r3, [pc, #324]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a0:	0c1b      	lsrs	r3, r3, #16
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038a8:	4b4d      	ldr	r3, [pc, #308]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ae:	0f1b      	lsrs	r3, r3, #28
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	019a      	lsls	r2, r3, #6
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	041b      	lsls	r3, r3, #16
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	061b      	lsls	r3, r3, #24
 80038c8:	431a      	orrs	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	071b      	lsls	r3, r3, #28
 80038ce:	4944      	ldr	r1, [pc, #272]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038d6:	4b42      	ldr	r3, [pc, #264]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	3b01      	subs	r3, #1
 80038e6:	021b      	lsls	r3, r3, #8
 80038e8:	493d      	ldr	r1, [pc, #244]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d022      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003904:	d11d      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003906:	4b36      	ldr	r3, [pc, #216]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390c:	0e1b      	lsrs	r3, r3, #24
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003914:	4b32      	ldr	r3, [pc, #200]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391a:	0f1b      	lsrs	r3, r3, #28
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	019a      	lsls	r2, r3, #6
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	041b      	lsls	r3, r3, #16
 800392e:	431a      	orrs	r2, r3
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	061b      	lsls	r3, r3, #24
 8003934:	431a      	orrs	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	071b      	lsls	r3, r3, #28
 800393a:	4929      	ldr	r1, [pc, #164]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800393c:	4313      	orrs	r3, r2
 800393e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d028      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800394e:	4b24      	ldr	r3, [pc, #144]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003954:	0e1b      	lsrs	r3, r3, #24
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800395c:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003962:	0c1b      	lsrs	r3, r3, #16
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	019a      	lsls	r2, r3, #6
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	041b      	lsls	r3, r3, #16
 8003974:	431a      	orrs	r2, r3
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	061b      	lsls	r3, r3, #24
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	071b      	lsls	r3, r3, #28
 8003982:	4917      	ldr	r1, [pc, #92]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800398a:	4b15      	ldr	r3, [pc, #84]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800398c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003990:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	4911      	ldr	r1, [pc, #68]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039a0:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a0e      	ldr	r2, [pc, #56]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ac:	f7fd fbf8 	bl	80011a0 <HAL_GetTick>
 80039b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039b4:	f7fd fbf4 	bl	80011a0 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	; 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e007      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039d2:	d1ef      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3720      	adds	r7, #32
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800

080039e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80039f4:	2300      	movs	r3, #0
 80039f6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a02:	f040 808d 	bne.w	8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8003a06:	4b93      	ldr	r3, [pc, #588]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a0c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003a14:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a1c:	d07c      	beq.n	8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a24:	d87b      	bhi.n	8003b1e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d004      	beq.n	8003a36 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a32:	d039      	beq.n	8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8003a34:	e073      	b.n	8003b1e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003a36:	4b87      	ldr	r3, [pc, #540]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d108      	bne.n	8003a54 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a42:	4b84      	ldr	r3, [pc, #528]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a4a:	4a83      	ldr	r2, [pc, #524]	; (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	e007      	b.n	8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003a54:	4b7f      	ldr	r3, [pc, #508]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a5c:	4a7f      	ldr	r2, [pc, #508]	; (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a62:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003a64:	4b7b      	ldr	r3, [pc, #492]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6a:	0e1b      	lsrs	r3, r3, #24
 8003a6c:	f003 030f 	and.w	r3, r3, #15
 8003a70:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003a72:	4b78      	ldr	r3, [pc, #480]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a78:	099b      	lsrs	r3, r3, #6
 8003a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	fb03 f202 	mul.w	r2, r3, r2
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8003a8c:	4b71      	ldr	r3, [pc, #452]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a92:	0a1b      	lsrs	r3, r3, #8
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	3301      	adds	r3, #1
 8003a9a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa4:	617b      	str	r3, [r7, #20]
        break;
 8003aa6:	e03b      	b.n	8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003aa8:	4b6a      	ldr	r3, [pc, #424]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d108      	bne.n	8003ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ab4:	4b67      	ldr	r3, [pc, #412]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003abc:	4a66      	ldr	r2, [pc, #408]	; (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	e007      	b.n	8003ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003ac6:	4b63      	ldr	r3, [pc, #396]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ace:	4a63      	ldr	r2, [pc, #396]	; (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8003ad6:	4b5f      	ldr	r3, [pc, #380]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003adc:	0e1b      	lsrs	r3, r3, #24
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8003ae4:	4b5b      	ldr	r3, [pc, #364]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aea:	099b      	lsrs	r3, r3, #6
 8003aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	fb03 f202 	mul.w	r2, r3, r2
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8003afe:	4b55      	ldr	r3, [pc, #340]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b04:	f003 031f 	and.w	r3, r3, #31
 8003b08:	3301      	adds	r3, #1
 8003b0a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b14:	617b      	str	r3, [r7, #20]
        break;
 8003b16:	e003      	b.n	8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8003b18:	4b51      	ldr	r3, [pc, #324]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003b1a:	617b      	str	r3, [r7, #20]
        break;
 8003b1c:	e000      	b.n	8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8003b1e:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b26:	f040 808d 	bne.w	8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8003b2a:	4b4a      	ldr	r3, [pc, #296]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b30:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003b38:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b40:	d07c      	beq.n	8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b48:	d87b      	bhi.n	8003c42 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d004      	beq.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b56:	d039      	beq.n	8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8003b58:	e073      	b.n	8003c42 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003b5a:	4b3e      	ldr	r3, [pc, #248]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d108      	bne.n	8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b66:	4b3b      	ldr	r3, [pc, #236]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b6e:	4a3a      	ldr	r2, [pc, #232]	; (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	e007      	b.n	8003b88 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003b78:	4b36      	ldr	r3, [pc, #216]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b80:	4a36      	ldr	r2, [pc, #216]	; (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b86:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003b88:	4b32      	ldr	r3, [pc, #200]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8e:	0e1b      	lsrs	r3, r3, #24
 8003b90:	f003 030f 	and.w	r3, r3, #15
 8003b94:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003b96:	4b2f      	ldr	r3, [pc, #188]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9c:	099b      	lsrs	r3, r3, #6
 8003b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	fb03 f202 	mul.w	r2, r3, r2
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bae:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8003bb0:	4b28      	ldr	r3, [pc, #160]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb6:	0a1b      	lsrs	r3, r3, #8
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc8:	617b      	str	r3, [r7, #20]
        break;
 8003bca:	e03b      	b.n	8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003bcc:	4b21      	ldr	r3, [pc, #132]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d108      	bne.n	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003bd8:	4b1e      	ldr	r3, [pc, #120]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be0:	4a1d      	ldr	r2, [pc, #116]	; (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	e007      	b.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003bea:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bf2:	4a1a      	ldr	r2, [pc, #104]	; (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8003bfa:	4b16      	ldr	r3, [pc, #88]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c00:	0e1b      	lsrs	r3, r3, #24
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8003c08:	4b12      	ldr	r3, [pc, #72]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c0e:	099b      	lsrs	r3, r3, #6
 8003c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	fb03 f202 	mul.w	r2, r3, r2
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c20:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8003c22:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c38:	617b      	str	r3, [r7, #20]
        break;
 8003c3a:	e003      	b.n	8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8003c3c:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003c3e:	617b      	str	r3, [r7, #20]
        break;
 8003c40:	e000      	b.n	8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8003c42:	bf00      	nop
      }
    }
  }

  return frequency;
 8003c44:	697b      	ldr	r3, [r7, #20]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800
 8003c58:	00f42400 	.word	0x00f42400
 8003c5c:	007a1200 	.word	0x007a1200
 8003c60:	00bb8000 	.word	0x00bb8000

08003c64 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d904      	bls.n	8003c86 <HAL_SAI_InitProtocol+0x22>
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	3b03      	subs	r3, #3
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d812      	bhi.n	8003caa <HAL_SAI_InitProtocol+0x46>
 8003c84:	e008      	b.n	8003c98 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	68b9      	ldr	r1, [r7, #8]
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 fb35 	bl	80042fc <SAI_InitI2S>
 8003c92:	4603      	mov	r3, r0
 8003c94:	75fb      	strb	r3, [r7, #23]
      break;
 8003c96:	e00b      	b.n	8003cb0 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68b9      	ldr	r1, [r7, #8]
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 fbda 	bl	8004458 <SAI_InitPCM>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca8:	e002      	b.n	8003cb0 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	75fb      	strb	r3, [r7, #23]
      break;
 8003cae:	bf00      	nop
  }

  if (status == HAL_OK)
 8003cb0:	7dfb      	ldrb	r3, [r7, #23]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d104      	bne.n	8003cc0 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 f808 	bl	8003ccc <HAL_SAI_Init>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e156      	b.n	8003f98 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fd f932 	bl	8000f68 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 fc71 	bl	80045f4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d00c      	beq.n	8003d34 <HAL_SAI_Init+0x68>
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d80d      	bhi.n	8003d3a <HAL_SAI_Init+0x6e>
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <HAL_SAI_Init+0x5c>
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d003      	beq.n	8003d2e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8003d26:	e008      	b.n	8003d3a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61fb      	str	r3, [r7, #28]
      break;
 8003d2c:	e006      	b.n	8003d3c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8003d2e:	2310      	movs	r3, #16
 8003d30:	61fb      	str	r3, [r7, #28]
      break;
 8003d32:	e003      	b.n	8003d3c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8003d34:	2320      	movs	r3, #32
 8003d36:	61fb      	str	r3, [r7, #28]
      break;
 8003d38:	e000      	b.n	8003d3c <HAL_SAI_Init+0x70>
      break;
 8003d3a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d81e      	bhi.n	8003d82 <HAL_SAI_Init+0xb6>
 8003d44:	a201      	add	r2, pc, #4	; (adr r2, 8003d4c <HAL_SAI_Init+0x80>)
 8003d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4a:	bf00      	nop
 8003d4c:	08003d5d 	.word	0x08003d5d
 8003d50:	08003d63 	.word	0x08003d63
 8003d54:	08003d6b 	.word	0x08003d6b
 8003d58:	08003d73 	.word	0x08003d73
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]
    }
    break;
 8003d60:	e010      	b.n	8003d84 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8003d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d66:	617b      	str	r3, [r7, #20]
    }
    break;
 8003d68:	e00c      	b.n	8003d84 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003d6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d6e:	617b      	str	r3, [r7, #20]
    }
    break;
 8003d70:	e008      	b.n	8003d84 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003d72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d76:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	61fb      	str	r3, [r7, #28]
    }
    break;
 8003d80:	e000      	b.n	8003d84 <HAL_SAI_Init+0xb8>
    default:
      break;
 8003d82:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a85      	ldr	r2, [pc, #532]	; (8003fa0 <HAL_SAI_Init+0x2d4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d004      	beq.n	8003d98 <HAL_SAI_Init+0xcc>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a84      	ldr	r2, [pc, #528]	; (8003fa4 <HAL_SAI_Init+0x2d8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d103      	bne.n	8003da0 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8003d98:	4a83      	ldr	r2, [pc, #524]	; (8003fa8 <HAL_SAI_Init+0x2dc>)
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e002      	b.n	8003da6 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8003da0:	4a82      	ldr	r2, [pc, #520]	; (8003fac <HAL_SAI_Init+0x2e0>)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d04c      	beq.n	8003e48 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a7a      	ldr	r2, [pc, #488]	; (8003fa0 <HAL_SAI_Init+0x2d4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d004      	beq.n	8003dc6 <HAL_SAI_Init+0xfa>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a78      	ldr	r2, [pc, #480]	; (8003fa4 <HAL_SAI_Init+0x2d8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d104      	bne.n	8003dd0 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003dc6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003dca:	f7ff fe0b 	bl	80039e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003dce:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a76      	ldr	r2, [pc, #472]	; (8003fb0 <HAL_SAI_Init+0x2e4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d004      	beq.n	8003de4 <HAL_SAI_Init+0x118>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a75      	ldr	r2, [pc, #468]	; (8003fb4 <HAL_SAI_Init+0x2e8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d104      	bne.n	8003dee <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8003de4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003de8:	f7ff fdfc 	bl	80039e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003dec:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	461a      	mov	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	025b      	lsls	r3, r3, #9
 8003e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e04:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4a6b      	ldr	r2, [pc, #428]	; (8003fb8 <HAL_SAI_Init+0x2ec>)
 8003e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0e:	08da      	lsrs	r2, r3, #3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8003e14:	68f9      	ldr	r1, [r7, #12]
 8003e16:	4b68      	ldr	r3, [pc, #416]	; (8003fb8 <HAL_SAI_Init+0x2ec>)
 8003e18:	fba3 2301 	umull	r2, r3, r3, r1
 8003e1c:	08da      	lsrs	r2, r3, #3
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	1aca      	subs	r2, r1, r3
 8003e28:	2a08      	cmp	r2, #8
 8003e2a:	d904      	bls.n	8003e36 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d104      	bne.n	8003e48 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	085a      	lsrs	r2, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_SAI_Init+0x18c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d109      	bne.n	8003e6c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_SAI_Init+0x198>
 8003e60:	2300      	movs	r3, #0
 8003e62:	e001      	b.n	8003e68 <HAL_SAI_Init+0x19c>
 8003e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e68:	61bb      	str	r3, [r7, #24]
 8003e6a:	e008      	b.n	8003e7e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d102      	bne.n	8003e7a <HAL_SAI_Init+0x1ae>
 8003e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e78:	e000      	b.n	8003e7c <HAL_SAI_Init+0x1b0>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6819      	ldr	r1, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	4b4c      	ldr	r3, [pc, #304]	; (8003fbc <HAL_SAI_Init+0x2f0>)
 8003e8a:	400b      	ands	r3, r1
 8003e8c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6819      	ldr	r1, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003ea2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8003eb6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003ec2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	051b      	lsls	r3, r3, #20
 8003eca:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6859      	ldr	r1, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	4b38      	ldr	r3, [pc, #224]	; (8003fc0 <HAL_SAI_Init+0x2f4>)
 8003ee0:	400b      	ands	r3, r1
 8003ee2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6859      	ldr	r1, [r3, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6899      	ldr	r1, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4b2d      	ldr	r3, [pc, #180]	; (8003fc4 <HAL_SAI_Init+0x2f8>)
 8003f0e:	400b      	ands	r3, r1
 8003f10:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6899      	ldr	r1, [r3, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8003f22:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8003f28:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8003f2e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f34:	3b01      	subs	r3, #1
 8003f36:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8003f38:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68d9      	ldr	r1, [r3, #12]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8003f50:	400b      	ands	r3, r1
 8003f52:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68d9      	ldr	r1, [r3, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f62:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f68:	041b      	lsls	r3, r3, #16
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f70:	3b01      	subs	r3, #1
 8003f72:	021b      	lsls	r3, r3, #8
 8003f74:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3720      	adds	r7, #32
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40015804 	.word	0x40015804
 8003fa4:	40015824 	.word	0x40015824
 8003fa8:	40015800 	.word	0x40015800
 8003fac:	40015c00 	.word	0x40015c00
 8003fb0:	40015c04 	.word	0x40015c04
 8003fb4:	40015c24 	.word	0x40015c24
 8003fb8:	cccccccd 	.word	0xcccccccd
 8003fbc:	ff05c010 	.word	0xff05c010
 8003fc0:	ffff1ff0 	.word	0xffff1ff0
 8003fc4:	fff88000 	.word	0xfff88000

08003fc8 <HAL_SAI_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8003fd8:	f7fd f8e2 	bl	80011a0 <HAL_GetTick>
 8003fdc:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <HAL_SAI_Transmit+0x22>
 8003fe4:	88fb      	ldrh	r3, [r7, #6]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_SAI_Transmit+0x26>
  {
    return  HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e0b6      	b.n	800415c <HAL_SAI_Transmit+0x194>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	f040 80af 	bne.w	800415a <HAL_SAI_Transmit+0x192>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_SAI_Transmit+0x42>
 8004006:	2302      	movs	r3, #2
 8004008:	e0a8      	b.n	800415c <HAL_SAI_Transmit+0x194>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->XferSize = Size;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	88fa      	ldrh	r2, [r7, #6]
 8004016:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	88fa      	ldrh	r2, [r7, #6]
 800401e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->pBuffPtr = pData;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2212      	movs	r2, #18
 800402c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d17a      	bne.n	800413c <HAL_SAI_Transmit+0x174>
    {
      /* fill the fifo with data before to enabled the SAI */
      SAI_FillFifo(hsai);
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 fa86 	bl	8004558 <SAI_FillFifo>
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800405a:	601a      	str	r2, [r3, #0]
    }

    while (hsai->XferCount > 0)
 800405c:	e06e      	b.n	800413c <HAL_SAI_Transmit+0x174>
    {
      /* Write data if the FIFO is not full */
      if ((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800406c:	d035      	beq.n	80040da <HAL_SAI_Transmit+0x112>
      {
        if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004072:	2b40      	cmp	r3, #64	; 0x40
 8004074:	d10d      	bne.n	8004092 <HAL_SAI_Transmit+0xca>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <HAL_SAI_Transmit+0xca>
        {
          hsai->Instance->DR = (*hsai->pBuffPtr++);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004082:	1c59      	adds	r1, r3, #1
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	6651      	str	r1, [r2, #100]	; 0x64
 8004088:	781a      	ldrb	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	61da      	str	r2, [r3, #28]
 8004090:	e01a      	b.n	80040c8 <HAL_SAI_Transmit+0x100>
        }
        else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004096:	2b80      	cmp	r3, #128	; 0x80
 8004098:	d80b      	bhi.n	80040b2 <HAL_SAI_Transmit+0xea>
        {
          hsai->Instance->DR = *((uint16_t *)hsai->pBuffPtr);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800409e:	881a      	ldrh	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr += 2;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040aa:	1c9a      	adds	r2, r3, #2
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	665a      	str	r2, [r3, #100]	; 0x64
 80040b0:	e00a      	b.n	80040c8 <HAL_SAI_Transmit+0x100>
        }
        else
        {
          hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr += 4;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040c2:	1d1a      	adds	r2, r3, #4
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	665a      	str	r2, [r3, #100]	; 0x64
        }
        hsai->XferCount--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80040d8:	e030      	b.n	800413c <HAL_SAI_Transmit+0x174>
      }
      else
      {
        /* Check for the Timeout */
        if ((Timeout != HAL_MAX_DELAY) && ((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout)))
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d02c      	beq.n	800413c <HAL_SAI_Transmit+0x174>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d007      	beq.n	80040f8 <HAL_SAI_Transmit+0x130>
 80040e8:	f7fd f85a 	bl	80011a0 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d221      	bcs.n	800413c <HAL_SAI_Transmit+0x174>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f04f 32ff 	mov.w	r2, #4294967295
 8004110:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          SAI_Disable(hsai);
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 fa6e 	bl	80045f4 <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0208 	orr.w	r2, r2, #8
 8004126:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e00f      	b.n	800415c <HAL_SAI_Transmit+0x194>
    while (hsai->XferCount > 0)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004142:	2b00      	cmp	r3, #0
 8004144:	d18b      	bne.n	800405e <HAL_SAI_Transmit+0x96>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	e000      	b.n	800415c <HAL_SAI_Transmit+0x194>
  }
  else
  {
    return HAL_BUSY;
 800415a:	2302      	movs	r3, #2
  }
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_SAI_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	4613      	mov	r3, r2
 8004172:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8004174:	f7fd f814 	bl	80011a0 <HAL_GetTick>
 8004178:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <HAL_SAI_Receive+0x22>
 8004180:	88fb      	ldrh	r3, [r7, #6]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_SAI_Receive+0x26>
  {
    return  HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e0b4      	b.n	80042f4 <HAL_SAI_Receive+0x190>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b01      	cmp	r3, #1
 8004194:	f040 80ad 	bne.w	80042f2 <HAL_SAI_Receive+0x18e>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_SAI_Receive+0x42>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e0a6      	b.n	80042f4 <HAL_SAI_Receive+0x190>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	88fa      	ldrh	r2, [r7, #6]
 80041b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	88fa      	ldrh	r2, [r7, #6]
 80041c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2222      	movs	r2, #34	; 0x22
 80041c8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d178      	bne.n	80042d4 <HAL_SAI_Receive+0x170>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80041f0:	601a      	str	r2, [r3, #0]
    }

    /* Receive data */
    while (hsai->XferCount > 0)
 80041f2:	e06f      	b.n	80042d4 <HAL_SAI_Receive+0x170>
    {
      if ((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_EMPTY)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d037      	beq.n	8004272 <HAL_SAI_Receive+0x10e>
      {
        if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004206:	2b40      	cmp	r3, #64	; 0x40
 8004208:	d10e      	bne.n	8004228 <HAL_SAI_Receive+0xc4>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10a      	bne.n	8004228 <HAL_SAI_Receive+0xc4>
        {
          (*hsai->pBuffPtr++) = hsai->Instance->DR;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69d8      	ldr	r0, [r3, #28]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800421c:	1c59      	adds	r1, r3, #1
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	6651      	str	r1, [r2, #100]	; 0x64
 8004222:	b2c2      	uxtb	r2, r0
 8004224:	701a      	strb	r2, [r3, #0]
 8004226:	e01b      	b.n	8004260 <HAL_SAI_Receive+0xfc>
        }
        else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422c:	2b80      	cmp	r3, #128	; 0x80
 800422e:	d80c      	bhi.n	800424a <HAL_SAI_Receive+0xe6>
        {
          *((uint16_t *)hsai->pBuffPtr) = hsai->Instance->DR;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69da      	ldr	r2, [r3, #28]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800423a:	b292      	uxth	r2, r2
 800423c:	801a      	strh	r2, [r3, #0]
          hsai->pBuffPtr += 2;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004242:	1c9a      	adds	r2, r3, #2
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	665a      	str	r2, [r3, #100]	; 0x64
 8004248:	e00a      	b.n	8004260 <HAL_SAI_Receive+0xfc>
        }
        else
        {
          *((uint32_t *)hsai->pBuffPtr) = hsai->Instance->DR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004252:	69d2      	ldr	r2, [r2, #28]
 8004254:	601a      	str	r2, [r3, #0]
          hsai->pBuffPtr += 4;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800425a:	1d1a      	adds	r2, r3, #4
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        hsai->XferCount--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004270:	e030      	b.n	80042d4 <HAL_SAI_Receive+0x170>
      }
      else
      {
        /* Check for the Timeout */
        if ((Timeout != HAL_MAX_DELAY) && ((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout)))
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004278:	d02c      	beq.n	80042d4 <HAL_SAI_Receive+0x170>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d007      	beq.n	8004290 <HAL_SAI_Receive+0x12c>
 8004280:	f7fc ff8e 	bl	80011a0 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d221      	bcs.n	80042d4 <HAL_SAI_Receive+0x170>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004296:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f04f 32ff 	mov.w	r2, #4294967295
 80042a8:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          SAI_Disable(hsai);
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 f9a2 	bl	80045f4 <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0208 	orr.w	r2, r2, #8
 80042be:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e00f      	b.n	80042f4 <HAL_SAI_Receive+0x190>
    while (hsai->XferCount > 0)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d18a      	bne.n	80041f4 <HAL_SAI_Receive+0x90>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e000      	b.n	80042f4 <HAL_SAI_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 80042f2:	2302      	movs	r3, #2
  }
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <SAI_InitI2S+0x2a>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b02      	cmp	r3, #2
 8004324:	d103      	bne.n	800432e <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	63da      	str	r2, [r3, #60]	; 0x3c
 800432c:	e002      	b.n	8004334 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800433a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004342:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1) != 0)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e076      	b.n	800444c <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d107      	bne.n	8004374 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004370:	651a      	str	r2, [r3, #80]	; 0x50
 8004372:	e006      	b.n	8004382 <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800437a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Frame definition */
  switch (datasize)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b03      	cmp	r3, #3
 8004386:	d84f      	bhi.n	8004428 <SAI_InitI2S+0x12c>
 8004388:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <SAI_InitI2S+0x94>)
 800438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438e:	bf00      	nop
 8004390:	080043a1 	.word	0x080043a1
 8004394:	080043c3 	.word	0x080043c3
 8004398:	080043e5 	.word	0x080043e5
 800439c:	08004407 	.word	0x08004407
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2280      	movs	r2, #128	; 0x80
 80043a4:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	085b      	lsrs	r3, r3, #1
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	085b      	lsrs	r3, r3, #1
 80043b4:	011a      	lsls	r2, r3, #4
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2240      	movs	r2, #64	; 0x40
 80043be:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80043c0:	e034      	b.n	800442c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2280      	movs	r2, #128	; 0x80
 80043c6:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	085b      	lsrs	r3, r3, #1
 80043cc:	019a      	lsls	r2, r3, #6
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2280      	movs	r2, #128	; 0x80
 80043e0:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80043e2:	e023      	b.n	800442c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	22c0      	movs	r2, #192	; 0xc0
 80043e8:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	085b      	lsrs	r3, r3, #1
 80043ee:	019a      	lsls	r2, r3, #6
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	085b      	lsrs	r3, r3, #1
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2280      	movs	r2, #128	; 0x80
 8004402:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004404:	e012      	b.n	800442c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	22e0      	movs	r2, #224	; 0xe0
 800440a:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	085b      	lsrs	r3, r3, #1
 8004410:	019a      	lsls	r2, r3, #6
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	085b      	lsrs	r3, r3, #1
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2280      	movs	r2, #128	; 0x80
 8004424:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004426:	e001      	b.n	800442c <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e00f      	b.n	800444c <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d10b      	bne.n	800444a <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d102      	bne.n	800443e <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2210      	movs	r2, #16
 800443c:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b02      	cmp	r3, #2
 8004442:	d102      	bne.n	800444a <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2208      	movs	r2, #8
 8004448:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <SAI_InitPCM+0x2a>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d103      	bne.n	800448a <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	63da      	str	r2, [r3, #60]	; 0x3c
 8004488:	e002      	b.n	8004490 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800449c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80044a4:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044b8:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d103      	bne.n	80044c8 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	645a      	str	r2, [r3, #68]	; 0x44
 80044c6:	e002      	b.n	80044ce <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	220d      	movs	r2, #13
 80044cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  switch (datasize)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d837      	bhi.n	8004544 <SAI_InitPCM+0xec>
 80044d4:	a201      	add	r2, pc, #4	; (adr r2, 80044dc <SAI_InitPCM+0x84>)
 80044d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044da:	bf00      	nop
 80044dc:	080044ed 	.word	0x080044ed
 80044e0:	08004503 	.word	0x08004503
 80044e4:	08004519 	.word	0x08004519
 80044e8:	0800452f 	.word	0x0800452f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2280      	movs	r2, #128	; 0x80
 80044f0:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	011a      	lsls	r2, r3, #4
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2240      	movs	r2, #64	; 0x40
 80044fe:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004500:	e022      	b.n	8004548 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2280      	movs	r2, #128	; 0x80
 8004506:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2280      	movs	r2, #128	; 0x80
 8004514:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004516:	e017      	b.n	8004548 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	22c0      	movs	r2, #192	; 0xc0
 800451c:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2280      	movs	r2, #128	; 0x80
 800452a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800452c:	e00c      	b.n	8004548 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	22e0      	movs	r2, #224	; 0xe0
 8004532:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2280      	movs	r2, #128	; 0x80
 8004540:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004542:	e001      	b.n	8004548 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop

08004558 <SAI_FillFifo>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static void SAI_FillFifo(SAI_HandleTypeDef *hsai)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* fill the fifo with data before to enabled the SAI */
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 8004560:	e034      	b.n	80045cc <SAI_FillFifo+0x74>
  {
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	d10d      	bne.n	8004586 <SAI_FillFifo+0x2e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <SAI_FillFifo+0x2e>
    {
      hsai->Instance->DR = (*hsai->pBuffPtr++);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004576:	1c59      	adds	r1, r3, #1
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6651      	str	r1, [r2, #100]	; 0x64
 800457c:	781a      	ldrb	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	61da      	str	r2, [r3, #28]
 8004584:	e01a      	b.n	80045bc <SAI_FillFifo+0x64>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458a:	2b80      	cmp	r3, #128	; 0x80
 800458c:	d80b      	bhi.n	80045a6 <SAI_FillFifo+0x4e>
    {
      hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6812      	ldr	r2, [r2, #0]
 8004598:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr += 2;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800459e:	1c9a      	adds	r2, r3, #2
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	665a      	str	r2, [r3, #100]	; 0x64
 80045a4:	e00a      	b.n	80045bc <SAI_FillFifo+0x64>
    }
    else
    {
      hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6812      	ldr	r2, [r2, #0]
 80045b0:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr += 4;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045b6:	1d1a      	adds	r2, r3, #4
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	665a      	str	r2, [r3, #100]	; 0x64
    }
    hsai->XferCount--;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80045d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045da:	d004      	beq.n	80045e6 <SAI_FillFifo+0x8e>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1bd      	bne.n	8004562 <SAI_FillFifo+0xa>
  }
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
	...

080045f4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80045fc:	4b17      	ldr	r3, [pc, #92]	; (800465c <SAI_Disable+0x68>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a17      	ldr	r2, [pc, #92]	; (8004660 <SAI_Disable+0x6c>)
 8004602:	fba2 2303 	umull	r2, r3, r2, r3
 8004606:	0b1b      	lsrs	r3, r3, #12
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800461e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	1e5a      	subs	r2, r3, #1
 8004624:	60fa      	str	r2, [r7, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10a      	bne.n	8004640 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004630:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	72fb      	strb	r3, [r7, #11]
      break;
 800463e:	e006      	b.n	800464e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1e8      	bne.n	8004620 <SAI_Disable+0x2c>

  return status;
 800464e:	7afb      	ldrb	r3, [r7, #11]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	20000000 	.word	0x20000000
 8004660:	95cbec1b 	.word	0x95cbec1b

08004664 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e040      	b.n	80046f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800467a:	2b00      	cmp	r3, #0
 800467c:	d106      	bne.n	800468c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fc fb94 	bl	8000db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2224      	movs	r2, #36	; 0x24
 8004690:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0201 	bic.w	r2, r2, #1
 80046a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f82c 	bl	8004700 <UART_SetConfig>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e022      	b.n	80046f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fa84 	bl	8004bc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fb0b 	bl	8004d0c <UART_CheckIdleState>
 80046f6:	4603      	mov	r3, r0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	4313      	orrs	r3, r2
 8004722:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4ba6      	ldr	r3, [pc, #664]	; (80049c4 <UART_SetConfig+0x2c4>)
 800472c:	4013      	ands	r3, r2
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6812      	ldr	r2, [r2, #0]
 8004732:	6979      	ldr	r1, [r7, #20]
 8004734:	430b      	orrs	r3, r1
 8004736:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	430a      	orrs	r2, r1
 8004770:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a94      	ldr	r2, [pc, #592]	; (80049c8 <UART_SetConfig+0x2c8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d120      	bne.n	80047be <UART_SetConfig+0xbe>
 800477c:	4b93      	ldr	r3, [pc, #588]	; (80049cc <UART_SetConfig+0x2cc>)
 800477e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	2b03      	cmp	r3, #3
 8004788:	d816      	bhi.n	80047b8 <UART_SetConfig+0xb8>
 800478a:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <UART_SetConfig+0x90>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	080047a1 	.word	0x080047a1
 8004794:	080047ad 	.word	0x080047ad
 8004798:	080047a7 	.word	0x080047a7
 800479c:	080047b3 	.word	0x080047b3
 80047a0:	2301      	movs	r3, #1
 80047a2:	77fb      	strb	r3, [r7, #31]
 80047a4:	e150      	b.n	8004a48 <UART_SetConfig+0x348>
 80047a6:	2302      	movs	r3, #2
 80047a8:	77fb      	strb	r3, [r7, #31]
 80047aa:	e14d      	b.n	8004a48 <UART_SetConfig+0x348>
 80047ac:	2304      	movs	r3, #4
 80047ae:	77fb      	strb	r3, [r7, #31]
 80047b0:	e14a      	b.n	8004a48 <UART_SetConfig+0x348>
 80047b2:	2308      	movs	r3, #8
 80047b4:	77fb      	strb	r3, [r7, #31]
 80047b6:	e147      	b.n	8004a48 <UART_SetConfig+0x348>
 80047b8:	2310      	movs	r3, #16
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e144      	b.n	8004a48 <UART_SetConfig+0x348>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a83      	ldr	r2, [pc, #524]	; (80049d0 <UART_SetConfig+0x2d0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d132      	bne.n	800482e <UART_SetConfig+0x12e>
 80047c8:	4b80      	ldr	r3, [pc, #512]	; (80049cc <UART_SetConfig+0x2cc>)
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	2b0c      	cmp	r3, #12
 80047d4:	d828      	bhi.n	8004828 <UART_SetConfig+0x128>
 80047d6:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <UART_SetConfig+0xdc>)
 80047d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047dc:	08004811 	.word	0x08004811
 80047e0:	08004829 	.word	0x08004829
 80047e4:	08004829 	.word	0x08004829
 80047e8:	08004829 	.word	0x08004829
 80047ec:	0800481d 	.word	0x0800481d
 80047f0:	08004829 	.word	0x08004829
 80047f4:	08004829 	.word	0x08004829
 80047f8:	08004829 	.word	0x08004829
 80047fc:	08004817 	.word	0x08004817
 8004800:	08004829 	.word	0x08004829
 8004804:	08004829 	.word	0x08004829
 8004808:	08004829 	.word	0x08004829
 800480c:	08004823 	.word	0x08004823
 8004810:	2300      	movs	r3, #0
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e118      	b.n	8004a48 <UART_SetConfig+0x348>
 8004816:	2302      	movs	r3, #2
 8004818:	77fb      	strb	r3, [r7, #31]
 800481a:	e115      	b.n	8004a48 <UART_SetConfig+0x348>
 800481c:	2304      	movs	r3, #4
 800481e:	77fb      	strb	r3, [r7, #31]
 8004820:	e112      	b.n	8004a48 <UART_SetConfig+0x348>
 8004822:	2308      	movs	r3, #8
 8004824:	77fb      	strb	r3, [r7, #31]
 8004826:	e10f      	b.n	8004a48 <UART_SetConfig+0x348>
 8004828:	2310      	movs	r3, #16
 800482a:	77fb      	strb	r3, [r7, #31]
 800482c:	e10c      	b.n	8004a48 <UART_SetConfig+0x348>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a68      	ldr	r2, [pc, #416]	; (80049d4 <UART_SetConfig+0x2d4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d120      	bne.n	800487a <UART_SetConfig+0x17a>
 8004838:	4b64      	ldr	r3, [pc, #400]	; (80049cc <UART_SetConfig+0x2cc>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004842:	2b30      	cmp	r3, #48	; 0x30
 8004844:	d013      	beq.n	800486e <UART_SetConfig+0x16e>
 8004846:	2b30      	cmp	r3, #48	; 0x30
 8004848:	d814      	bhi.n	8004874 <UART_SetConfig+0x174>
 800484a:	2b20      	cmp	r3, #32
 800484c:	d009      	beq.n	8004862 <UART_SetConfig+0x162>
 800484e:	2b20      	cmp	r3, #32
 8004850:	d810      	bhi.n	8004874 <UART_SetConfig+0x174>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <UART_SetConfig+0x15c>
 8004856:	2b10      	cmp	r3, #16
 8004858:	d006      	beq.n	8004868 <UART_SetConfig+0x168>
 800485a:	e00b      	b.n	8004874 <UART_SetConfig+0x174>
 800485c:	2300      	movs	r3, #0
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e0f2      	b.n	8004a48 <UART_SetConfig+0x348>
 8004862:	2302      	movs	r3, #2
 8004864:	77fb      	strb	r3, [r7, #31]
 8004866:	e0ef      	b.n	8004a48 <UART_SetConfig+0x348>
 8004868:	2304      	movs	r3, #4
 800486a:	77fb      	strb	r3, [r7, #31]
 800486c:	e0ec      	b.n	8004a48 <UART_SetConfig+0x348>
 800486e:	2308      	movs	r3, #8
 8004870:	77fb      	strb	r3, [r7, #31]
 8004872:	e0e9      	b.n	8004a48 <UART_SetConfig+0x348>
 8004874:	2310      	movs	r3, #16
 8004876:	77fb      	strb	r3, [r7, #31]
 8004878:	e0e6      	b.n	8004a48 <UART_SetConfig+0x348>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a56      	ldr	r2, [pc, #344]	; (80049d8 <UART_SetConfig+0x2d8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d120      	bne.n	80048c6 <UART_SetConfig+0x1c6>
 8004884:	4b51      	ldr	r3, [pc, #324]	; (80049cc <UART_SetConfig+0x2cc>)
 8004886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800488e:	2bc0      	cmp	r3, #192	; 0xc0
 8004890:	d013      	beq.n	80048ba <UART_SetConfig+0x1ba>
 8004892:	2bc0      	cmp	r3, #192	; 0xc0
 8004894:	d814      	bhi.n	80048c0 <UART_SetConfig+0x1c0>
 8004896:	2b80      	cmp	r3, #128	; 0x80
 8004898:	d009      	beq.n	80048ae <UART_SetConfig+0x1ae>
 800489a:	2b80      	cmp	r3, #128	; 0x80
 800489c:	d810      	bhi.n	80048c0 <UART_SetConfig+0x1c0>
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <UART_SetConfig+0x1a8>
 80048a2:	2b40      	cmp	r3, #64	; 0x40
 80048a4:	d006      	beq.n	80048b4 <UART_SetConfig+0x1b4>
 80048a6:	e00b      	b.n	80048c0 <UART_SetConfig+0x1c0>
 80048a8:	2300      	movs	r3, #0
 80048aa:	77fb      	strb	r3, [r7, #31]
 80048ac:	e0cc      	b.n	8004a48 <UART_SetConfig+0x348>
 80048ae:	2302      	movs	r3, #2
 80048b0:	77fb      	strb	r3, [r7, #31]
 80048b2:	e0c9      	b.n	8004a48 <UART_SetConfig+0x348>
 80048b4:	2304      	movs	r3, #4
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e0c6      	b.n	8004a48 <UART_SetConfig+0x348>
 80048ba:	2308      	movs	r3, #8
 80048bc:	77fb      	strb	r3, [r7, #31]
 80048be:	e0c3      	b.n	8004a48 <UART_SetConfig+0x348>
 80048c0:	2310      	movs	r3, #16
 80048c2:	77fb      	strb	r3, [r7, #31]
 80048c4:	e0c0      	b.n	8004a48 <UART_SetConfig+0x348>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a44      	ldr	r2, [pc, #272]	; (80049dc <UART_SetConfig+0x2dc>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d125      	bne.n	800491c <UART_SetConfig+0x21c>
 80048d0:	4b3e      	ldr	r3, [pc, #248]	; (80049cc <UART_SetConfig+0x2cc>)
 80048d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048de:	d017      	beq.n	8004910 <UART_SetConfig+0x210>
 80048e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048e4:	d817      	bhi.n	8004916 <UART_SetConfig+0x216>
 80048e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ea:	d00b      	beq.n	8004904 <UART_SetConfig+0x204>
 80048ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f0:	d811      	bhi.n	8004916 <UART_SetConfig+0x216>
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <UART_SetConfig+0x1fe>
 80048f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048fa:	d006      	beq.n	800490a <UART_SetConfig+0x20a>
 80048fc:	e00b      	b.n	8004916 <UART_SetConfig+0x216>
 80048fe:	2300      	movs	r3, #0
 8004900:	77fb      	strb	r3, [r7, #31]
 8004902:	e0a1      	b.n	8004a48 <UART_SetConfig+0x348>
 8004904:	2302      	movs	r3, #2
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	e09e      	b.n	8004a48 <UART_SetConfig+0x348>
 800490a:	2304      	movs	r3, #4
 800490c:	77fb      	strb	r3, [r7, #31]
 800490e:	e09b      	b.n	8004a48 <UART_SetConfig+0x348>
 8004910:	2308      	movs	r3, #8
 8004912:	77fb      	strb	r3, [r7, #31]
 8004914:	e098      	b.n	8004a48 <UART_SetConfig+0x348>
 8004916:	2310      	movs	r3, #16
 8004918:	77fb      	strb	r3, [r7, #31]
 800491a:	e095      	b.n	8004a48 <UART_SetConfig+0x348>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a2f      	ldr	r2, [pc, #188]	; (80049e0 <UART_SetConfig+0x2e0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d125      	bne.n	8004972 <UART_SetConfig+0x272>
 8004926:	4b29      	ldr	r3, [pc, #164]	; (80049cc <UART_SetConfig+0x2cc>)
 8004928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004930:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004934:	d017      	beq.n	8004966 <UART_SetConfig+0x266>
 8004936:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800493a:	d817      	bhi.n	800496c <UART_SetConfig+0x26c>
 800493c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004940:	d00b      	beq.n	800495a <UART_SetConfig+0x25a>
 8004942:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004946:	d811      	bhi.n	800496c <UART_SetConfig+0x26c>
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <UART_SetConfig+0x254>
 800494c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004950:	d006      	beq.n	8004960 <UART_SetConfig+0x260>
 8004952:	e00b      	b.n	800496c <UART_SetConfig+0x26c>
 8004954:	2301      	movs	r3, #1
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	e076      	b.n	8004a48 <UART_SetConfig+0x348>
 800495a:	2302      	movs	r3, #2
 800495c:	77fb      	strb	r3, [r7, #31]
 800495e:	e073      	b.n	8004a48 <UART_SetConfig+0x348>
 8004960:	2304      	movs	r3, #4
 8004962:	77fb      	strb	r3, [r7, #31]
 8004964:	e070      	b.n	8004a48 <UART_SetConfig+0x348>
 8004966:	2308      	movs	r3, #8
 8004968:	77fb      	strb	r3, [r7, #31]
 800496a:	e06d      	b.n	8004a48 <UART_SetConfig+0x348>
 800496c:	2310      	movs	r3, #16
 800496e:	77fb      	strb	r3, [r7, #31]
 8004970:	e06a      	b.n	8004a48 <UART_SetConfig+0x348>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a1b      	ldr	r2, [pc, #108]	; (80049e4 <UART_SetConfig+0x2e4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d138      	bne.n	80049ee <UART_SetConfig+0x2ee>
 800497c:	4b13      	ldr	r3, [pc, #76]	; (80049cc <UART_SetConfig+0x2cc>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004982:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004986:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800498a:	d017      	beq.n	80049bc <UART_SetConfig+0x2bc>
 800498c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004990:	d82a      	bhi.n	80049e8 <UART_SetConfig+0x2e8>
 8004992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004996:	d00b      	beq.n	80049b0 <UART_SetConfig+0x2b0>
 8004998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800499c:	d824      	bhi.n	80049e8 <UART_SetConfig+0x2e8>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <UART_SetConfig+0x2aa>
 80049a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a6:	d006      	beq.n	80049b6 <UART_SetConfig+0x2b6>
 80049a8:	e01e      	b.n	80049e8 <UART_SetConfig+0x2e8>
 80049aa:	2300      	movs	r3, #0
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e04b      	b.n	8004a48 <UART_SetConfig+0x348>
 80049b0:	2302      	movs	r3, #2
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	e048      	b.n	8004a48 <UART_SetConfig+0x348>
 80049b6:	2304      	movs	r3, #4
 80049b8:	77fb      	strb	r3, [r7, #31]
 80049ba:	e045      	b.n	8004a48 <UART_SetConfig+0x348>
 80049bc:	2308      	movs	r3, #8
 80049be:	77fb      	strb	r3, [r7, #31]
 80049c0:	e042      	b.n	8004a48 <UART_SetConfig+0x348>
 80049c2:	bf00      	nop
 80049c4:	efff69f3 	.word	0xefff69f3
 80049c8:	40011000 	.word	0x40011000
 80049cc:	40023800 	.word	0x40023800
 80049d0:	40004400 	.word	0x40004400
 80049d4:	40004800 	.word	0x40004800
 80049d8:	40004c00 	.word	0x40004c00
 80049dc:	40005000 	.word	0x40005000
 80049e0:	40011400 	.word	0x40011400
 80049e4:	40007800 	.word	0x40007800
 80049e8:	2310      	movs	r3, #16
 80049ea:	77fb      	strb	r3, [r7, #31]
 80049ec:	e02c      	b.n	8004a48 <UART_SetConfig+0x348>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a72      	ldr	r2, [pc, #456]	; (8004bbc <UART_SetConfig+0x4bc>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d125      	bne.n	8004a44 <UART_SetConfig+0x344>
 80049f8:	4b71      	ldr	r3, [pc, #452]	; (8004bc0 <UART_SetConfig+0x4c0>)
 80049fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a02:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a06:	d017      	beq.n	8004a38 <UART_SetConfig+0x338>
 8004a08:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a0c:	d817      	bhi.n	8004a3e <UART_SetConfig+0x33e>
 8004a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a12:	d00b      	beq.n	8004a2c <UART_SetConfig+0x32c>
 8004a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a18:	d811      	bhi.n	8004a3e <UART_SetConfig+0x33e>
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <UART_SetConfig+0x326>
 8004a1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a22:	d006      	beq.n	8004a32 <UART_SetConfig+0x332>
 8004a24:	e00b      	b.n	8004a3e <UART_SetConfig+0x33e>
 8004a26:	2300      	movs	r3, #0
 8004a28:	77fb      	strb	r3, [r7, #31]
 8004a2a:	e00d      	b.n	8004a48 <UART_SetConfig+0x348>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	77fb      	strb	r3, [r7, #31]
 8004a30:	e00a      	b.n	8004a48 <UART_SetConfig+0x348>
 8004a32:	2304      	movs	r3, #4
 8004a34:	77fb      	strb	r3, [r7, #31]
 8004a36:	e007      	b.n	8004a48 <UART_SetConfig+0x348>
 8004a38:	2308      	movs	r3, #8
 8004a3a:	77fb      	strb	r3, [r7, #31]
 8004a3c:	e004      	b.n	8004a48 <UART_SetConfig+0x348>
 8004a3e:	2310      	movs	r3, #16
 8004a40:	77fb      	strb	r3, [r7, #31]
 8004a42:	e001      	b.n	8004a48 <UART_SetConfig+0x348>
 8004a44:	2310      	movs	r3, #16
 8004a46:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a50:	d15b      	bne.n	8004b0a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004a52:	7ffb      	ldrb	r3, [r7, #31]
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d828      	bhi.n	8004aaa <UART_SetConfig+0x3aa>
 8004a58:	a201      	add	r2, pc, #4	; (adr r2, 8004a60 <UART_SetConfig+0x360>)
 8004a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5e:	bf00      	nop
 8004a60:	08004a85 	.word	0x08004a85
 8004a64:	08004a8d 	.word	0x08004a8d
 8004a68:	08004a95 	.word	0x08004a95
 8004a6c:	08004aab 	.word	0x08004aab
 8004a70:	08004a9b 	.word	0x08004a9b
 8004a74:	08004aab 	.word	0x08004aab
 8004a78:	08004aab 	.word	0x08004aab
 8004a7c:	08004aab 	.word	0x08004aab
 8004a80:	08004aa3 	.word	0x08004aa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a84:	f7fe fb96 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 8004a88:	61b8      	str	r0, [r7, #24]
        break;
 8004a8a:	e013      	b.n	8004ab4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a8c:	f7fe fba6 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
 8004a90:	61b8      	str	r0, [r7, #24]
        break;
 8004a92:	e00f      	b.n	8004ab4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a94:	4b4b      	ldr	r3, [pc, #300]	; (8004bc4 <UART_SetConfig+0x4c4>)
 8004a96:	61bb      	str	r3, [r7, #24]
        break;
 8004a98:	e00c      	b.n	8004ab4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a9a:	f7fe fa79 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8004a9e:	61b8      	str	r0, [r7, #24]
        break;
 8004aa0:	e008      	b.n	8004ab4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa6:	61bb      	str	r3, [r7, #24]
        break;
 8004aa8:	e004      	b.n	8004ab4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	77bb      	strb	r3, [r7, #30]
        break;
 8004ab2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d074      	beq.n	8004ba4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	005a      	lsls	r2, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	085b      	lsrs	r3, r3, #1
 8004ac4:	441a      	add	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ace:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	2b0f      	cmp	r3, #15
 8004ad4:	d916      	bls.n	8004b04 <UART_SetConfig+0x404>
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004adc:	d212      	bcs.n	8004b04 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	f023 030f 	bic.w	r3, r3, #15
 8004ae6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	085b      	lsrs	r3, r3, #1
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	89fb      	ldrh	r3, [r7, #14]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	89fa      	ldrh	r2, [r7, #14]
 8004b00:	60da      	str	r2, [r3, #12]
 8004b02:	e04f      	b.n	8004ba4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	77bb      	strb	r3, [r7, #30]
 8004b08:	e04c      	b.n	8004ba4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b0a:	7ffb      	ldrb	r3, [r7, #31]
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d828      	bhi.n	8004b62 <UART_SetConfig+0x462>
 8004b10:	a201      	add	r2, pc, #4	; (adr r2, 8004b18 <UART_SetConfig+0x418>)
 8004b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b16:	bf00      	nop
 8004b18:	08004b3d 	.word	0x08004b3d
 8004b1c:	08004b45 	.word	0x08004b45
 8004b20:	08004b4d 	.word	0x08004b4d
 8004b24:	08004b63 	.word	0x08004b63
 8004b28:	08004b53 	.word	0x08004b53
 8004b2c:	08004b63 	.word	0x08004b63
 8004b30:	08004b63 	.word	0x08004b63
 8004b34:	08004b63 	.word	0x08004b63
 8004b38:	08004b5b 	.word	0x08004b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b3c:	f7fe fb3a 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 8004b40:	61b8      	str	r0, [r7, #24]
        break;
 8004b42:	e013      	b.n	8004b6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b44:	f7fe fb4a 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
 8004b48:	61b8      	str	r0, [r7, #24]
        break;
 8004b4a:	e00f      	b.n	8004b6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b4c:	4b1d      	ldr	r3, [pc, #116]	; (8004bc4 <UART_SetConfig+0x4c4>)
 8004b4e:	61bb      	str	r3, [r7, #24]
        break;
 8004b50:	e00c      	b.n	8004b6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b52:	f7fe fa1d 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8004b56:	61b8      	str	r0, [r7, #24]
        break;
 8004b58:	e008      	b.n	8004b6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b5e:	61bb      	str	r3, [r7, #24]
        break;
 8004b60:	e004      	b.n	8004b6c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	77bb      	strb	r3, [r7, #30]
        break;
 8004b6a:	bf00      	nop
    }

    if (pclk != 0U)
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d018      	beq.n	8004ba4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	085a      	lsrs	r2, r3, #1
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	441a      	add	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	2b0f      	cmp	r3, #15
 8004b8a:	d909      	bls.n	8004ba0 <UART_SetConfig+0x4a0>
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b92:	d205      	bcs.n	8004ba0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	60da      	str	r2, [r3, #12]
 8004b9e:	e001      	b.n	8004ba4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004bb0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40007c00 	.word	0x40007c00
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	00f42400 	.word	0x00f42400

08004bc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	f003 0308 	and.w	r3, r3, #8
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	f003 0310 	and.w	r3, r3, #16
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	f003 0320 	and.w	r3, r3, #32
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01a      	beq.n	8004cde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cc6:	d10a      	bne.n	8004cde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	605a      	str	r2, [r3, #4]
  }
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d1c:	f7fc fa40 	bl	80011a0 <HAL_GetTick>
 8004d20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0308 	and.w	r3, r3, #8
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d10e      	bne.n	8004d4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f81b 	bl	8004d7a <UART_WaitOnFlagUntilTimeout>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e011      	b.n	8004d72 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2220      	movs	r2, #32
 8004d52:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b09c      	sub	sp, #112	; 0x70
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	60f8      	str	r0, [r7, #12]
 8004d82:	60b9      	str	r1, [r7, #8]
 8004d84:	603b      	str	r3, [r7, #0]
 8004d86:	4613      	mov	r3, r2
 8004d88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d8a:	e0a7      	b.n	8004edc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d92:	f000 80a3 	beq.w	8004edc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d96:	f7fc fa03 	bl	80011a0 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d302      	bcc.n	8004dac <UART_WaitOnFlagUntilTimeout+0x32>
 8004da6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d13f      	bne.n	8004e2c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004db4:	e853 3f00 	ldrex	r3, [r3]
 8004db8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dc0:	667b      	str	r3, [r7, #100]	; 0x64
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dcc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004dd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004dd2:	e841 2300 	strex	r3, r2, [r1]
 8004dd6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1e6      	bne.n	8004dac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3308      	adds	r3, #8
 8004de4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df0:	f023 0301 	bic.w	r3, r3, #1
 8004df4:	663b      	str	r3, [r7, #96]	; 0x60
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3308      	adds	r3, #8
 8004dfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004dfe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e5      	bne.n	8004dde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2220      	movs	r2, #32
 8004e16:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e068      	b.n	8004efe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0304 	and.w	r3, r3, #4
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d050      	beq.n	8004edc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e48:	d148      	bne.n	8004edc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e52:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5c:	e853 3f00 	ldrex	r3, [r3]
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e72:	637b      	str	r3, [r7, #52]	; 0x34
 8004e74:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e6      	bne.n	8004e54 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3308      	adds	r3, #8
 8004e8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	613b      	str	r3, [r7, #16]
   return(result);
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f023 0301 	bic.w	r3, r3, #1
 8004e9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3308      	adds	r3, #8
 8004ea4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ea6:	623a      	str	r2, [r7, #32]
 8004ea8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	69f9      	ldr	r1, [r7, #28]
 8004eac:	6a3a      	ldr	r2, [r7, #32]
 8004eae:	e841 2300 	strex	r3, r2, [r1]
 8004eb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1e5      	bne.n	8004e86 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e010      	b.n	8004efe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	69da      	ldr	r2, [r3, #28]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	bf0c      	ite	eq
 8004eec:	2301      	moveq	r3, #1
 8004eee:	2300      	movne	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	f43f af48 	beq.w	8004d8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3770      	adds	r7, #112	; 0x70
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f08:	b084      	sub	sp, #16
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b084      	sub	sp, #16
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	f107 001c 	add.w	r0, r7, #28
 8004f16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d120      	bne.n	8004f62 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	4b20      	ldr	r3, [pc, #128]	; (8004fb4 <USB_CoreInit+0xac>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d105      	bne.n	8004f56 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fa96 	bl	8005488 <USB_CoreReset>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	73fb      	strb	r3, [r7, #15]
 8004f60:	e010      	b.n	8004f84 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fa8a 	bl	8005488 <USB_CoreReset>
 8004f74:	4603      	mov	r3, r0
 8004f76:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d10b      	bne.n	8004fa2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f043 0206 	orr.w	r2, r3, #6
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f043 0220 	orr.w	r2, r3, #32
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fae:	b004      	add	sp, #16
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	ffbdffbf 	.word	0xffbdffbf

08004fb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f023 0201 	bic.w	r2, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b084      	sub	sp, #16
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ff6:	78fb      	ldrb	r3, [r7, #3]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d115      	bne.n	8005028 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005008:	2001      	movs	r0, #1
 800500a:	f7fc f8d5 	bl	80011b8 <HAL_Delay>
      ms++;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3301      	adds	r3, #1
 8005012:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fa29 	bl	800546c <USB_GetMode>
 800501a:	4603      	mov	r3, r0
 800501c:	2b01      	cmp	r3, #1
 800501e:	d01e      	beq.n	800505e <USB_SetCurrentMode+0x84>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b31      	cmp	r3, #49	; 0x31
 8005024:	d9f0      	bls.n	8005008 <USB_SetCurrentMode+0x2e>
 8005026:	e01a      	b.n	800505e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005028:	78fb      	ldrb	r3, [r7, #3]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d115      	bne.n	800505a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800503a:	2001      	movs	r0, #1
 800503c:	f7fc f8bc 	bl	80011b8 <HAL_Delay>
      ms++;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	3301      	adds	r3, #1
 8005044:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fa10 	bl	800546c <USB_GetMode>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d005      	beq.n	800505e <USB_SetCurrentMode+0x84>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b31      	cmp	r3, #49	; 0x31
 8005056:	d9f0      	bls.n	800503a <USB_SetCurrentMode+0x60>
 8005058:	e001      	b.n	800505e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e005      	b.n	800506a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b32      	cmp	r3, #50	; 0x32
 8005062:	d101      	bne.n	8005068 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e000      	b.n	800506a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005074:	b084      	sub	sp, #16
 8005076:	b580      	push	{r7, lr}
 8005078:	b086      	sub	sp, #24
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005082:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800508e:	2300      	movs	r3, #0
 8005090:	613b      	str	r3, [r7, #16]
 8005092:	e009      	b.n	80050a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	3340      	adds	r3, #64	; 0x40
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	2200      	movs	r2, #0
 80050a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	3301      	adds	r3, #1
 80050a6:	613b      	str	r3, [r7, #16]
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	2b0e      	cmp	r3, #14
 80050ac:	d9f2      	bls.n	8005094 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d11c      	bne.n	80050ee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050c2:	f043 0302 	orr.w	r3, r3, #2
 80050c6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050cc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	e005      	b.n	80050fa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005100:	461a      	mov	r2, r3
 8005102:	2300      	movs	r3, #0
 8005104:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510c:	4619      	mov	r1, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005114:	461a      	mov	r2, r3
 8005116:	680b      	ldr	r3, [r1, #0]
 8005118:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800511a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511c:	2b01      	cmp	r3, #1
 800511e:	d10c      	bne.n	800513a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005122:	2b00      	cmp	r3, #0
 8005124:	d104      	bne.n	8005130 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005126:	2100      	movs	r1, #0
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f965 	bl	80053f8 <USB_SetDevSpeed>
 800512e:	e008      	b.n	8005142 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005130:	2101      	movs	r1, #1
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f960 	bl	80053f8 <USB_SetDevSpeed>
 8005138:	e003      	b.n	8005142 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800513a:	2103      	movs	r1, #3
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f95b 	bl	80053f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005142:	2110      	movs	r1, #16
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f8f3 	bl	8005330 <USB_FlushTxFifo>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f91f 	bl	8005398 <USB_FlushRxFifo>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516a:	461a      	mov	r2, r3
 800516c:	2300      	movs	r3, #0
 800516e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005176:	461a      	mov	r2, r3
 8005178:	2300      	movs	r3, #0
 800517a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005182:	461a      	mov	r2, r3
 8005184:	2300      	movs	r3, #0
 8005186:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005188:	2300      	movs	r3, #0
 800518a:	613b      	str	r3, [r7, #16]
 800518c:	e043      	b.n	8005216 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051a4:	d118      	bne.n	80051d8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10a      	bne.n	80051c2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b8:	461a      	mov	r2, r3
 80051ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051be:	6013      	str	r3, [r2, #0]
 80051c0:	e013      	b.n	80051ea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ce:	461a      	mov	r2, r3
 80051d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	e008      	b.n	80051ea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e4:	461a      	mov	r2, r3
 80051e6:	2300      	movs	r3, #0
 80051e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f6:	461a      	mov	r2, r3
 80051f8:	2300      	movs	r3, #0
 80051fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005208:	461a      	mov	r2, r3
 800520a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800520e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	3301      	adds	r3, #1
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	429a      	cmp	r2, r3
 800521c:	d3b7      	bcc.n	800518e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800521e:	2300      	movs	r3, #0
 8005220:	613b      	str	r3, [r7, #16]
 8005222:	e043      	b.n	80052ac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800523a:	d118      	bne.n	800526e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10a      	bne.n	8005258 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524e:	461a      	mov	r2, r3
 8005250:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005254:	6013      	str	r3, [r2, #0]
 8005256:	e013      	b.n	8005280 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4413      	add	r3, r2
 8005260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005264:	461a      	mov	r2, r3
 8005266:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	e008      	b.n	8005280 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527a:	461a      	mov	r2, r3
 800527c:	2300      	movs	r3, #0
 800527e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528c:	461a      	mov	r2, r3
 800528e:	2300      	movs	r3, #0
 8005290:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529e:	461a      	mov	r2, r3
 80052a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	3301      	adds	r3, #1
 80052aa:	613b      	str	r3, [r7, #16]
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d3b7      	bcc.n	8005224 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d105      	bne.n	80052e8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	f043 0210 	orr.w	r2, r3, #16
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	699a      	ldr	r2, [r3, #24]
 80052ec:	4b0e      	ldr	r3, [pc, #56]	; (8005328 <USB_DevInit+0x2b4>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d005      	beq.n	8005306 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	f043 0208 	orr.w	r2, r3, #8
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005308:	2b01      	cmp	r3, #1
 800530a:	d105      	bne.n	8005318 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	699a      	ldr	r2, [r3, #24]
 8005310:	4b06      	ldr	r3, [pc, #24]	; (800532c <USB_DevInit+0x2b8>)
 8005312:	4313      	orrs	r3, r2
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005318:	7dfb      	ldrb	r3, [r7, #23]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005324:	b004      	add	sp, #16
 8005326:	4770      	bx	lr
 8005328:	803c3800 	.word	0x803c3800
 800532c:	40000004 	.word	0x40000004

08005330 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3301      	adds	r3, #1
 8005342:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4a13      	ldr	r2, [pc, #76]	; (8005394 <USB_FlushTxFifo+0x64>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d901      	bls.n	8005350 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e01b      	b.n	8005388 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	daf2      	bge.n	800533e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	019b      	lsls	r3, r3, #6
 8005360:	f043 0220 	orr.w	r2, r3, #32
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3301      	adds	r3, #1
 800536c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4a08      	ldr	r2, [pc, #32]	; (8005394 <USB_FlushTxFifo+0x64>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d901      	bls.n	800537a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e006      	b.n	8005388 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b20      	cmp	r3, #32
 8005384:	d0f0      	beq.n	8005368 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	00030d40 	.word	0x00030d40

08005398 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3301      	adds	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4a11      	ldr	r2, [pc, #68]	; (80053f4 <USB_FlushRxFifo+0x5c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d901      	bls.n	80053b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e018      	b.n	80053e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	daf2      	bge.n	80053a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2210      	movs	r2, #16
 80053c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	3301      	adds	r3, #1
 80053cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4a08      	ldr	r2, [pc, #32]	; (80053f4 <USB_FlushRxFifo+0x5c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d901      	bls.n	80053da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e006      	b.n	80053e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0310 	and.w	r3, r3, #16
 80053e2:	2b10      	cmp	r3, #16
 80053e4:	d0f0      	beq.n	80053c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	00030d40 	.word	0x00030d40

080053f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	78fb      	ldrb	r3, [r7, #3]
 8005412:	68f9      	ldr	r1, [r7, #12]
 8005414:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005418:	4313      	orrs	r3, r2
 800541a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800542a:	b480      	push	{r7}
 800542c:	b085      	sub	sp, #20
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005444:	f023 0303 	bic.w	r3, r3, #3
 8005448:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005458:	f043 0302 	orr.w	r3, r3, #2
 800545c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	f003 0301 	and.w	r3, r3, #1
}
 800547c:	4618      	mov	r0, r3
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	3301      	adds	r3, #1
 8005498:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4a13      	ldr	r2, [pc, #76]	; (80054ec <USB_CoreReset+0x64>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d901      	bls.n	80054a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e01b      	b.n	80054de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	daf2      	bge.n	8005494 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f043 0201 	orr.w	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3301      	adds	r3, #1
 80054c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4a09      	ldr	r2, [pc, #36]	; (80054ec <USB_CoreReset+0x64>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d901      	bls.n	80054d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e006      	b.n	80054de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d0f0      	beq.n	80054be <USB_CoreReset+0x36>

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	00030d40 	.word	0x00030d40

080054f0 <memset>:
 80054f0:	4402      	add	r2, r0
 80054f2:	4603      	mov	r3, r0
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d100      	bne.n	80054fa <memset+0xa>
 80054f8:	4770      	bx	lr
 80054fa:	f803 1b01 	strb.w	r1, [r3], #1
 80054fe:	e7f9      	b.n	80054f4 <memset+0x4>

08005500 <__libc_init_array>:
 8005500:	b570      	push	{r4, r5, r6, lr}
 8005502:	4d0d      	ldr	r5, [pc, #52]	; (8005538 <__libc_init_array+0x38>)
 8005504:	4c0d      	ldr	r4, [pc, #52]	; (800553c <__libc_init_array+0x3c>)
 8005506:	1b64      	subs	r4, r4, r5
 8005508:	10a4      	asrs	r4, r4, #2
 800550a:	2600      	movs	r6, #0
 800550c:	42a6      	cmp	r6, r4
 800550e:	d109      	bne.n	8005524 <__libc_init_array+0x24>
 8005510:	4d0b      	ldr	r5, [pc, #44]	; (8005540 <__libc_init_array+0x40>)
 8005512:	4c0c      	ldr	r4, [pc, #48]	; (8005544 <__libc_init_array+0x44>)
 8005514:	f000 f818 	bl	8005548 <_init>
 8005518:	1b64      	subs	r4, r4, r5
 800551a:	10a4      	asrs	r4, r4, #2
 800551c:	2600      	movs	r6, #0
 800551e:	42a6      	cmp	r6, r4
 8005520:	d105      	bne.n	800552e <__libc_init_array+0x2e>
 8005522:	bd70      	pop	{r4, r5, r6, pc}
 8005524:	f855 3b04 	ldr.w	r3, [r5], #4
 8005528:	4798      	blx	r3
 800552a:	3601      	adds	r6, #1
 800552c:	e7ee      	b.n	800550c <__libc_init_array+0xc>
 800552e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005532:	4798      	blx	r3
 8005534:	3601      	adds	r6, #1
 8005536:	e7f2      	b.n	800551e <__libc_init_array+0x1e>
 8005538:	08005580 	.word	0x08005580
 800553c:	08005580 	.word	0x08005580
 8005540:	08005580 	.word	0x08005580
 8005544:	08005584 	.word	0x08005584

08005548 <_init>:
 8005548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554a:	bf00      	nop
 800554c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554e:	bc08      	pop	{r3}
 8005550:	469e      	mov	lr, r3
 8005552:	4770      	bx	lr

08005554 <_fini>:
 8005554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005556:	bf00      	nop
 8005558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555a:	bc08      	pop	{r3}
 800555c:	469e      	mov	lr, r3
 800555e:	4770      	bx	lr
